<?xml version="1.0" encoding="utf-8"?>
<Project>
  <PropertyGroup Condition="'$(MSBuildProjectExtension)' == '.vcxproj'">
    <WholeProgramOptimization Condition="'$(IsDebugBuild)' != 'false'">false</WholeProgramOptimization>
    <WholeProgramOptimization Condition="'$(IsDebugBuild)' == 'false'">true</WholeProgramOptimization>
  </PropertyGroup>

  <ItemDefinitionGroup Condition="'$(MSBuildProjectExtension)' == '.vcxproj'">
    <ClCompile>
      <!-- Enable exceptions and RTTI -->
      <ExceptionHandling>Sync</ExceptionHandling>
      <RuntimeTypeInfo>true</RuntimeTypeInfo>
      <!-- C++/CLI does not support synchronous exceptions. -->
      <ExceptionHandling Condition="'$(CLRSupport)' == 'true'">Async</ExceptionHandling>

      <!-- Create debug symbols for all build types -->
      <DebugInformationFormat>ProgramDatabase</DebugInformationFormat>

      <!-- Enable Just My Code debugging for debug builds -->
      <SupportJustMyCode Condition="'$(IsDebugBuild)' != 'false'">true</SupportJustMyCode>

      <!-- Run-Time Error Checks for debug builds -->
      <BasicRuntimeChecks Condition="'$(IsDebugBuild)' != 'false'">EnableFastChecks</BasicRuntimeChecks>
      <BasicRuntimeChecks Condition="'$(CLRSupport)' == 'true'">Default</BasicRuntimeChecks>

      <!-- Optimization -->
      <Optimization Condition="'$(IsDebugBuild)' != 'false'">Disabled</Optimization>
      <InlineFunctionExpansion Condition="'$(IsDebugBuild)' != 'false'">Disabled</InlineFunctionExpansion>
      <WholeProgramOptimization Condition="'$(IsDebugBuild)' != 'false'">false</WholeProgramOptimization>

      <Optimization Condition="'$(IsDebugBuild)' == 'false'">MaxSpeed</Optimization>
      <InlineFunctionExpansion Condition="'$(IsDebugBuild)' == 'false'">Default</InlineFunctionExpansion>
      <AdditionalOptions Condition="'$(IsDebugBuild)' == 'false'">%(AdditionalOptions) /Ob3</AdditionalOptions>
      <OmitFramePointers Condition="'$(IsDebugBuild)' == 'false'">false</OmitFramePointers>
      <WholeProgramOptimization Condition="'$(IsDebugBuild)' == 'false'">true</WholeProgramOptimization>

      <!-- Diagnostics -->
      <WarningLevel>Level4</WarningLevel>
      <DiagnosticsFormat>Caret</DiagnosticsFormat>

      <!-- Emit full source paths in diagnostics -->
      <UseFullPaths>true</UseFullPaths>

      <!-- C4013: 'function' undefined; assuming extern returning int -->
      <TreatSpecificWarningsAsErrors>%(TreatSpecificWarningsAsErrors);4013</TreatSpecificWarningsAsErrors>

      <!-- C4099: 'identifier' : type name first seen using 'objecttype1' now seen using 'objecttype2' -->
      <TreatSpecificWarningsAsErrors>%(TreatSpecificWarningsAsErrors);4099</TreatSpecificWarningsAsErrors>

      <!-- C4130: 'operator' : logical operation on address of string constant -->
      <TreatSpecificWarningsAsErrors>%(TreatSpecificWarningsAsErrors);4130</TreatSpecificWarningsAsErrors>

      <!-- C4150: deletion of pointer to incomplete type 'type'; no destructor called
           While allowed, this is dangerous. The standard says:
             If the object being deleted has incomplete class type at the point
             of deletion and the complete class has a non-trivial destructor or
             a deallocation function, the behavior is undefined.
           In other words, if and only if the destructor turns out to be trivial,
           it is legal. But the compiler does not have enough information when
           this warning is emitted. -->
      <TreatSpecificWarningsAsErrors>%(TreatSpecificWarningsAsErrors);4150</TreatSpecificWarningsAsErrors>

      <!-- C4172: returning address of local variable or temporary -->
      <TreatSpecificWarningsAsErrors>%(TreatSpecificWarningsAsErrors);4172</TreatSpecificWarningsAsErrors>

      <!-- C4200: nonstandard extension used : zero-sized array in struct/union -->
      <DisableSpecificWarnings>%(DisableSpecificWarnings);4200</DisableSpecificWarnings>

      <!-- C4251: 'identifier' : class 'type' needs to have dll-interface to be used by clients of class 'type2' -->
      <DisableSpecificWarnings>%(DisableSpecificWarnings);4251</DisableSpecificWarnings>

      <!-- C4275: non - DLL-interface class 'class_1' used as base for DLL-interface class 'class_2' -->
      <DisableSpecificWarnings>%(DisableSpecificWarnings);4275</DisableSpecificWarnings>

      <!-- C4324: 'struct_name' : structure was padded due to __declspec(align())
           This warning can be safely ignored. It is just a note that the type
           is smaller than its alignment. -->
      <DisableSpecificWarnings>%(DisableSpecificWarnings);4324</DisableSpecificWarnings>

      <!-- C4456: declaration of 'identifier' hides previous local declaration -->
      <!-- C4457: declaration of 'identifier' hides function parameter -->
      <!-- C4458: declaration of 'identifier' hides class member -->
      <!-- C4459: declaration of 'identifier' hides global declaration -->
      <DisableSpecificWarnings>%(DisableSpecificWarnings);4456;4457;4458;4459</DisableSpecificWarnings>

      <!-- C4471: 'enumeration': a forward declaration of an unscoped enumeration must have an underlying type (int assumed)
           The standard forbids forward declarations of enums without explicit
           underlying type. MSVC is lenient enough and assumes int for such enums
           which might be wrong (too small or too large). -->
      <TreatSpecificWarningsAsErrors>%(TreatSpecificWarningsAsErrors);4471</TreatSpecificWarningsAsErrors>

      <!-- C4477: 'function' : format string 'string' requires an argument of type 'type', but variadic argument number has type 'type' -->
      <TreatSpecificWarningsAsErrors>%(TreatSpecificWarningsAsErrors);4477</TreatSpecificWarningsAsErrors>

      <!-- C4505: 'function' : unreferenced local function has been removed -->
      <DisableSpecificWarnings>%(DisableSpecificWarnings);4505</DisableSpecificWarnings>

      <!-- C4512 'class' : assignment operator could not be generated -->
      <DisableSpecificWarnings>%(DisableSpecificWarnings);4512</DisableSpecificWarnings>

      <!-- C4715: 'function' : not all control paths return a value -->
      <TreatSpecificWarningsAsErrors>%(TreatSpecificWarningsAsErrors);4715</TreatSpecificWarningsAsErrors>

      <!-- C4840: non-portable use of class 'type' as an argument to a variadic function
           This warning usually crops up by using strings classes as argument
           to formatting functions. Enforce explicit conversion to a compatible
           type, e.g. to a C string using a cast, '.c_str()' or similar. -->
      <TreatSpecificWarningsAsErrors>%(TreatSpecificWarningsAsErrors);4840</TreatSpecificWarningsAsErrors>

      <!-- Warning settings for external headers. All headers included with <> are
           treated as external. -->
      <TreatAngleIncludeAsExternal>true</TreatAngleIncludeAsExternal>
      <ExternalWarningLevel>Level1</ExternalWarningLevel>
      <ExternalTemplatesDiagnostics>true</ExternalTemplatesDiagnostics>

      <!-- Enforce unique output paths -->
      <ProgramDataBaseFileName Condition="'$(ConfigurationType)' == 'StaticLibrary'">$(TargetDir)$(TargetName).pdb</ProgramDataBaseFileName>
      <ObjectFileName>$(IntDir)%(RelativeDir)</ObjectFileName>
      <AssemblerListingLocation>$(IntDir)%(RelativeDir)</AssemblerListingLocation>

      <!-- Make the compiler emit individual COMDAT sections for functions and
           global data to enable linker optimizations. -->
      <FunctionLevelLinking>true</FunctionLevelLinking>
      <AdditionalOptions>%(AdditionalOptions) /Gw</AdditionalOptions>

      <!-- Enable faster PDB generation. -->
      <AdditionalOptions>%(AdditionalOptions) /Zf</AdditionalOptions>

      <!-- Use UTF-8 for all files. -->
      <AdditionalOptions>%(AdditionalOptions) /utf-8</AdditionalOptions>

      <!-- Standard Conformance -->
      <LanguageStandard>stdcpplatest</LanguageStandard>
      <!-- C++/CLI only supports C++17 -->
      <LanguageStandard Condition="'$(CLRSupport)' != 'false'">stdcpp17</LanguageStandard>
      <ConformanceMode>true</ConformanceMode>

      <!-- Conformance: Enforce the C++11 requirement that all functions declared
           inline must have a definition available in the same translation unit
           if they are used. -->
      <RemoveUnreferencedCodeData>true</RemoveUnreferencedCodeData>

      <!-- Conformance: Use external linkage for constexpr variables. -->
      <AdditionalOptions>%(AdditionalOptions) /Zc:externConstexpr</AdditionalOptions>

      <!-- Conformance: Assume that operator new throws std::bad_alloc instead
           of returning a null pointer. Avoids unnecessary null checks for
           allocation. -->
      <AdditionalOptions>%(AdditionalOptions) /Zc:throwingNew</AdditionalOptions>

      <!-- Conformance: Enables the __cplusplus preprocessor macro to report an
           updated value for recent C++ language standards support. -->
      <AdditionalOptions>%(AdditionalOptions) /Zc:__cplusplus</AdditionalOptions>

      <!-- Two-phase name lookup is not supported for C++/CLI. -->
      <AdditionalOptions Condition="'$(CLRSupport)' != 'false'">%(AdditionalOptions) /Zc:twoPhase-</AdditionalOptions>

      <!-- Conformance: Enable standard conform preprocessor. -->
      <AdditionalOptions Condition="'$(CLRSupport)' == 'false'">%(AdditionalOptions) /Zc:preprocessor</AdditionalOptions>

      <!-- Enable deterministic build. -->
      <AdditionalOptions>%(AdditionalOptions) /experimental:deterministic</AdditionalOptions>

      <!-- Target Windows 8 -->
      <PreprocessorDefinitions>%(PreprocessorDefinitions);_WIN32_WINNT=0x0602</PreprocessorDefinitions>

      <!-- Windows SDK -->
      <PreprocessorDefinitions>%(PreprocessorDefinitions);WIN32_LEAN_AND_MEAN;VC_EXTRALEAN;NOMINMAX</PreprocessorDefinitions>

      <!-- CoreCRT options -->

      <PreprocessorDefinitions>__STDC_WANT_LIB_EXT1__;%(PreprocessorDefinitions)</PreprocessorDefinitions>

      <!-- Enable C99-conforming format specifies. -->
      <PreprocessorDefinitions>_CRT_STDIO_ISO_WIDE_SPECIFIERS;%(PreprocessorDefinitions)</PreprocessorDefinitions>
    </ClCompile>

    <ClCompile Condition="'$(IsDebugBuild)'=='false'">
      <WholeProgramOptimization>true</WholeProgramOptimization>
    </ClCompile>

    <Lib>
      <TargetMachine Condition="'$(Platform)'=='Win32'">MachineX86</TargetMachine>
      <TargetMachine Condition="'$(Platform)'=='x64'">MachineX64</TargetMachine>
    </Lib>
    <Lib Condition="'$(IsDebugBuild)'=='false'">
      <LinkTimeCodeGeneration>true</LinkTimeCodeGeneration>
    </Lib>

    <Link Condition="'$(IsDebugBuild)'!='false'">
      <GenerateDebugInformation>DebugFastLink</GenerateDebugInformation>
    </Link>
    <Link Condition="'$(IsDebugBuild)'=='false'">
      <GenerateDebugInformation>DebugFull</GenerateDebugInformation>
      <EnableCOMDATFolding>true</EnableCOMDATFolding>
      <OptimizeReferences>true</OptimizeReferences>
      <LinkTimeCodeGeneration>true</LinkTimeCodeGeneration>
      <ImageHasSafeExceptionHandlers Condition="'$(Platform)'=='Win32'">true</ImageHasSafeExceptionHandlers>
      <SetChecksum>true</SetChecksum>
    </Link>

    <ResourceCompile>
      <ResourceOutputFileName>$(IntDir)%(RelativeDir)%(Filename).res</ResourceOutputFileName>
    </ResourceCompile>

    <FxCompile>
      <ObjectFileOutput>$(IntDir)%(RelativeDir)%(Filename).cso</ObjectFileOutput>
    </FxCompile>
  </ItemDefinitionGroup>

  <Target Name="FixupBuildProperties" BeforeTargets="Build;ClCompile">
    <ItemGroup>
      <ClCompile>
        <!-- Unconditionally enable debugging for debug and release configurations.
             We do this here because the platform props files unconditionally
             set $(DebugInformationFormat) after this file has been processed. -->
        <DebugInformationFormat>ProgramDatabase</DebugInformationFormat>
      </ClCompile>
    </ItemGroup>
  </Target>

  <PropertyGroup Condition="'$(MSBuildProjectExtension)' == '.csproj'">
    <HighEntropyVA>true</HighEntropyVA>
    <ChecksumAlgorithm>SHA256</ChecksumAlgorithm>

    <!-- Disable XML doc warnings in debug builds. -->
    <!-- CS1573: Parameter 'parameter' has no matching param tag in the XML comment for 'parameter' -->
    <NoWarn Condition="'$(Configuration)'!='Release'">$(NoWarn);1573</NoWarn>
    <!-- CS1574: XML comment on 'construct' has syntactically incorrect cref attribute 'name'  -->
    <NoWarn Condition="'$(Configuration)'!='Release'">$(NoWarn);1574</NoWarn>
    <!-- CS1591: Missing XML comment for publicly visible type or member 'Type_or_Member' -->
    <NoWarn Condition="'$(Configuration)'!='Release'">$(NoWarn);1591</NoWarn>
  </PropertyGroup>
</Project>
