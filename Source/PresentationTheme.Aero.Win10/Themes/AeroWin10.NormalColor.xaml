<ResourceDictionary
  xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
  xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
  xmlns:system="clr-namespace:System;assembly=mscorlib"
  xmlns:po="http://schemas.microsoft.com/winfx/2006/xaml/presentation/options"
  xmlns:aero="clr-namespace:PresentationTheme.Aero;assembly=PresentationTheme.Aero"
  xmlns:aero10="clr-namespace:PresentationTheme.Aero.Win10">

  <aero10:TypeOfConverter x:Key="TypeOfConverter"/>

  <Style x:Key="{x:Static SystemParameters.FocusVisualStyleKey}">
    <Setter Property="Control.Template">
      <Setter.Value>
        <ControlTemplate>
          <Rectangle SnapsToDevicePixels="True"
                     Stroke="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}"
                     StrokeThickness="1"
                     StrokeDashArray="1 1"
                     StrokeDashOffset="1.5"/>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>

  <Style x:Key="FocusVisual">
    <Setter Property="Control.Template">
      <Setter.Value>
        <ControlTemplate>
          <Rectangle Margin="2"
                     SnapsToDevicePixels="True"
                     Stroke="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}"
                     StrokeThickness="1"
                     StrokeDashArray="1 1"
                     StrokeDashOffset="1.5"/>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>


  <!-- TextBox ============================================================= -->

  <SolidColorBrush x:Key="TextBox.Background.Normal" Color="#FFFFFFFF" po:Freeze="True"/>
  <Color x:Key="TextBox.Background.Hot.Color">#FFFFFFFF</Color>
  <Color x:Key="TextBox.Background.Focused.Color">#FFFFFFFF</Color>
  <Color x:Key="TextBox.Background.ReadOnly.Color">#FFF0F0F0</Color>
  <Color x:Key="TextBox.Background.Disabled.Color">#FFF0F0F0</Color>

  <SolidColorBrush x:Key="TextBox.Border.Normal" Color="#FF7A7A7A" po:Freeze="True"/>
  <Color x:Key="TextBox.Border.Hot.Color">#FF171717</Color>
  <Color x:Key="TextBox.Border.Focused.Color">#FF0078D7</Color>
  <Color x:Key="TextBox.Border.ReadOnly.Color">#FF7A7A7A</Color>
  <Color x:Key="TextBox.Border.Disabled.Color">#FFCCCCCC</Color>

  <Style TargetType="{x:Type aero10:TextBoxChrome}">
    <Setter Property="Background" Value="Transparent"/>
    <Setter Property="BorderBrush" Value="Transparent"/>
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type aero10:TextBoxChrome}">
          <Border x:Name="Border"
                  Background="{TemplateBinding Background}"
                  BorderBrush="{TemplateBinding BorderBrush}"
                  BorderThickness="{TemplateBinding BorderThickness}"
                  SnapsToDevicePixels="True"
                  VisualStateManager.CustomVisualStateManager="{x:Static aero:SystemVisualStateManager.Instance}">
            <VisualStateManager.VisualStateGroups>
              <VisualStateGroup x:Name="BackgroundStates">
                <VisualStateGroup.Transitions>
                  <VisualTransition From="BackgroundNormal" To="BackgroundNormal" GeneratedDuration="0:00:00"/>
                  <VisualTransition From="BackgroundNormal" To="BackgroundHot" GeneratedDuration="0:00:00.225"/>
                  <VisualTransition From="BackgroundNormal" To="BackgroundDisabled" GeneratedDuration="0:00:00.15"/>
                  <VisualTransition From="BackgroundNormal" To="BackgroundFocused" GeneratedDuration="0:00:00.15"/>
                  <VisualTransition From="BackgroundNormal" To="BackgroundReadOnly" GeneratedDuration="0:00:00"/>
                  <VisualTransition From="BackgroundHot" To="BackgroundNormal" GeneratedDuration="0:00:00.635"/>
                  <VisualTransition From="BackgroundHot" To="BackgroundHot" GeneratedDuration="0:00:00"/>
                  <VisualTransition From="BackgroundHot" To="BackgroundDisabled" GeneratedDuration="0:00:00.15"/>
                  <VisualTransition From="BackgroundHot" To="BackgroundFocused" GeneratedDuration="0:00:00.15"/>
                  <VisualTransition From="BackgroundHot" To="BackgroundReadOnly" GeneratedDuration="0:00:00"/>
                  <VisualTransition From="BackgroundDisabled" To="BackgroundNormal" GeneratedDuration="0:00:00.225"/>
                  <VisualTransition From="BackgroundDisabled" To="BackgroundHot" GeneratedDuration="0:00:00.225"/>
                  <VisualTransition From="BackgroundDisabled" To="BackgroundDisabled" GeneratedDuration="0:00:00"/>
                  <VisualTransition From="BackgroundDisabled" To="BackgroundFocused" GeneratedDuration="0:00:00"/>
                  <VisualTransition From="BackgroundDisabled" To="BackgroundReadOnly" GeneratedDuration="0:00:00"/>
                  <VisualTransition From="BackgroundFocused" To="BackgroundNormal" GeneratedDuration="0:00:00.375"/>
                  <VisualTransition From="BackgroundFocused" To="BackgroundHot" GeneratedDuration="0:00:00"/>
                  <VisualTransition From="BackgroundFocused" To="BackgroundDisabled" GeneratedDuration="0:00:00"/>
                  <VisualTransition From="BackgroundFocused" To="BackgroundFocused" GeneratedDuration="0:00:00"/>
                  <VisualTransition From="BackgroundFocused" To="BackgroundReadOnly" GeneratedDuration="0:00:00"/>
                  <VisualTransition From="BackgroundReadOnly" To="BackgroundNormal" GeneratedDuration="0:00:00"/>
                  <VisualTransition From="BackgroundReadOnly" To="BackgroundHot" GeneratedDuration="0:00:00"/>
                  <VisualTransition From="BackgroundReadOnly" To="BackgroundDisabled" GeneratedDuration="0:00:00"/>
                  <VisualTransition From="BackgroundReadOnly" To="BackgroundFocused" GeneratedDuration="0:00:00"/>
                  <VisualTransition From="BackgroundReadOnly" To="BackgroundReadOnly" GeneratedDuration="0:00:00"/>
                </VisualStateGroup.Transitions>
                <VisualState x:Name="BackgroundNormal"/>
                <VisualState x:Name="BackgroundHot"/>
                <VisualState x:Name="BackgroundFocused"/>
                <VisualState x:Name="BackgroundDisabled">
                  <Storyboard>
                    <ColorAnimationUsingKeyFrames Storyboard.TargetName="InnerBorder"
                                                  Storyboard.TargetProperty="Background.(SolidColorBrush.Color)">
                      <DiscreteColorKeyFrame KeyTime="0" Value="{StaticResource TextBox.Background.Disabled.Color}"/>
                    </ColorAnimationUsingKeyFrames>
                  </Storyboard>
                </VisualState>
                <VisualState x:Name="BackgroundReadOnly">
                  <Storyboard>
                    <ColorAnimationUsingKeyFrames Storyboard.TargetName="InnerBorder"
                                                  Storyboard.TargetProperty="Background.(SolidColorBrush.Color)">
                      <DiscreteColorKeyFrame KeyTime="0" Value="{StaticResource TextBox.Background.ReadOnly.Color}"/>
                    </ColorAnimationUsingKeyFrames>
                  </Storyboard>
                </VisualState>
              </VisualStateGroup>
              <VisualStateGroup x:Name="BorderStates">
                <VisualStateGroup.Transitions>
                  <VisualTransition From="BorderNormal" To="BorderNormal" GeneratedDuration="0:00:00"/>
                  <VisualTransition From="BorderNormal" To="BorderHot" GeneratedDuration="0:00:00.225"/>
                  <VisualTransition From="BorderNormal" To="BorderFocused" GeneratedDuration="0:00:00.15"/>
                  <VisualTransition From="BorderNormal" To="BorderDisabled" GeneratedDuration="0:00:00.15"/>
                  <VisualTransition From="BorderHot" To="BorderNormal" GeneratedDuration="0:00:00.635"/>
                  <VisualTransition From="BorderHot" To="BorderHot" GeneratedDuration="0:00:00"/>
                  <VisualTransition From="BorderHot" To="BorderFocused" GeneratedDuration="0:00:00.15"/>
                  <VisualTransition From="BorderHot" To="BorderDisabled" GeneratedDuration="0:00:00.15"/>
                  <VisualTransition From="BorderFocused" To="BorderNormal" GeneratedDuration="0:00:00.225"/>
                  <VisualTransition From="BorderFocused" To="BorderHot" GeneratedDuration="0:00:00.225"/>
                  <VisualTransition From="BorderFocused" To="BorderFocused" GeneratedDuration="0:00:00"/>
                  <VisualTransition From="BorderFocused" To="BorderDisabled" GeneratedDuration="0:00:00"/>
                  <VisualTransition From="BorderDisabled" To="BorderNormal" GeneratedDuration="0:00:00.375"/>
                  <VisualTransition From="BorderDisabled" To="BorderHot" GeneratedDuration="0:00:00"/>
                  <VisualTransition From="BorderDisabled" To="BorderFocused" GeneratedDuration="0:00:00"/>
                  <VisualTransition From="BorderDisabled" To="BorderDisabled" GeneratedDuration="0:00:00"/>
                </VisualStateGroup.Transitions>
                <VisualState x:Name="BorderNormal"/>
                <VisualState x:Name="BorderHot">
                  <Storyboard>
                    <ColorAnimationUsingKeyFrames Storyboard.TargetName="Border"
                                                  Storyboard.TargetProperty="BorderBrush.(SolidColorBrush.Color)">
                      <DiscreteColorKeyFrame KeyTime="0" Value="{StaticResource TextBox.Border.Hot.Color}"/>
                    </ColorAnimationUsingKeyFrames>
                  </Storyboard>
                </VisualState>
                <VisualState x:Name="BorderFocused">
                  <Storyboard>
                    <ColorAnimationUsingKeyFrames Storyboard.TargetName="Border"
                                                  Storyboard.TargetProperty="BorderBrush.(SolidColorBrush.Color)">
                      <DiscreteColorKeyFrame KeyTime="0" Value="{StaticResource TextBox.Border.Focused.Color}"/>
                    </ColorAnimationUsingKeyFrames>
                  </Storyboard>
                </VisualState>
                <VisualState x:Name="BorderDisabled">
                  <Storyboard>
                    <ColorAnimationUsingKeyFrames Storyboard.TargetName="Border"
                                                  Storyboard.TargetProperty="BorderBrush.(SolidColorBrush.Color)">
                      <DiscreteColorKeyFrame KeyTime="0" Value="{StaticResource TextBox.Border.Disabled.Color}"/>
                    </ColorAnimationUsingKeyFrames>
                  </Storyboard>
                </VisualState>
              </VisualStateGroup>
            </VisualStateManager.VisualStateGroups>
            <Border x:Name="InnerBorder" Margin="1" Background="{TemplateBinding Background}">
              <ContentPresenter/>
            </Border>
          </Border>
          <ControlTemplate.Triggers>
            <Trigger Property="BorderThickness" Value="0">
              <Setter TargetName="InnerBorder" Property="Margin" Value="0"/>
            </Trigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>

  <Style x:Key="{x:Type TextBoxBase}" TargetType="{x:Type TextBoxBase}">
    <Setter Property="Background" Value="{StaticResource TextBox.Background.Normal}"/>
    <Setter Property="BorderBrush" Value="{StaticResource TextBox.Border.Normal}"/>
    <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.WindowTextBrushKey}}"/>
    <Setter Property="BorderThickness" Value="1"/>
    <Setter Property="Padding" Value="1,2"/>
    <Setter Property="KeyboardNavigation.TabNavigation" Value="None"/>
    <Setter Property="HorizontalContentAlignment" Value="Left"/>
    <Setter Property="FocusVisualStyle" Value="{x:Null}"/>
    <Setter Property="AllowDrop" Value="True"/>
    <Setter Property="ScrollViewer.PanningMode" Value="VerticalFirst"/>
    <Setter Property="Stylus.IsFlicksEnabled" Value="False"/>
    <Setter Property="IsReadOnlyCaretVisible" Value="True"/>
    <Setter Property="SelectionBrush" Value="{DynamicResource {x:Static SystemColors.HighlightBrushKey}}"/>
    <Setter Property="SelectionOpacity" Value="0.5"/>
    <Setter Property="aero:TextBoxService.ViewMargin" Value="0"/>
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type TextBoxBase}">
          <aero10:TextBoxChrome Style="{StaticResource {x:Type aero10:TextBoxChrome}}"
                                Background="{TemplateBinding Background}"
                                BorderBrush="{TemplateBinding BorderBrush}"
                                BorderThickness="{TemplateBinding BorderThickness}"
                                Foreground="{TemplateBinding Foreground}"
                                RenderEnabled="{TemplateBinding IsEnabled}"
                                RenderReadOnly="{TemplateBinding IsReadOnly}"
                                RenderFocused="{TemplateBinding IsKeyboardFocused}"
                                RenderHot="{TemplateBinding IsMouseOver}">
            <ScrollViewer x:Name="PART_ContentHost"
                          Focusable="False"
                          HorizontalScrollBarVisibility="Hidden"
                          VerticalScrollBarVisibility="Hidden"/>
          </aero10:TextBoxChrome>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
    <Style.Triggers>
      <Trigger Property="IsEnabled" Value="False">
        <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}"/>
      </Trigger>
      <MultiTrigger>
        <MultiTrigger.Conditions>
          <Condition Property="IsInactiveSelectionHighlightEnabled" Value="True"/>
          <Condition Property="IsSelectionActive" Value="False"/>
        </MultiTrigger.Conditions>
        <Setter Property="SelectionBrush" Value="{DynamicResource {x:Static SystemColors.InactiveSelectionHighlightBrushKey}}"/>
      </MultiTrigger>
    </Style.Triggers>
  </Style>

  <Style x:Key="{x:Type PasswordBox}" TargetType="{x:Type PasswordBox}">
    <Setter Property="PasswordChar" Value="●"/>
    <Setter Property="Background" Value="{StaticResource TextBox.Background.Normal}"/>
    <Setter Property="BorderBrush" Value="{StaticResource TextBox.Border.Normal}"/>
    <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.WindowTextBrushKey}}"/>
    <Setter Property="BorderThickness" Value="1"/>
    <Setter Property="Padding" Value="-1,2"/>
    <Setter Property="KeyboardNavigation.TabNavigation" Value="None"/>
    <Setter Property="HorizontalContentAlignment" Value="Left"/>
    <Setter Property="FocusVisualStyle" Value="{x:Null}"/>
    <Setter Property="AllowDrop" Value="True"/>
    <Setter Property="ScrollViewer.PanningMode" Value="VerticalFirst"/>
    <Setter Property="Stylus.IsFlicksEnabled" Value="False"/>
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type PasswordBox}">
          <aero10:TextBoxChrome Style="{StaticResource {x:Type aero10:TextBoxChrome}}"
                                Focusable="False"
                                Background="{TemplateBinding Background}"
                                BorderBrush="{TemplateBinding BorderBrush}"
                                BorderThickness="{TemplateBinding BorderThickness}"
                                Foreground="{TemplateBinding Foreground}"
                                RenderEnabled="{TemplateBinding IsEnabled}"
                                RenderFocused="{TemplateBinding IsKeyboardFocused}"
                                RenderHot="{TemplateBinding IsMouseOver}">
            <ScrollViewer x:Name="PART_ContentHost"
                          Focusable="False"
                          HorizontalScrollBarVisibility="Hidden"
                          VerticalScrollBarVisibility="Hidden"/>
          </aero10:TextBoxChrome>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
    <Style.Triggers>
      <Trigger Property="IsEnabled" Value="False">
        <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}"/>
      </Trigger>
      <MultiTrigger>
        <MultiTrigger.Conditions>
          <Condition Property="IsInactiveSelectionHighlightEnabled" Value="True"/>
          <Condition Property="IsSelectionActive" Value="False"/>
        </MultiTrigger.Conditions>
        <Setter Property="SelectionBrush" Value="{DynamicResource {x:Static SystemColors.InactiveSelectionHighlightBrushKey}}"/>
      </MultiTrigger>
    </Style.Triggers>
  </Style>

  <Style x:Key="{x:Type TextBox}" TargetType="{x:Type TextBox}"
         BasedOn="{StaticResource {x:Type TextBoxBase}}"/>

  <Style x:Key="{x:Type RichTextBox}" TargetType="{x:Type RichTextBox}"
           BasedOn="{StaticResource {x:Type TextBoxBase}}">
    <Style.Resources>
      <Style x:Key="{x:Type FlowDocument}" TargetType="{x:Type FlowDocument}">
        <Setter Property="OverridesDefaultStyle" Value="True"/>
      </Style>
      <Style x:Key="{x:Type Hyperlink}" TargetType="{x:Type Hyperlink}"
             BasedOn="{StaticResource {x:Type Hyperlink}}">
        <Style.Triggers>
          <Trigger Property="IsMouseOver" Value="True">
            <Setter Property="Foreground" Value="Blue"/>
          </Trigger>
          <Trigger Property="IsEnabled" Value="False">
            <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}"/>
          </Trigger>
        </Style.Triggers>
      </Style>
    </Style.Resources>
    <Setter Property="MinWidth" Value="10"/>
  </Style>


  <!-- Button ============================================================== -->

  <Style x:Key="Button.FocusVisual">
    <Setter Property="Control.Template">
      <Setter.Value>
        <ControlTemplate>
          <Border Margin="{Binding AdornedElement.BorderThickness, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type Adorner}}}">
            <Rectangle Margin="1"
                       SnapsToDevicePixels="True"
                       Stroke="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}"
                       StrokeThickness="1"
                       StrokeDashArray="1 1"
                       StrokeDashOffset="1.5"/>
          </Border>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>

  <SolidColorBrush x:Key="Button.Background.Normal" Color="#FFE1E1E1" po:Freeze="True"/>
  <Color x:Key="Button.Background.Hot.Color">#FFE5F1FB</Color>
  <Color x:Key="Button.Background.Pressed.Color">#FFCCE4F7</Color>
  <Color x:Key="Button.Background.Disabled.Color">#FFCCCCCC</Color>

  <SolidColorBrush x:Key="Button.Border.Normal" Color="#FFADADAD" po:Freeze="True"/>
  <Color x:Key="Button.Border.Hot.Color">#FF0078D7</Color>
  <Color x:Key="Button.Border.Pressed.Color">#FF005499</Color>
  <Color x:Key="Button.Border.Disabled.Color">#FFBFBFBF</Color>
  <SolidColorBrush x:Key="Button.Foreground.Disabled" Color="#FF838383" po:Freeze="True"/>

  <Style TargetType="{x:Type aero10:ButtonChrome}">
    <Setter Property="Background" Value="Transparent"/>
    <Setter Property="BorderBrush" Value="Transparent"/>
    <Setter Property="HorizontalContentAlignment" Value="Center"/>
    <Setter Property="VerticalContentAlignment" Value="Center"/>
    <Setter Property="Margin" Value="1"/>
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type aero10:ButtonChrome}">
          <Border x:Name="Border"
                  Background="{TemplateBinding Background}"
                  BorderThickness="{TemplateBinding BorderThickness}"
                  BorderBrush="{TemplateBinding BorderBrush}"
                  SnapsToDevicePixels="True"
                  VisualStateManager.CustomVisualStateManager="{x:Static aero:SystemVisualStateManager.Instance}">
            <VisualStateManager.VisualStateGroups>
              <VisualStateGroup x:Name="Common">
                <VisualStateGroup.Transitions>
                  <VisualTransition From="Normal" To="Hot" GeneratedDuration="0:00:00.225"/>
                  <VisualTransition From="Normal" To="Pressed" GeneratedDuration="0:00:00.15"/>
                  <VisualTransition From="Normal" To="Disabled" GeneratedDuration="0:00:00.15"/>
                  <!-- aero.msstyles defines durations for transitions between
                       normal and defaulted but buttons in standard system
                       dialogs do not use it -->
                  <!--<VisualTransition From="Normal" To="Defaulted" GeneratedDuration="0:00:00.225"/>-->
                  <VisualTransition From="Hot" To="Normal" GeneratedDuration="0:00:00.225"/>
                  <VisualTransition From="Hot" To="Pressed" GeneratedDuration="0:00:00.15"/>
                  <VisualTransition From="Hot" To="Disabled" GeneratedDuration="0:00:00.15"/>
                  <VisualTransition From="Hot" To="Defaulted" GeneratedDuration="0:00:00.225"/>
                  <VisualTransition From="Pressed" To="Normal" GeneratedDuration="0:00:00.225"/>
                  <VisualTransition From="Pressed" To="Hot" GeneratedDuration="0:00:00.225"/>
                  <VisualTransition From="Pressed" To="Disabled" GeneratedDuration="0:00:00"/>
                  <VisualTransition From="Pressed" To="Defaulted" GeneratedDuration="0:00:00.225"/>
                  <VisualTransition From="Disabled" To="Normal" GeneratedDuration="0:00:00.375"/>
                  <VisualTransition From="Disabled" To="Hot" GeneratedDuration="0:00:00"/>
                  <VisualTransition From="Disabled" To="Pressed" GeneratedDuration="0:00:00"/>
                  <VisualTransition From="Disabled" To="Defaulted" GeneratedDuration="0:00:00.375"/>
                  <!--<VisualTransition From="Defaulted" To="Normal" GeneratedDuration="0:00:00.225"/>-->
                  <VisualTransition From="Defaulted" To="Hot" GeneratedDuration="0:00:00.225"/>
                  <VisualTransition From="Defaulted" To="Pressed" GeneratedDuration="0:00:00.15"/>
                  <VisualTransition From="Defaulted" To="Disabled" GeneratedDuration="0:00:00.15"/>
                </VisualStateGroup.Transitions>
                <VisualState x:Name="Normal"/>
                <VisualState x:Name="Hot">
                  <Storyboard>
                    <ColorAnimationUsingKeyFrames Storyboard.TargetName="Border"
                                                  Storyboard.TargetProperty="BorderBrush.(SolidColorBrush.Color)">
                      <DiscreteColorKeyFrame KeyTime="0" Value="{StaticResource Button.Border.Hot.Color}"/>
                    </ColorAnimationUsingKeyFrames>
                    <ColorAnimationUsingKeyFrames Storyboard.TargetName="Border"
                                                  Storyboard.TargetProperty="Background.(SolidColorBrush.Color)">
                      <DiscreteColorKeyFrame KeyTime="0" Value="{StaticResource Button.Background.Hot.Color}"/>
                    </ColorAnimationUsingKeyFrames>
                  </Storyboard>
                </VisualState>
                <VisualState x:Name="Pressed">
                  <Storyboard>
                    <ColorAnimationUsingKeyFrames Storyboard.TargetName="Border"
                                                  Storyboard.TargetProperty="BorderBrush.(SolidColorBrush.Color)">
                      <DiscreteColorKeyFrame KeyTime="0" Value="{StaticResource Button.Border.Pressed.Color}"/>
                    </ColorAnimationUsingKeyFrames>
                    <ColorAnimationUsingKeyFrames Storyboard.TargetName="Border"
                                                  Storyboard.TargetProperty="Background.(SolidColorBrush.Color)">
                      <DiscreteColorKeyFrame KeyTime="0" Value="{StaticResource Button.Background.Pressed.Color}"/>
                    </ColorAnimationUsingKeyFrames>
                  </Storyboard>
                </VisualState>
                <VisualState x:Name="Defaulted">
                  <Storyboard>
                    <ColorAnimationUsingKeyFrames Storyboard.TargetName="Border"
                                                  Storyboard.TargetProperty="BorderBrush.(SolidColorBrush.Color)">
                      <DiscreteColorKeyFrame KeyTime="0" Value="{StaticResource Button.Border.Hot.Color}"/>
                    </ColorAnimationUsingKeyFrames>
                    <ColorAnimationUsingKeyFrames Storyboard.TargetName="DefaultedBorder"
                                                  Storyboard.TargetProperty="BorderBrush.(SolidColorBrush.Color)">
                      <DiscreteColorKeyFrame KeyTime="0" Value="{StaticResource Button.Border.Hot.Color}"/>
                    </ColorAnimationUsingKeyFrames>
                  </Storyboard>
                </VisualState>
                <VisualState x:Name="Disabled">
                  <Storyboard>
                    <ColorAnimationUsingKeyFrames Storyboard.TargetName="Border"
                                                  Storyboard.TargetProperty="BorderBrush.(SolidColorBrush.Color)">
                      <DiscreteColorKeyFrame KeyTime="0" Value="{StaticResource Button.Border.Disabled.Color}"/>
                    </ColorAnimationUsingKeyFrames>
                    <ColorAnimationUsingKeyFrames Storyboard.TargetName="Border"
                                                  Storyboard.TargetProperty="Background.(SolidColorBrush.Color)">
                      <DiscreteColorKeyFrame KeyTime="0" Value="{StaticResource Button.Background.Disabled.Color}"/>
                    </ColorAnimationUsingKeyFrames>
                  </Storyboard>
                </VisualState>
              </VisualStateGroup>
            </VisualStateManager.VisualStateGroups>
            <Border x:Name="DefaultedBorder"
                    BorderThickness="1"
                    BorderBrush="Transparent"
                    SnapsToDevicePixels="True">
              <ContentPresenter x:Name="Content"
                                RecognizesAccessKey="True"
                                Margin="{TemplateBinding Padding}"
                                SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
                                HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                                Focusable="False"/>
            </Border>
          </Border>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>

  <Style x:Key="BaseButtonStyle" TargetType="{x:Type ButtonBase}">
    <Setter Property="FocusVisualStyle" Value="{StaticResource Button.FocusVisual}"/>
    <Setter Property="Background" Value="{StaticResource Button.Background.Normal}"/>
    <Setter Property="BorderBrush" Value="{StaticResource Button.Border.Normal}"/>
    <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}"/>
    <Setter Property="BorderThickness" Value="1"/>
    <Setter Property="HorizontalContentAlignment" Value="Center"/>
    <Setter Property="VerticalContentAlignment" Value="Center"/>
    <Setter Property="Padding" Value="1"/>
    <Setter Property="MinWidth" Value="10"/>
    <Setter Property="MinHeight" Value="5"/>
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type ButtonBase}">
          <aero10:ButtonChrome Style="{StaticResource {x:Type aero10:ButtonChrome}}"
                               Focusable="False"
                               Background="{TemplateBinding Background}"
                               BorderBrush="{TemplateBinding BorderBrush}"
                               BorderThickness="{TemplateBinding BorderThickness}"
                               Foreground="{TemplateBinding Foreground}"
                               Padding="{TemplateBinding Padding}"
                               RenderEnabled="{TemplateBinding IsEnabled}"
                               RenderPressed="{TemplateBinding IsPressed}"
                               RenderFocused="{TemplateBinding IsKeyboardFocused}"
                               RenderHot="{Binding IsMouseOver, RelativeSource={RelativeSource TemplatedParent}}">
            <ContentPresenter/>
          </aero10:ButtonChrome>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
    <Style.Triggers>
      <Trigger Property="IsEnabled" Value="False">
        <Setter Property="TextElement.Foreground" Value="{StaticResource Button.Foreground.Disabled}"/>
      </Trigger>
    </Style.Triggers>
  </Style>

  <Style x:Key="ButtonStyle" TargetType="{x:Type Button}">
    <Setter Property="FocusVisualStyle" Value="{StaticResource Button.FocusVisual}"/>
    <Setter Property="Background" Value="{StaticResource Button.Background.Normal}"/>
    <Setter Property="BorderBrush" Value="{StaticResource Button.Border.Normal}"/>
    <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}"/>
    <Setter Property="BorderThickness" Value="1"/>
    <Setter Property="HorizontalContentAlignment" Value="Center"/>
    <Setter Property="VerticalContentAlignment" Value="Center"/>
    <Setter Property="Padding" Value="1"/>
    <Setter Property="MinWidth" Value="10"/>
    <Setter Property="MinHeight" Value="5"/>
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type Button}">
          <aero10:ButtonChrome Style="{StaticResource {x:Type aero10:ButtonChrome}}"
                               Focusable="False"
                               Background="{TemplateBinding Background}"
                               BorderBrush="{TemplateBinding BorderBrush}"
                               BorderThickness="{TemplateBinding BorderThickness}"
                               Foreground="{TemplateBinding Foreground}"
                               Padding="{TemplateBinding Padding}"
                               RenderEnabled="{TemplateBinding IsEnabled}"
                               RenderPressed="{TemplateBinding IsPressed}"
                               RenderFocused="{TemplateBinding IsKeyboardFocused}"
                               RenderDefaulted="{TemplateBinding IsDefaulted}"
                               RenderHot="{Binding IsMouseOver, RelativeSource={RelativeSource TemplatedParent}}">
            <ContentPresenter/>
          </aero10:ButtonChrome>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
    <Style.Triggers>
      <Trigger Property="IsEnabled" Value="False">
        <Setter Property="TextElement.Foreground" Value="{StaticResource Button.Foreground.Disabled}"/>
      </Trigger>
    </Style.Triggers>
  </Style>

  <Style x:Key="{x:Type ToggleButton}" TargetType="{x:Type ToggleButton}"
         BasedOn="{StaticResource BaseButtonStyle}"/>

  <Style x:Key="{x:Type RepeatButton}" TargetType="{x:Type RepeatButton}"
         BasedOn="{StaticResource BaseButtonStyle}">
    <Setter Property="Stylus.IsPressAndHoldEnabled" Value="False"/>
  </Style>

  <Style x:Key="{x:Type Button}" TargetType="{x:Type Button}"
         BasedOn="{StaticResource ButtonStyle}"/>


  <!-- CheckBox ============================================================ -->

  <SolidColorBrush x:Key="CheckBox.Border.Normal" Color="#FF333333" po:Freeze="True"/>
  <Color x:Key="CheckBox.Border.Hot.Color">#FF0078D7</Color>
  <Color x:Key="CheckBox.Border.Pressed.Color">#FF005499</Color>
  <Color x:Key="CheckBox.Border.Disabled.Color">#FFCCCCCC</Color>
  <SolidColorBrush x:Key="CheckBox.Background.Normal" Color="#FFFFFFFF" po:Freeze="True"/>
  <Color x:Key="CheckBox.Background.Hot.Color">#FFFFFFFF</Color>
  <Color x:Key="CheckBox.Background.Pressed.Color">#FFCCE4F7</Color>
  <Color x:Key="CheckBox.Background.Disabled.Color">#FFFFFFFF</Color>

  <Style x:Key="OptionMarkEmptyFocusVisual">
    <Setter Property="Control.Template">
      <Setter.Value>
        <ControlTemplate>
          <Rectangle Width="15" Height="15" Margin="-2,-3,-2,-1"
                     SnapsToDevicePixels="True"
                     Stroke="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}"
                     StrokeThickness="1"
                     StrokeDashArray="1 1"
                     StrokeDashOffset="1.5"/>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>

  <Style x:Key="OptionMarkFocusVisual">
    <Setter Property="Control.Template">
      <Setter.Value>
        <ControlTemplate>
          <Border Margin="{Binding AdornedElement.Padding, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type Adorner}}}">
            <Rectangle Margin="15,1,1,2"
                       SnapsToDevicePixels="True"
                       Stroke="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}"
                       StrokeThickness="1"
                       StrokeDashArray="1 1"
                       StrokeDashOffset="1.5"/>
          </Border>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>

  <Style TargetType="{x:Type CheckBox}">
    <Setter Property="FocusVisualStyle" Value="{StaticResource OptionMarkEmptyFocusVisual}"/>
    <Setter Property="Background" Value="{StaticResource CheckBox.Background.Normal}"/>
    <Setter Property="BorderBrush" Value="{StaticResource CheckBox.Border.Normal}"/>
    <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}"/>
    <Setter Property="BorderThickness" Value="1"/>
    <Setter Property="HorizontalAlignment" Value="Left"/>
    <Setter Property="HorizontalContentAlignment" Value="Left"/>
    <Setter Property="VerticalContentAlignment" Value="Center"/>
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type CheckBox}">
          <Grid SnapsToDevicePixels="True" Background="Transparent"
                VisualStateManager.CustomVisualStateManager="{x:Static aero:SystemVisualStateManager.Instance}">
            <VisualStateManager.VisualStateGroups>
              <VisualStateGroup x:Name="Common">
                <VisualStateGroup.Transitions>
                  <VisualTransition From="Normal" To="MouseOver" GeneratedDuration="0:0:0.225"/>
                  <VisualTransition From="Normal" To="Pressed" GeneratedDuration="0:0:0.100"/>
                  <VisualTransition From="Normal" To="Disabled" GeneratedDuration="0:0:0.100"/>
                  <VisualTransition From="MouseOver" To="Normal" GeneratedDuration="0:0:0.225"/>
                  <VisualTransition From="MouseOver" To="Pressed" GeneratedDuration="0:0:0.100"/>
                  <VisualTransition From="MouseOver" To="Disabled" GeneratedDuration="0:0:0.100"/>
                  <VisualTransition From="Pressed" To="Normal" GeneratedDuration="0:0:0.100"/>
                  <VisualTransition From="Pressed" To="MouseOver" GeneratedDuration="0:0:0.100"/>
                  <VisualTransition From="Pressed" To="Disabled" GeneratedDuration="0:0:0.100"/>
                  <VisualTransition From="Disabled" To="Normal" GeneratedDuration="0:0:0.100"/>
                  <VisualTransition From="Disabled" To="MouseOver" GeneratedDuration="0:0:0.255"/>
                  <VisualTransition From="Disabled" To="Pressed" GeneratedDuration="0:0:0.100"/>
                </VisualStateGroup.Transitions>
                <VisualState x:Name="Normal"/>
                <VisualState x:Name="MouseOver">
                  <Storyboard>
                    <ColorAnimationUsingKeyFrames Storyboard.TargetName="Border"
                                                  Storyboard.TargetProperty="BorderBrush.(SolidColorBrush.Color)">
                      <DiscreteColorKeyFrame KeyTime="0" Value="{StaticResource CheckBox.Border.Hot.Color}"/>
                    </ColorAnimationUsingKeyFrames>
                    <ColorAnimationUsingKeyFrames Storyboard.TargetName="Border"
                                                  Storyboard.TargetProperty="Background.(SolidColorBrush.Color)">
                      <DiscreteColorKeyFrame KeyTime="0" Value="{StaticResource CheckBox.Background.Hot.Color}"/>
                    </ColorAnimationUsingKeyFrames>
                  </Storyboard>
                </VisualState>
                <VisualState x:Name="Pressed">
                  <Storyboard>
                    <ColorAnimationUsingKeyFrames Storyboard.TargetName="Border"
                                                  Storyboard.TargetProperty="BorderBrush.(SolidColorBrush.Color)">
                      <DiscreteColorKeyFrame KeyTime="0" Value="{StaticResource CheckBox.Border.Pressed.Color}"/>
                    </ColorAnimationUsingKeyFrames>
                    <ColorAnimationUsingKeyFrames Storyboard.TargetName="Border"
                                                  Storyboard.TargetProperty="Background.(SolidColorBrush.Color)">
                      <DiscreteColorKeyFrame KeyTime="0" Value="{StaticResource CheckBox.Background.Pressed.Color}"/>
                    </ColorAnimationUsingKeyFrames>
                  </Storyboard>
                </VisualState>
                <VisualState x:Name="Disabled">
                  <Storyboard>
                    <ColorAnimationUsingKeyFrames Storyboard.TargetName="Border"
                                                  Storyboard.TargetProperty="BorderBrush.(SolidColorBrush.Color)">
                      <DiscreteColorKeyFrame KeyTime="0" Value="{StaticResource CheckBox.Border.Disabled.Color}"/>
                    </ColorAnimationUsingKeyFrames>
                    <ColorAnimationUsingKeyFrames Storyboard.TargetName="Border"
                                                  Storyboard.TargetProperty="Background.(SolidColorBrush.Color)">
                      <DiscreteColorKeyFrame KeyTime="0" Value="{StaticResource CheckBox.Background.Disabled.Color}"/>
                    </ColorAnimationUsingKeyFrames>
                  </Storyboard>
                </VisualState>
              </VisualStateGroup>
            </VisualStateManager.VisualStateGroups>
            <Grid.ColumnDefinitions>
              <ColumnDefinition Width="Auto"/>
              <ColumnDefinition Width="*"/>
            </Grid.ColumnDefinitions>
            <Border x:Name="Border"
                    VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                    BorderThickness="{TemplateBinding BorderThickness}"
                    Background="{TemplateBinding Background}"
                    BorderBrush="{TemplateBinding BorderBrush}">
              <Grid Width="11" Height="11">
                <Path x:Name="OptionMark" Stretch="None" Opacity="0"
                      Data="F1 M 1.3875,4.6875 3.8875,7.1875 9.6375,1.4375 10.5125,2.3125 3.7625,9.0625 0.3875,5.6875 z"
                      Fill="{Binding BorderBrush, ElementName=Border}"/>
                <Path x:Name="IndeterminateMark" Stretch="None" Margin="2" Opacity="0"
                      Data="F1 M 0,0 7,0 7,7 0,7 z"
                      Fill="{Binding BorderBrush, ElementName=Border}"/>
              </Grid>
            </Border>
            <ContentPresenter x:Name="Content"
                              RecognizesAccessKey="True"
                              Grid.Column="1"
                              Margin="0"
                              SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
                              HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                              VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                              Focusable="False"/>
          </Grid>
          <ControlTemplate.Triggers>
            <Trigger Property="HasContent" Value="True">
              <Setter Property="FocusVisualStyle" Value="{StaticResource OptionMarkFocusVisual}"/>
              <Setter TargetName="Content" Property="Margin" Value="3,2,2,3"/>
            </Trigger>
            <Trigger Property="TextOptions.TextFormattingMode" Value="Display">
              <Setter TargetName="Border" Property="Margin" Value="0,-1,0,0"/>
            </Trigger>
            <Trigger Property="IsChecked" Value="True">
              <Setter Property="Opacity" Value="1" TargetName="OptionMark"/>
              <Setter Property="Opacity" Value="0" TargetName="IndeterminateMark"/>
            </Trigger>
            <Trigger Property="IsChecked" Value="{x:Null}">
              <Setter Property="Opacity" Value="0" TargetName="OptionMark"/>
              <Setter Property="Opacity" Value="1" TargetName="IndeterminateMark"/>
            </Trigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
    <Style.Triggers>
      <Trigger Property="IsEnabled" Value="False">
        <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}"/>
      </Trigger>
    </Style.Triggers>
  </Style>


  <!-- RadioButton ========================================================= -->

  <Style TargetType="{x:Type RadioButton}">
    <Setter Property="FocusVisualStyle" Value="{StaticResource OptionMarkEmptyFocusVisual}"/>
    <Setter Property="Background" Value="{StaticResource CheckBox.Background.Normal}"/>
    <Setter Property="BorderBrush" Value="{StaticResource CheckBox.Border.Normal}"/>
    <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}"/>
    <Setter Property="BorderThickness" Value="1"/>
    <Setter Property="HorizontalAlignment" Value="Left"/>
    <Setter Property="HorizontalContentAlignment" Value="Left"/>
    <Setter Property="VerticalContentAlignment" Value="Center"/>
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type RadioButton}">
          <Grid SnapsToDevicePixels="True" Background="Transparent"
                VisualStateManager.CustomVisualStateManager="{x:Static aero:SystemVisualStateManager.Instance}">
            <VisualStateManager.VisualStateGroups>
              <VisualStateGroup x:Name="Common">
                <VisualStateGroup.Transitions>
                  <VisualTransition From="Normal" To="MouseOver" GeneratedDuration="0:0:0.225"/>
                  <VisualTransition From="Normal" To="Pressed" GeneratedDuration="0:0:0.100"/>
                  <VisualTransition From="Normal" To="Disabled" GeneratedDuration="0:0:0.100"/>
                  <VisualTransition From="MouseOver" To="Normal" GeneratedDuration="0:0:0.225"/>
                  <VisualTransition From="MouseOver" To="Pressed" GeneratedDuration="0:0:0.100"/>
                  <VisualTransition From="MouseOver" To="Disabled" GeneratedDuration="0:0:0.100"/>
                  <VisualTransition From="Pressed" To="Normal" GeneratedDuration="0:0:0.100"/>
                  <VisualTransition From="Pressed" To="MouseOver" GeneratedDuration="0:0:0.100"/>
                  <VisualTransition From="Pressed" To="Disabled" GeneratedDuration="0:0:0.100"/>
                  <VisualTransition From="Disabled" To="Normal" GeneratedDuration="0:0:0.100"/>
                  <VisualTransition From="Disabled" To="MouseOver" GeneratedDuration="0:0:0.255"/>
                  <VisualTransition From="Disabled" To="Pressed" GeneratedDuration="0:0:0.100"/>
                </VisualStateGroup.Transitions>
                <VisualState x:Name="Normal"/>
                <VisualState x:Name="MouseOver">
                  <Storyboard>
                    <ColorAnimationUsingKeyFrames Storyboard.TargetName="Border"
                                                  Storyboard.TargetProperty="BorderBrush.(SolidColorBrush.Color)">
                      <DiscreteColorKeyFrame KeyTime="0" Value="{StaticResource CheckBox.Border.Hot.Color}"/>
                    </ColorAnimationUsingKeyFrames>
                    <ColorAnimationUsingKeyFrames Storyboard.TargetName="Border"
                                                  Storyboard.TargetProperty="Background.(SolidColorBrush.Color)">
                      <DiscreteColorKeyFrame KeyTime="0" Value="{StaticResource CheckBox.Background.Hot.Color}"/>
                    </ColorAnimationUsingKeyFrames>
                  </Storyboard>
                </VisualState>
                <VisualState x:Name="Pressed">
                  <Storyboard>
                    <ColorAnimationUsingKeyFrames Storyboard.TargetName="Border"
                                                  Storyboard.TargetProperty="BorderBrush.(SolidColorBrush.Color)">
                      <DiscreteColorKeyFrame KeyTime="0" Value="{StaticResource CheckBox.Border.Pressed.Color}"/>
                    </ColorAnimationUsingKeyFrames>
                    <ColorAnimationUsingKeyFrames Storyboard.TargetName="Border"
                                                  Storyboard.TargetProperty="Background.(SolidColorBrush.Color)">
                      <DiscreteColorKeyFrame KeyTime="0" Value="{StaticResource CheckBox.Background.Pressed.Color}"/>
                    </ColorAnimationUsingKeyFrames>
                  </Storyboard>
                </VisualState>
                <VisualState x:Name="Disabled">
                  <Storyboard>
                    <ColorAnimationUsingKeyFrames Storyboard.TargetName="Border"
                                                  Storyboard.TargetProperty="BorderBrush.(SolidColorBrush.Color)">
                      <DiscreteColorKeyFrame KeyTime="0" Value="{StaticResource CheckBox.Border.Disabled.Color}"/>
                    </ColorAnimationUsingKeyFrames>
                    <ColorAnimationUsingKeyFrames Storyboard.TargetName="Border"
                                                  Storyboard.TargetProperty="Background.(SolidColorBrush.Color)">
                      <DiscreteColorKeyFrame KeyTime="0" Value="{StaticResource CheckBox.Background.Disabled.Color}"/>
                    </ColorAnimationUsingKeyFrames>
                  </Storyboard>
                </VisualState>
              </VisualStateGroup>
            </VisualStateManager.VisualStateGroups>
            <Grid.ColumnDefinitions>
              <ColumnDefinition Width="Auto"/>
              <ColumnDefinition Width="*"/>
            </Grid.ColumnDefinitions>
            <Border x:Name="Border"
                    Width="13" Height="13"
                    HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                    VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                    BorderThickness="{TemplateBinding BorderThickness}"
                    Background="{TemplateBinding Background}"
                    BorderBrush="{TemplateBinding BorderBrush}"
                    CornerRadius="100">
              <Ellipse x:Name="OptionMark" Margin="2" MinWidth="7" MinHeight="7"
                       Opacity="0" Fill="{Binding BorderBrush, ElementName=Border}"/>
            </Border>
            <ContentPresenter x:Name="Content"
                              RecognizesAccessKey="True"
                              Grid.Column="1"
                              SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
                              HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                              VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                              Focusable="False"/>
          </Grid>
          <ControlTemplate.Triggers>
            <Trigger Property="HasContent" Value="True">
              <Setter Property="FocusVisualStyle" Value="{StaticResource OptionMarkFocusVisual}"/>
              <Setter TargetName="Content" Property="Margin" Value="3,2,2,3"/>
            </Trigger>
            <Trigger Property="TextOptions.TextFormattingMode" Value="Display">
              <Setter TargetName="Border" Property="Margin" Value="0,-1,0,0"/>
            </Trigger>
            <Trigger Property="IsChecked" Value="True">
              <Setter TargetName="OptionMark" Property="Opacity" Value="1"/>
            </Trigger>
            <Trigger Property="IsChecked" Value="{x:Null}">
              <Setter TargetName="OptionMark" Property="Opacity" Value="0.56"/>
            </Trigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
    <Style.Triggers>
      <Trigger Property="IsEnabled" Value="False">
        <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}"/>
      </Trigger>
    </Style.Triggers>
  </Style>


  <!-- ComboBox ============================================================ -->

  <SolidColorBrush x:Key="ComboBox.Button.Background.Normal" Color="#FFE1E1E1" po:Freeze="True"/>
  <Color x:Key="ComboBox.Button.Background.Hot.Color">#FFE5F1FB</Color>
  <Color x:Key="ComboBox.Button.Background.Pressed.Color">#FFCCE4F7</Color>
  <Color x:Key="ComboBox.Button.Background.Disabled.Color">#FFCCCCCC</Color>

  <SolidColorBrush x:Key="ComboBox.Button.Border.Normal" Color="#FFADADAD" po:Freeze="True"/>
  <Color x:Key="ComboBox.Button.Border.Hot.Color">#FF0078D7</Color>
  <Color x:Key="ComboBox.Button.Border.Pressed.Color">#FF005499</Color>
  <Color x:Key="ComboBox.Button.Border.Disabled.Color">#FFBFBFBF</Color>

  <SolidColorBrush x:Key="ComboBox.Glyph.Normal" Color="#CC333333" po:Freeze="True"/>
  <Color x:Key="ComboBox.Glyph.Hot.Color">#CC333333</Color>
  <Color x:Key="ComboBox.Glyph.Pressed.Color">#CC333333</Color>
  <Color x:Key="ComboBox.Glyph.Disabled.Color">#CCA3A3A3</Color>

  <SolidColorBrush x:Key="ComboBox.Editable.Background.Normal" Color="#FFFFFFFF" po:Freeze="True"/>
  <SolidColorBrush x:Key="ComboBox.Editable.Border.Normal" Color="#FF7A7A7A" po:Freeze="True"/>
  <SolidColorBrush x:Key="ComboBox.DropDownButton.Background.Normal" Color="Transparent" po:Freeze="True"/>
  <SolidColorBrush x:Key="ComboBox.DropDownButton.Border.Normal" Color="Transparent" po:Freeze="True"/>
  <SolidColorBrush x:Key="ComboBox.ListBox.Background.Hot" Color="#FFFFFFFF" po:Freeze="True"/>
  <SolidColorBrush x:Key="ComboBox.ListBox.Border.Hot" Color="#FF0078D7" po:Freeze="True"/>

  <Geometry x:Key="ComboBox.Glyph">
    F1 M0.65,8.1 1.354,7.396 5.354,11.396 5,11.75 4.646,11.396 8.646,7.396 9.354,8.104 5,12.457 4.646,12.104 0.646,8.104 z
  </Geometry>

  <Style x:Key="ComboBox.ReadOnly.FocusVisual">
    <Setter Property="Control.Template">
      <Setter.Value>
        <ControlTemplate>
          <Border Margin="{Binding AdornedElement.BorderThickness, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type Adorner}}}">
            <Rectangle Margin="2,2,19,2"
                       SnapsToDevicePixels="True"
                       Stroke="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}"
                       StrokeThickness="1"
                       StrokeDashArray="1 1"
                       StrokeDashOffset="1.5"/>
          </Border>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>

  <Style x:Key="ComboBox.ReadOnly.Button" TargetType="{x:Type ToggleButton}">
    <Setter Property="OverridesDefaultStyle" Value="True"/>
    <Setter Property="Background" Value="{StaticResource ComboBox.Button.Background.Normal}"/>
    <Setter Property="BorderBrush" Value="{StaticResource ComboBox.Button.Border.Normal}"/>
    <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}"/>
    <Setter Property="BorderThickness" Value="1"/>
    <Setter Property="IsTabStop" Value="False"/>
    <Setter Property="Focusable" Value="False"/>
    <Setter Property="ClickMode" Value="Press"/>
    <Setter Property="HorizontalContentAlignment" Value="Left"/>
    <Setter Property="VerticalContentAlignment" Value="Center"/>
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type ToggleButton}">
          <Border x:Name="Border"
                  Background="{TemplateBinding Background}"
                  BorderThickness="{TemplateBinding BorderThickness}"
                  BorderBrush="{TemplateBinding BorderBrush}"
                  SnapsToDevicePixels="True"
                  VisualStateManager.CustomVisualStateManager="{x:Static aero:SystemVisualStateManager.Instance}">
            <VisualStateManager.VisualStateGroups>
              <VisualStateGroup x:Name="Common">
                <VisualStateGroup.Transitions>
                  <VisualTransition From="Normal" To="MouseOver" GeneratedDuration="0:00:00.225"/>
                  <VisualTransition From="Normal" To="Pressed" GeneratedDuration="0:00:00.15"/>
                  <VisualTransition From="Normal" To="Checked" GeneratedDuration="0:00:00.15"/>
                  <VisualTransition From="Normal" To="Disabled" GeneratedDuration="0:00:00.15"/>
                  <VisualTransition From="MouseOver" To="Normal" GeneratedDuration="0:00:00.635"/>
                  <VisualTransition From="MouseOver" To="Pressed" GeneratedDuration="0:00:00.15"/>
                  <VisualTransition From="MouseOver" To="Checked" GeneratedDuration="0:00:00.15"/>
                  <VisualTransition From="MouseOver" To="Disabled" GeneratedDuration="0:00:00.15"/>
                  <VisualTransition From="Pressed" To="Normal" GeneratedDuration="0:00:00.225"/>
                  <VisualTransition From="Pressed" To="MouseOver" GeneratedDuration="0:00:00.225"/>
                  <VisualTransition From="Pressed" To="Disabled" GeneratedDuration="0:00:00"/>
                  <VisualTransition From="Checked" To="Normal" GeneratedDuration="0:00:00.225"/>
                  <VisualTransition From="Checked" To="MouseOver" GeneratedDuration="0:00:00.225"/>
                  <VisualTransition From="Checked" To="Pressed" GeneratedDuration="0:00:00"/>
                  <VisualTransition From="Checked" To="Disabled" GeneratedDuration="0:00:00"/>
                  <VisualTransition From="Disabled" To="Normal" GeneratedDuration="0:00:00.375"/>
                  <VisualTransition From="Disabled" To="MouseOver" GeneratedDuration="0:00:00"/>
                  <VisualTransition From="Disabled" To="Pressed" GeneratedDuration="0:00:00"/>
                  <VisualTransition From="Disabled" To="Checked" GeneratedDuration="0:00:00"/>
                </VisualStateGroup.Transitions>
                <VisualState x:Name="Normal"/>
                <VisualState x:Name="MouseOver">
                  <Storyboard>
                    <ColorAnimationUsingKeyFrames Storyboard.TargetName="Border"
                                                  Storyboard.TargetProperty="BorderBrush.(SolidColorBrush.Color)">
                      <DiscreteColorKeyFrame KeyTime="0" Value="{StaticResource ComboBox.Button.Border.Hot.Color}"/>
                    </ColorAnimationUsingKeyFrames>
                    <ColorAnimationUsingKeyFrames Storyboard.TargetName="Border"
                                                  Storyboard.TargetProperty="Background.(SolidColorBrush.Color)">
                      <DiscreteColorKeyFrame KeyTime="0" Value="{StaticResource ComboBox.Button.Background.Hot.Color}"/>
                    </ColorAnimationUsingKeyFrames>
                    <ColorAnimationUsingKeyFrames Storyboard.TargetName="Glyph"
                                                  Storyboard.TargetProperty="Fill.(SolidColorBrush.Color)">
                      <DiscreteColorKeyFrame KeyTime="0" Value="{StaticResource ComboBox.Glyph.Hot.Color}"/>
                    </ColorAnimationUsingKeyFrames>
                  </Storyboard>
                </VisualState>
                <VisualState x:Name="Pressed">
                  <Storyboard>
                    <ColorAnimationUsingKeyFrames Storyboard.TargetName="Border"
                                                  Storyboard.TargetProperty="BorderBrush.(SolidColorBrush.Color)">
                      <DiscreteColorKeyFrame KeyTime="0" Value="{StaticResource ComboBox.Button.Border.Pressed.Color}"/>
                    </ColorAnimationUsingKeyFrames>
                    <ColorAnimationUsingKeyFrames Storyboard.TargetName="Border"
                                                  Storyboard.TargetProperty="Background.(SolidColorBrush.Color)">
                      <DiscreteColorKeyFrame KeyTime="0" Value="{StaticResource ComboBox.Button.Background.Pressed.Color}"/>
                    </ColorAnimationUsingKeyFrames>
                    <ColorAnimationUsingKeyFrames Storyboard.TargetName="Glyph"
                                                  Storyboard.TargetProperty="Fill.(SolidColorBrush.Color)">
                      <DiscreteColorKeyFrame KeyTime="0" Value="{StaticResource ComboBox.Glyph.Pressed.Color}"/>
                    </ColorAnimationUsingKeyFrames>
                  </Storyboard>
                </VisualState>
                <VisualState x:Name="Checked">
                  <Storyboard>
                    <ColorAnimationUsingKeyFrames Storyboard.TargetName="Border"
                                                  Storyboard.TargetProperty="BorderBrush.(SolidColorBrush.Color)">
                      <DiscreteColorKeyFrame KeyTime="0" Value="{StaticResource ComboBox.Button.Border.Pressed.Color}"/>
                    </ColorAnimationUsingKeyFrames>
                    <ColorAnimationUsingKeyFrames Storyboard.TargetName="Border"
                                                  Storyboard.TargetProperty="Background.(SolidColorBrush.Color)">
                      <DiscreteColorKeyFrame KeyTime="0" Value="{StaticResource ComboBox.Button.Background.Pressed.Color}"/>
                    </ColorAnimationUsingKeyFrames>
                    <ColorAnimationUsingKeyFrames Storyboard.TargetName="Glyph"
                                                  Storyboard.TargetProperty="Fill.(SolidColorBrush.Color)">
                      <DiscreteColorKeyFrame KeyTime="0" Value="{StaticResource ComboBox.Glyph.Pressed.Color}"/>
                    </ColorAnimationUsingKeyFrames>
                  </Storyboard>
                </VisualState>
                <VisualState x:Name="Disabled">
                  <Storyboard>
                    <ColorAnimationUsingKeyFrames Storyboard.TargetName="Border"
                                                  Storyboard.TargetProperty="BorderBrush.(SolidColorBrush.Color)">
                      <DiscreteColorKeyFrame KeyTime="0" Value="{StaticResource ComboBox.Button.Border.Disabled.Color}"/>
                    </ColorAnimationUsingKeyFrames>
                    <ColorAnimationUsingKeyFrames Storyboard.TargetName="Border"
                                                  Storyboard.TargetProperty="Background.(SolidColorBrush.Color)">
                      <DiscreteColorKeyFrame KeyTime="0" Value="{StaticResource ComboBox.Button.Background.Disabled.Color}"/>
                    </ColorAnimationUsingKeyFrames>
                    <ColorAnimationUsingKeyFrames Storyboard.TargetName="Glyph"
                                                  Storyboard.TargetProperty="Fill.(SolidColorBrush.Color)">
                      <DiscreteColorKeyFrame KeyTime="0" Value="{StaticResource ComboBox.Glyph.Disabled.Color}"/>
                    </ColorAnimationUsingKeyFrames>
                  </Storyboard>
                </VisualState>
              </VisualStateGroup>
            </VisualStateManager.VisualStateGroups>
            <Grid>
              <Grid.ColumnDefinitions>
                <ColumnDefinition Width="*"/>
                <ColumnDefinition Width="0"
                                  MinWidth="{DynamicResource {x:Static SystemParameters.VerticalScrollBarWidthKey}}"/>
              </Grid.ColumnDefinitions>
              <Border x:Name="DefaultedBorder"
                      Grid.Column="1"
                      BorderThickness="1"
                      BorderBrush="Transparent"
                      SnapsToDevicePixels="True">
                <Path x:Name="Glyph"
                      HorizontalAlignment="Right"
                      VerticalAlignment="Center"
                      Fill="{StaticResource ComboBox.Glyph.Normal}"
                      Data="{StaticResource ComboBox.Glyph}"
                      Margin="0,0,1.5,0"
                      Width="10"
                      Height="19"
                      Stretch="None"/>
              </Border>
              <ContentPresenter x:Name="Content"
                                Content="{TemplateBinding Content}"
                                ContentTemplate="{TemplateBinding ContentTemplate}"
                                ContentTemplateSelector="{TemplateBinding ContentTemplateSelector}"
                                ContentStringFormat="{TemplateBinding ContentStringFormat}"
                                IsHitTestVisible="False"
                                Margin="{TemplateBinding Padding}"
                                SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
                                HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
            </Grid>
          </Border>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>

  <Style x:Key="ComboBox.Editable.TextBox" TargetType="{x:Type TextBox}">
    <Setter Property="OverridesDefaultStyle" Value="True"/>
    <Setter Property="AllowDrop" Value="True"/>
    <Setter Property="MinWidth" Value="0"/>
    <Setter Property="MinHeight" Value="0"/>
    <Setter Property="FocusVisualStyle" Value="{x:Null}"/>
    <Setter Property="ScrollViewer.PanningMode" Value="VerticalFirst"/>
    <Setter Property="Stylus.IsFlicksEnabled" Value="False"/>
    <Setter Property="aero:TextBoxService.ViewMargin" Value="0"/>
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type TextBox}">
          <ScrollViewer x:Name="PART_ContentHost"
                        Focusable="False"
                        HorizontalScrollBarVisibility="Hidden"
                        VerticalScrollBarVisibility="Hidden"
                        Background="Transparent"/>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>

  <Style x:Key="ComboBox.Editable.DropDownButton" TargetType="{x:Type ToggleButton}">
    <Setter Property="OverridesDefaultStyle" Value="True"/>
    <Setter Property="Background" Value="{StaticResource ComboBox.DropDownButton.Background.Normal}"/>
    <Setter Property="BorderBrush" Value="{StaticResource ComboBox.DropDownButton.Border.Normal}"/>
    <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}"/>
    <Setter Property="BorderThickness" Value="1"/>
    <Setter Property="IsTabStop" Value="False"/>
    <Setter Property="Focusable" Value="False"/>
    <Setter Property="ClickMode" Value="Press"/>
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type ToggleButton}">
          <Border x:Name="Border"
                  Background="{TemplateBinding Background}"
                  BorderThickness="{TemplateBinding BorderThickness}"
                  BorderBrush="{TemplateBinding BorderBrush}"
                  SnapsToDevicePixels="True"
                  VisualStateManager.CustomVisualStateManager="{x:Static aero:SystemVisualStateManager.Instance}">
            <VisualStateManager.VisualStateGroups>
              <VisualStateGroup x:Name="Common">
                <VisualStateGroup.Transitions>
                  <VisualTransition From="Normal" To="MouseOver" GeneratedDuration="0:00:00.225"/>
                  <VisualTransition From="Normal" To="Pressed" GeneratedDuration="0:00:00.15"/>
                  <VisualTransition From="Normal" To="Checked" GeneratedDuration="0:00:00.15"/>
                  <VisualTransition From="Normal" To="Disabled" GeneratedDuration="0:00:00.15"/>
                  <VisualTransition From="MouseOver" To="Normal" GeneratedDuration="0:00:00.635"/>
                  <VisualTransition From="MouseOver" To="Pressed" GeneratedDuration="0:00:00.15"/>
                  <VisualTransition From="MouseOver" To="Checked" GeneratedDuration="0:00:00.15"/>
                  <VisualTransition From="MouseOver" To="Disabled" GeneratedDuration="0:00:00.15"/>
                  <VisualTransition From="Pressed" To="Normal" GeneratedDuration="0:00:00.225"/>
                  <VisualTransition From="Pressed" To="MouseOver" GeneratedDuration="0:00:00.225"/>
                  <VisualTransition From="Pressed" To="Disabled" GeneratedDuration="0:00:00"/>
                  <VisualTransition From="Checked" To="Normal" GeneratedDuration="0:00:00.225"/>
                  <VisualTransition From="Checked" To="MouseOver" GeneratedDuration="0:00:00.225"/>
                  <VisualTransition From="Checked" To="Pressed" GeneratedDuration="0:00:00"/>
                  <VisualTransition From="Checked" To="Disabled" GeneratedDuration="0:00:00"/>
                  <VisualTransition From="Disabled" To="Normal" GeneratedDuration="0:00:00.375"/>
                  <VisualTransition From="Disabled" To="MouseOver" GeneratedDuration="0:00:00"/>
                  <VisualTransition From="Disabled" To="Pressed" GeneratedDuration="0:00:00"/>
                  <VisualTransition From="Disabled" To="Checked" GeneratedDuration="0:00:00"/>
                </VisualStateGroup.Transitions>
                <VisualState x:Name="Normal"/>
                <VisualState x:Name="MouseOver">
                  <Storyboard>
                    <ColorAnimationUsingKeyFrames Storyboard.TargetName="Border"
                                                  Storyboard.TargetProperty="BorderBrush.(SolidColorBrush.Color)">
                      <DiscreteColorKeyFrame KeyTime="0" Value="{StaticResource ComboBox.Button.Border.Hot.Color}"/>
                    </ColorAnimationUsingKeyFrames>
                    <ColorAnimationUsingKeyFrames Storyboard.TargetName="Border"
                                                  Storyboard.TargetProperty="Background.(SolidColorBrush.Color)">
                      <DiscreteColorKeyFrame KeyTime="0" Value="{StaticResource ComboBox.Button.Background.Hot.Color}"/>
                    </ColorAnimationUsingKeyFrames>
                    <ColorAnimationUsingKeyFrames Storyboard.TargetName="Glyph"
                                                  Storyboard.TargetProperty="Fill.(SolidColorBrush.Color)">
                      <DiscreteColorKeyFrame KeyTime="0" Value="{StaticResource ComboBox.Glyph.Hot.Color}"/>
                    </ColorAnimationUsingKeyFrames>
                  </Storyboard>
                </VisualState>
                <VisualState x:Name="Pressed">
                  <Storyboard>
                    <ColorAnimationUsingKeyFrames Storyboard.TargetName="Border"
                                                  Storyboard.TargetProperty="BorderBrush.(SolidColorBrush.Color)">
                      <DiscreteColorKeyFrame KeyTime="0" Value="{StaticResource ComboBox.Button.Border.Pressed.Color}"/>
                    </ColorAnimationUsingKeyFrames>
                    <ColorAnimationUsingKeyFrames Storyboard.TargetName="Border"
                                                  Storyboard.TargetProperty="Background.(SolidColorBrush.Color)">
                      <DiscreteColorKeyFrame KeyTime="0" Value="{StaticResource ComboBox.Button.Background.Pressed.Color}"/>
                    </ColorAnimationUsingKeyFrames>
                    <ColorAnimationUsingKeyFrames Storyboard.TargetName="Glyph"
                                                  Storyboard.TargetProperty="Fill.(SolidColorBrush.Color)">
                      <DiscreteColorKeyFrame KeyTime="0" Value="{StaticResource ComboBox.Glyph.Pressed.Color}"/>
                    </ColorAnimationUsingKeyFrames>
                  </Storyboard>
                </VisualState>
                <VisualState x:Name="Checked">
                  <Storyboard>
                    <ColorAnimationUsingKeyFrames Storyboard.TargetName="Border"
                                                  Storyboard.TargetProperty="BorderBrush.(SolidColorBrush.Color)">
                      <DiscreteColorKeyFrame KeyTime="0" Value="{StaticResource ComboBox.Button.Border.Pressed.Color}"/>
                    </ColorAnimationUsingKeyFrames>
                    <ColorAnimationUsingKeyFrames Storyboard.TargetName="Border"
                                                  Storyboard.TargetProperty="Background.(SolidColorBrush.Color)">
                      <DiscreteColorKeyFrame KeyTime="0" Value="{StaticResource ComboBox.Button.Background.Pressed.Color}"/>
                    </ColorAnimationUsingKeyFrames>
                    <ColorAnimationUsingKeyFrames Storyboard.TargetName="Glyph"
                                                  Storyboard.TargetProperty="Fill.(SolidColorBrush.Color)">
                      <DiscreteColorKeyFrame KeyTime="0" Value="{StaticResource ComboBox.Glyph.Pressed.Color}"/>
                    </ColorAnimationUsingKeyFrames>
                  </Storyboard>
                </VisualState>
                <VisualState x:Name="Disabled">
                  <Storyboard>
                    <ColorAnimationUsingKeyFrames Storyboard.TargetName="Glyph"
                                                  Storyboard.TargetProperty="Fill.(SolidColorBrush.Color)">
                      <DiscreteColorKeyFrame KeyTime="0" Value="{StaticResource ComboBox.Glyph.Disabled.Color}"/>
                    </ColorAnimationUsingKeyFrames>
                  </Storyboard>
                </VisualState>
              </VisualStateGroup>
            </VisualStateManager.VisualStateGroups>
            <Border x:Name="DefaultedBorder"
                    BorderThickness="1"
                    BorderBrush="Transparent"
                    SnapsToDevicePixels="True">
              <Path x:Name="Glyph"
                    HorizontalAlignment="Center"
                    VerticalAlignment="Center"
                    Fill="{StaticResource ComboBox.Glyph.Normal}"
                    Data="{StaticResource ComboBox.Glyph}"
                    Width="10"
                    Height="19"
                    Stretch="None"/>
            </Border>
          </Border>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>

  <ControlTemplate x:Key="ComboBox.ReadOnly" TargetType="{x:Type ComboBox}">
    <Grid x:Name="TemplateRoot" SnapsToDevicePixels="True">
      <Popup x:Name="PART_Popup"
                AllowsTransparency="True"
                Margin="1"
                Placement="Bottom"
                IsOpen="{Binding IsDropDownOpen, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}"
                PopupAnimation="{DynamicResource {x:Static SystemParameters.ComboBoxPopupAnimationKey}}">
        <aero10:SystemDropShadowChrome x:Name="Shadow"
                                       Color="Transparent"
                                       MaxHeight="{TemplateBinding MaxDropDownHeight}"
                                       MinWidth="{Binding ActualWidth, ElementName=TemplateRoot}">
          <Border x:Name="DropDownBorder"
                  BorderBrush="{DynamicResource {x:Static SystemColors.WindowFrameBrushKey}}"
                  Background="{DynamicResource {x:Static SystemColors.WindowBrushKey}}"
                  BorderThickness="1">
            <ScrollViewer x:Name="DropDownScrollViewer">
              <Grid x:Name="Grid" RenderOptions.ClearTypeHint="Enabled">
                <Canvas x:Name="Canvas"
                        HorizontalAlignment="Left"
                        VerticalAlignment="Top"
                        Height="0"
                        Width="0">
                  <Rectangle x:Name="OpaqueRect"
                             Fill="{Binding Background, ElementName=DropDownBorder}"
                             Height="{Binding ActualHeight, ElementName=DropDownBorder}"
                             Width="{Binding ActualWidth, ElementName=DropDownBorder}"/>
                </Canvas>
                <ItemsPresenter x:Name="ItemsPresenter"
                                KeyboardNavigation.DirectionalNavigation="Contained"
                                SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"/>
              </Grid>
            </ScrollViewer>
          </Border>
        </aero10:SystemDropShadowChrome>
      </Popup>
      <ToggleButton x:Name="ToggleButton"
                    Style="{StaticResource ComboBox.ReadOnly.Button}"
                    BorderBrush="{TemplateBinding BorderBrush}"
                    Background="{TemplateBinding Background}"
                    BorderThickness="{TemplateBinding BorderThickness}"
                    Foreground="{TemplateBinding Foreground}"
                    IsChecked="{Binding IsDropDownOpen, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}"
                    Content="{TemplateBinding SelectionBoxItem}"
                    ContentTemplate="{TemplateBinding SelectionBoxItemTemplate}"
                    ContentTemplateSelector="{TemplateBinding ItemTemplateSelector}"
                    ContentStringFormat="{TemplateBinding SelectionBoxItemStringFormat}"
                    HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}"
                    VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}"
                    Padding="{TemplateBinding Padding}"/>
    </Grid>
    <ControlTemplate.Triggers>
      <Trigger Property="IsEnabled" Value="False">
        <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}"/>
      </Trigger>
      <Trigger Property="HasDropShadow" SourceName="PART_Popup" Value="True">
        <Setter TargetName="Shadow" Property="Margin" Value="0,0,5,5"/>
        <Setter TargetName="Shadow" Property="Color" Value="#71000000"/>
      </Trigger>
      <Trigger Property="HasItems" Value="False">
        <Setter TargetName="DropDownBorder" Property="Height" Value="95"/>
      </Trigger>
      <MultiTrigger>
        <MultiTrigger.Conditions>
          <Condition Property="IsGrouping" Value="True"/>
          <Condition Property="VirtualizingPanel.IsVirtualizingWhenGrouping" Value="False"/>
        </MultiTrigger.Conditions>
        <Setter Property="ScrollViewer.CanContentScroll" Value="False"/>
      </MultiTrigger>
      <Trigger SourceName="DropDownScrollViewer" Property="ScrollViewer.CanContentScroll" Value="False">
        <Setter TargetName="OpaqueRect" Property="Canvas.Left" Value="{Binding HorizontalOffset, ElementName=DropDownScrollViewer}"/>
        <Setter TargetName="OpaqueRect" Property="Canvas.Top" Value="{Binding VerticalOffset, ElementName=DropDownScrollViewer}"/>
      </Trigger>
    </ControlTemplate.Triggers>
  </ControlTemplate>

  <ControlTemplate x:Key="ComboBox.Editable" TargetType="{x:Type ComboBox}">
    <Grid x:Name="TemplateRoot" SnapsToDevicePixels="True">
      <Popup x:Name="PART_Popup"
                AllowsTransparency="True"
                Placement="Bottom"
                IsOpen="{Binding IsDropDownOpen, RelativeSource={RelativeSource TemplatedParent}}"
                PopupAnimation="{DynamicResource {x:Static SystemParameters.ComboBoxPopupAnimationKey}}">
        <aero10:SystemDropShadowChrome x:Name="Shadow"
                                       Color="Transparent"
                                       MaxHeight="{TemplateBinding MaxDropDownHeight}"
                                       MinWidth="{Binding ActualWidth, ElementName=TemplateRoot}">
          <Border x:Name="DropDownBorder"
                  BorderBrush="{StaticResource ComboBox.ListBox.Border.Hot}"
                  Background="{StaticResource ComboBox.ListBox.Background.Hot}"
                  BorderThickness="1">
            <ScrollViewer x:Name="DropDownScrollViewer">
              <Grid x:Name="Grid" RenderOptions.ClearTypeHint="Enabled">
                <Canvas x:Name="Canvas"
                        HorizontalAlignment="Left"
                        VerticalAlignment="Top"
                        Width="0"
                        Height="0">
                  <Rectangle x:Name="OpaqueRect"
                             Fill="{Binding Background, ElementName=DropDownBorder}"
                             Height="{Binding ActualHeight, ElementName=DropDownBorder}"
                             Width="{Binding ActualWidth, ElementName=DropDownBorder}"/>
                </Canvas>
                <ItemsPresenter x:Name="ItemsPresenter"
                                KeyboardNavigation.DirectionalNavigation="Contained"
                                SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"/>
              </Grid>
            </ScrollViewer>
          </Border>
        </aero10:SystemDropShadowChrome>
      </Popup>
      <Grid>
        <Grid.ColumnDefinitions>
          <ColumnDefinition Width="*"/>
          <ColumnDefinition Width="Auto"
                            MinWidth="{DynamicResource {x:Static SystemParameters.VerticalScrollBarWidthKey}}"/>
        </Grid.ColumnDefinitions>
        <aero10:TextBoxChrome Grid.ColumnSpan="2"
                              Style="{StaticResource {x:Type aero10:TextBoxChrome}}"
                              Focusable="False"
                              Background="{TemplateBinding Background}"
                              BorderBrush="{TemplateBinding BorderBrush}"
                              BorderThickness="{TemplateBinding BorderThickness}"
                              Foreground="{TemplateBinding Foreground}"
                              RenderEnabled="{TemplateBinding IsEnabled}"
                              RenderReadOnly="{TemplateBinding IsReadOnly}"
                              RenderFocused="{Binding IsKeyboardFocused, ElementName=PART_EditableTextBox}"
                              RenderHot="{TemplateBinding IsMouseOver}"/>
        <Border Margin="{TemplateBinding BorderThickness}">
          <TextBox x:Name="PART_EditableTextBox"
                   Style="{StaticResource ComboBox.Editable.TextBox}"
                   IsReadOnly="{Binding IsReadOnly, RelativeSource={RelativeSource TemplatedParent}}"
                   Padding="{TemplateBinding Padding}"
                   HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}"
                   VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}"/>
        </Border>
        <ToggleButton x:Name="ToggleButton"
                      Grid.Column="1"
                      IsChecked="{Binding IsDropDownOpen, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}"
                      Style="{StaticResource ComboBox.Editable.DropDownButton}"
                      BorderThickness="{TemplateBinding BorderThickness}"
                      HorizontalContentAlignment="Center"/>
      </Grid>
    </Grid>
    <ControlTemplate.Triggers>
      <Trigger Property="IsEnabled" Value="False">
        <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}"/>
      </Trigger>
      <Trigger Property="IsKeyboardFocusWithin" Value="True">
        <Setter Property="Foreground" Value="Black"/>
      </Trigger>
      <Trigger Property="HasDropShadow" SourceName="PART_Popup" Value="True">
        <Setter TargetName="Shadow" Property="Margin" Value="0,0,5,5"/>
        <Setter TargetName="Shadow" Property="Color" Value="#71000000"/>
      </Trigger>
      <Trigger Property="HasItems" Value="False">
        <Setter TargetName="DropDownBorder" Property="Height" Value="95"/>
      </Trigger>
      <MultiTrigger>
        <MultiTrigger.Conditions>
          <Condition Property="IsGrouping" Value="True"/>
          <Condition Property="VirtualizingPanel.IsVirtualizingWhenGrouping" Value="False"/>
        </MultiTrigger.Conditions>
        <Setter Property="ScrollViewer.CanContentScroll" Value="False"/>
      </MultiTrigger>
      <Trigger Property="ScrollViewer.CanContentScroll" SourceName="DropDownScrollViewer" Value="False">
        <Setter TargetName="OpaqueRect" Property="Canvas.Top" Value="{Binding VerticalOffset, ElementName=DropDownScrollViewer}"/>
        <Setter TargetName="OpaqueRect" Property="Canvas.Left" Value="{Binding HorizontalOffset, ElementName=DropDownScrollViewer}"/>
      </Trigger>
    </ControlTemplate.Triggers>
  </ControlTemplate>

  <Style TargetType="{x:Type ComboBox}">
    <Setter Property="FocusVisualStyle" Value="{StaticResource ComboBox.ReadOnly.FocusVisual}"/>
    <Setter Property="Background" Value="{StaticResource ComboBox.Button.Background.Normal}"/>
    <Setter Property="BorderBrush" Value="{StaticResource ComboBox.Button.Border.Normal}"/>
    <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}"/>
    <Setter Property="BorderThickness" Value="1"/>
    <Setter Property="Padding" Value="3,2,2,2"/>
    <Setter Property="HorizontalContentAlignment" Value="Left"/>
    <Setter Property="VerticalContentAlignment" Value="Center"/>
    <Setter Property="ScrollViewer.HorizontalScrollBarVisibility" Value="Auto"/>
    <Setter Property="ScrollViewer.VerticalScrollBarVisibility" Value="Auto"/>
    <Setter Property="ScrollViewer.CanContentScroll" Value="True"/>
    <Setter Property="ScrollViewer.PanningMode" Value="Both"/>
    <Setter Property="Stylus.IsFlicksEnabled" Value="False"/>
    <Setter Property="Template" Value="{StaticResource ComboBox.ReadOnly}"/>
    <Style.Triggers>
      <Trigger Property="IsEditable" Value="True">
        <Setter Property="IsTabStop" Value="False"/>
        <Setter Property="FocusVisualStyle" Value="{x:Null}"/>
        <Setter Property="Template" Value="{StaticResource ComboBox.Editable}"/>
        <Setter Property="Background" Value="{StaticResource ComboBox.Editable.Background.Normal}"/>
        <Setter Property="BorderBrush" Value="{StaticResource ComboBox.Editable.Border.Normal}"/>
        <Setter Property="Padding" Value="2"/>
      </Trigger>
    </Style.Triggers>
  </Style>

  <Style x:Key="ComboBoxItem.HighlightFocusVisual">
    <Setter Property="Control.Template">
      <Setter.Value>
        <ControlTemplate>
          <Rectangle SnapsToDevicePixels="True"
                     Stroke="#FFCC6600"
                     StrokeThickness="1"
                     StrokeDashArray="1 1"
                     StrokeDashOffset="1.5"/>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>

  <Style TargetType="{x:Type ComboBoxItem}">
    <Setter Property="SnapsToDevicePixels" Value="True"/>
    <Setter Property="Padding" Value="2,0"/>
    <Setter Property="HorizontalContentAlignment" Value="{Binding HorizontalContentAlignment, RelativeSource={RelativeSource AncestorType={x:Type ItemsControl}}}"/>
    <Setter Property="VerticalContentAlignment" Value="{Binding VerticalContentAlignment, RelativeSource={RelativeSource AncestorType={x:Type ItemsControl}}}"/>
    <Setter Property="Background" Value="Transparent"/>
    <Setter Property="BorderBrush" Value="Transparent"/>
    <Setter Property="BorderThickness" Value="0"/>
    <Setter Property="FocusVisualStyle" Value="{StaticResource ComboBoxItem.HighlightFocusVisual}"/>
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type ComboBoxItem}">
          <Border x:Name="Bd"
                  BorderBrush="{TemplateBinding BorderBrush}"
                  BorderThickness="{TemplateBinding BorderThickness}"
                  Background="{TemplateBinding Background}"
                  Padding="{TemplateBinding Padding}"
                  SnapsToDevicePixels="True">
            <ContentPresenter HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                              VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                              SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"/>
          </Border>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
    <Style.Triggers>
      <Trigger Property="IsEnabled" Value="False">
        <Setter Property="TextElement.Foreground" Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}"/>
      </Trigger>
      <MultiTrigger>
        <MultiTrigger.Conditions>
          <Condition Property="IsSelected" Value="True"/>
          <Condition Property="IsMouseOver" Value="False"/>
          <Condition Property="UIElement.IsKeyboardFocused" Value="True"/>
        </MultiTrigger.Conditions>
        <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.HighlightTextBrushKey}}"/>
        <Setter Property="Background" Value="{DynamicResource {x:Static SystemColors.HighlightBrushKey}}"/>
        <Setter Property="BorderBrush" Value="{DynamicResource {x:Static SystemColors.HighlightBrushKey}}"/>
      </MultiTrigger>
      <MultiTrigger>
        <MultiTrigger.Conditions>
          <Condition Property="IsSelected" Value="False"/>
          <Condition Property="IsMouseOver" Value="False"/>
          <Condition Property="UIElement.IsKeyboardFocused" Value="True"/>
        </MultiTrigger.Conditions>
        <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.HighlightTextBrushKey}}"/>
        <Setter Property="Background" Value="{DynamicResource {x:Static SystemColors.HighlightBrushKey}}"/>
        <Setter Property="BorderBrush" Value="{DynamicResource {x:Static SystemColors.HighlightBrushKey}}"/>
      </MultiTrigger>
      <Trigger Property="IsMouseOver" Value="True">
        <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.HighlightTextBrushKey}}"/>
        <Setter Property="Background" Value="{DynamicResource {x:Static SystemColors.HighlightBrushKey}}"/>
        <Setter Property="BorderBrush" Value="{DynamicResource {x:Static SystemColors.HighlightBrushKey}}"/>
      </Trigger>
    </Style.Triggers>
  </Style>


  <!-- ListBox ============================================================= -->

  <SolidColorBrush x:Key="ListBox.Background.Normal" Color="#FFFFFFFF" po:Freeze="True"/>
  <SolidColorBrush x:Key="ListBox.Background.Disabled" Color="#FFFFFFFF" po:Freeze="True"/>
  <SolidColorBrush x:Key="ListBox.Border.Normal" Color="#FF828790" po:Freeze="True"/>
  <SolidColorBrush x:Key="ListBox.Border.Disabled" Color="#FFD9D9D9" po:Freeze="True"/>

  <Style x:Key="{x:Type ListBox}" TargetType="{x:Type ListBox}">
    <Setter Property="Background" Value="{StaticResource ListBox.Background.Normal}"/>
    <Setter Property="BorderBrush" Value="{StaticResource ListBox.Border.Normal}"/>
    <Setter Property="BorderThickness" Value="1"/>
    <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}"/>
    <Setter Property="Padding" Value="1"/>
    <Setter Property="ScrollViewer.HorizontalScrollBarVisibility" Value="Auto"/>
    <Setter Property="ScrollViewer.VerticalScrollBarVisibility" Value="Auto"/>
    <Setter Property="ScrollViewer.CanContentScroll" Value="True"/>
    <Setter Property="ScrollViewer.PanningMode" Value="Both"/>
    <Setter Property="Stylus.IsFlicksEnabled" Value="False"/>
    <Setter Property="VerticalContentAlignment" Value="Center"/>
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type ListBox}">
          <Border x:Name="Border"
                  Background="{TemplateBinding Background}"
                  BorderBrush="{TemplateBinding BorderBrush}"
                  BorderThickness="{TemplateBinding BorderThickness}"
                  SnapsToDevicePixels="True"
                  Padding="{TemplateBinding Padding}">
            <ScrollViewer Focusable="False">
              <ItemsPresenter SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"/>
            </ScrollViewer>
          </Border>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
    <Style.Triggers>
      <Trigger Property="IsEnabled" Value="False">
        <Setter Property="Background" Value="{StaticResource ListBox.Background.Disabled}"/>
        <Setter Property="BorderBrush" Value="{StaticResource ListBox.Border.Disabled}"/>
      </Trigger>
      <MultiTrigger>
        <MultiTrigger.Conditions>
          <Condition Property="IsGrouping" Value="True"/>
          <Condition Property="VirtualizingPanel.IsVirtualizingWhenGrouping" Value="False"/>
        </MultiTrigger.Conditions>
        <Setter Property="ScrollViewer.CanContentScroll" Value="False"/>
      </MultiTrigger>
    </Style.Triggers>
  </Style>

  <Style x:Key="ListBoxItem.FocusVisual">
    <Setter Property="Control.Template">
      <Setter.Value>
        <ControlTemplate>
          <Rectangle SnapsToDevicePixels="True"
                     Stroke="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}"
                     StrokeThickness="1"
                     StrokeDashArray="1 1"
                     StrokeDashOffset="1.5"/>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>

  <Style x:Key="ListBoxItem.HighlightFocusVisual">
    <Setter Property="Control.Template">
      <Setter.Value>
        <ControlTemplate>
          <Rectangle SnapsToDevicePixels="True"
                     Stroke="#FFCC6600"
                     StrokeThickness="1"
                     StrokeDashArray="1 1"
                     StrokeDashOffset="1.5"/>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>

  <Style x:Key="{x:Type ListBoxItem}" TargetType="{x:Type ListBoxItem}">
    <Setter Property="SnapsToDevicePixels" Value="True"/>
    <Setter Property="Padding" Value="2,0"/>
    <Setter Property="HorizontalContentAlignment" Value="{Binding HorizontalContentAlignment, RelativeSource={RelativeSource AncestorType={x:Type ItemsControl}}}"/>
    <Setter Property="VerticalContentAlignment" Value="{Binding VerticalContentAlignment, RelativeSource={RelativeSource AncestorType={x:Type ItemsControl}}}"/>
    <Setter Property="Background" Value="Transparent"/>
    <Setter Property="BorderBrush" Value="Transparent"/>
    <Setter Property="BorderThickness" Value="0"/>
    <Setter Property="FocusVisualStyle" Value="{StaticResource ListBoxItem.FocusVisual}"/>
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type ListBoxItem}">
          <Border BorderBrush="{TemplateBinding BorderBrush}"
                  BorderThickness="{TemplateBinding BorderThickness}"
                  Background="{TemplateBinding Background}"
                  Padding="{TemplateBinding Padding}"
                  SnapsToDevicePixels="True">
            <ContentPresenter HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                              VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                              SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"/>
          </Border>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
    <Style.Triggers>
      <MultiTrigger>
        <MultiTrigger.Conditions>
          <Condition Property="Selector.IsSelectionActive" Value="True"/>
          <Condition Property="IsSelected" Value="True"/>
        </MultiTrigger.Conditions>
        <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.HighlightTextBrushKey}}"/>
        <Setter Property="Background" Value="{DynamicResource {x:Static SystemColors.HighlightBrushKey}}"/>
        <Setter Property="BorderBrush" Value="{DynamicResource {x:Static SystemColors.HighlightBrushKey}}"/>
        <Setter Property="FocusVisualStyle" Value="{StaticResource ListBoxItem.HighlightFocusVisual}"/>
      </MultiTrigger>
      <MultiTrigger>
        <MultiTrigger.Conditions>
          <Condition Property="Selector.IsSelectionActive" Value="False"/>
          <Condition Property="IsSelected" Value="True"/>
        </MultiTrigger.Conditions>
        <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.InactiveSelectionHighlightTextBrushKey}}"/>
        <Setter Property="Background" Value="{DynamicResource {x:Static SystemColors.InactiveSelectionHighlightBrushKey}}"/>
        <Setter Property="BorderBrush" Value="{DynamicResource {x:Static SystemColors.InactiveSelectionHighlightBrushKey}}"/>
      </MultiTrigger>
      <Trigger Property="IsEnabled" Value="False">
        <Setter Property="TextElement.Foreground" Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}"/>
      </Trigger>
    </Style.Triggers>
  </Style>


  <!-- ListView ============================================================ -->

  <Style x:Key="GridViewColumnHeaderGripper" TargetType="{x:Type Thumb}">
    <Setter Property="Canvas.Right" Value="-9"/>
    <Setter Property="Width" Value="18"/>
    <Setter Property="Height"
            Value="{Binding ActualHeight, RelativeSource={RelativeSource TemplatedParent}}"/>
    <Setter Property="Padding" Value="0"/>
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type Thumb}">
          <Border Background="Transparent"/>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>

  <Style x:Key="{x:Type GridViewColumnHeader}" TargetType="{x:Type GridViewColumnHeader}">
    <Setter Property="HorizontalContentAlignment" Value="Left"/>
    <Setter Property="VerticalContentAlignment" Value="Center"/>
    <Setter Property="Background" Value="{x:Null}"/>
    <Setter Property="BorderBrush" Value="{x:Null}"/>
    <Setter Property="BorderThickness" Value="0"/>
    <Setter Property="Padding" Value="6,4,6,5"/>
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type GridViewColumnHeader}">
          <Grid SnapsToDevicePixels="True">
            <aero10:GridViewColumnHeaderChrome x:Name="HeaderBorder"
                                               Padding="{TemplateBinding Padding}"
                                               SeparatorVisibility="Hidden"
                                               RenderHot="{TemplateBinding IsMouseOver}"
                                               RenderPressed="{TemplateBinding IsPressed}">
              <ContentPresenter x:Name="HeaderContent"
                                HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                                SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
                                RecognizesAccessKey="True"/>
            </aero10:GridViewColumnHeaderChrome>
            <Canvas>
              <Thumb x:Name="PART_HeaderGripper"
                     Style="{StaticResource GridViewColumnHeaderGripper}"/>
            </Canvas>
          </Grid>
          <ControlTemplate.Triggers>
            <Trigger Property="IsPressed" Value="True">
              <Setter TargetName="PART_HeaderGripper" Property="Visibility" Value="Hidden"/>
            </Trigger>
            <Trigger Property="IsMouseOver" Value="True">
              <Setter TargetName="PART_HeaderGripper" Property="Background" Value="Transparent"/>
            </Trigger>
            <Trigger Property="Height" Value="Auto">
              <Setter Property="MinHeight" Value="20"/>
            </Trigger>
            <Trigger Property="IsEnabled" Value="False">
              <Setter Property="Foreground"
                      Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}"/>
            </Trigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
    <Style.Triggers>
      <Trigger Property="Role" Value="Floating">
        <Setter Property="Opacity" Value="0.408"/>
        <Setter Property="Template">
          <Setter.Value>
            <ControlTemplate TargetType="{x:Type GridViewColumnHeader}">
              <Canvas x:Name="PART_FloatingHeaderCanvas">
                <Rectangle Width="{TemplateBinding ActualWidth}"
                           Height="{TemplateBinding ActualHeight}"
                           Fill="#FF000000"
                           Opacity="0.469"/>
              </Canvas>
            </ControlTemplate>
          </Setter.Value>
        </Setter>
      </Trigger>
      <Trigger Property="Role" Value="Padding">
        <Setter Property="Template">
          <Setter.Value>
            <ControlTemplate TargetType="{x:Type GridViewColumnHeader}">
              <Border x:Name="HeaderBorder"
                      Background="{TemplateBinding Background}"
                      BorderBrush="{TemplateBinding BorderBrush}"
                      BorderThickness="0,1,0,1"/>
              <ControlTemplate.Triggers>
                <Trigger Property="Height" Value="Auto">
                  <Setter Property="MinHeight" Value="20"/>
                </Trigger>
              </ControlTemplate.Triggers>
            </ControlTemplate>
          </Setter.Value>
        </Setter>
      </Trigger>
    </Style.Triggers>
  </Style>

  <Style x:Key="GridViewItemStyle" TargetType="{x:Type ListViewItem}">
    <Setter Property="FocusVisualStyle" Value="{StaticResource ListBoxItem.FocusVisual}"/>
    <Setter Property="Background" Value="Transparent"/>
    <Setter Property="BorderBrush" Value="Transparent"/>
    <Setter Property="BorderThickness" Value="0"/>
    <Setter Property="Margin" Value="0"/>
    <Setter Property="Padding" Value="0,2"/>
    <Setter Property="VerticalContentAlignment" Value="Center"/>
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type ListViewItem}">
          <Border BorderBrush="{TemplateBinding BorderBrush}"
                  BorderThickness="{TemplateBinding BorderThickness}"
                  Background="{TemplateBinding Background}"
                  Padding="{TemplateBinding Padding}"
                  SnapsToDevicePixels="True"
                  HorizontalAlignment="Left">
            <GridViewRowPresenter
              VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
              SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"/>
          </Border>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
    <Style.Triggers>
      <MultiTrigger>
        <MultiTrigger.Conditions>
          <Condition Property="Selector.IsSelectionActive" Value="True"/>
          <Condition Property="IsSelected" Value="True"/>
        </MultiTrigger.Conditions>
        <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.HighlightTextBrushKey}}"/>
        <Setter Property="Background" Value="{DynamicResource {x:Static SystemColors.HighlightBrushKey}}"/>
        <Setter Property="BorderBrush" Value="{DynamicResource {x:Static SystemColors.HighlightBrushKey}}"/>
        <Setter Property="FocusVisualStyle" Value="{StaticResource ListBoxItem.HighlightFocusVisual}"/>
      </MultiTrigger>
      <MultiTrigger>
        <MultiTrigger.Conditions>
          <Condition Property="Selector.IsSelectionActive" Value="False"/>
          <Condition Property="IsSelected" Value="True"/>
        </MultiTrigger.Conditions>
        <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.InactiveSelectionHighlightTextBrushKey}}"/>
        <Setter Property="Background" Value="{DynamicResource {x:Static SystemColors.InactiveSelectionHighlightBrushKey}}"/>
        <Setter Property="BorderBrush" Value="{DynamicResource {x:Static SystemColors.InactiveSelectionHighlightBrushKey}}"/>
      </MultiTrigger>
      <Trigger Property="IsEnabled" Value="False">
        <Setter Property="TextElement.Foreground" Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}"/>
      </Trigger>
    </Style.Triggers>
  </Style>

  <Style x:Key="{x:Static GridView.GridViewScrollViewerStyleKey}" TargetType="{x:Type ScrollViewer}">
    <Setter Property="Focusable" Value="False"/>
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type ScrollViewer}">
          <Grid Background="{TemplateBinding Background}" SnapsToDevicePixels="True">
            <Grid.ColumnDefinitions>
              <ColumnDefinition Width="*"/>
              <ColumnDefinition Width="Auto"/>
            </Grid.ColumnDefinitions>
            <Grid.RowDefinitions>
              <RowDefinition Height="*"/>
              <RowDefinition Height="Auto"/>
            </Grid.RowDefinitions>
            <DockPanel Margin="{TemplateBinding Padding}">
              <ScrollViewer DockPanel.Dock="Top"
                            Focusable="False"
                            HorizontalScrollBarVisibility="Hidden"
                            VerticalScrollBarVisibility="Hidden">
                <GridViewHeaderRowPresenter
                  AllowsColumnReorder="{Binding TemplatedParent.View.AllowsColumnReorder, RelativeSource={RelativeSource TemplatedParent}}"
                  ColumnHeaderContainerStyle="{Binding TemplatedParent.View.ColumnHeaderContainerStyle, RelativeSource={RelativeSource TemplatedParent}}"
                  ColumnHeaderContextMenu="{Binding TemplatedParent.View.ColumnHeaderContextMenu, RelativeSource={RelativeSource TemplatedParent}}"
                  ColumnHeaderStringFormat="{Binding TemplatedParent.View.ColumnHeaderStringFormat, RelativeSource={RelativeSource TemplatedParent}}"
                  ColumnHeaderTemplate="{Binding TemplatedParent.View.ColumnHeaderTemplate, RelativeSource={RelativeSource TemplatedParent}}"
                  ColumnHeaderTemplateSelector="{Binding TemplatedParent.View.ColumnHeaderTemplateSelector, RelativeSource={RelativeSource TemplatedParent}}"
                  ColumnHeaderToolTip="{Binding TemplatedParent.View.ColumnHeaderToolTip, RelativeSource={RelativeSource TemplatedParent}}"
                  Columns="{Binding TemplatedParent.View.Columns, RelativeSource={RelativeSource TemplatedParent}}"
                  SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"/>
              </ScrollViewer>
              <ScrollContentPresenter
                x:Name="PART_ScrollContentPresenter"
                CanContentScroll="{TemplateBinding CanContentScroll}"
                Content="{TemplateBinding Content}"
                ContentTemplate="{TemplateBinding ContentTemplate}"
                SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
                KeyboardNavigation.DirectionalNavigation="Local"/>
            </DockPanel>
            <ScrollBar x:Name="PART_HorizontalScrollBar"
                       Grid.Row="1"
                       Cursor="Arrow"
                       Margin="0"
                       Minimum="0.0"
                       Maximum="{TemplateBinding ScrollableWidth}"
                       Orientation="Horizontal"
                       Value="{Binding HorizontalOffset, Mode=OneWay, RelativeSource={RelativeSource TemplatedParent}}"
                       ViewportSize="{TemplateBinding ViewportWidth}"
                       Visibility="{TemplateBinding ComputedHorizontalScrollBarVisibility}"/>
            <ScrollBar x:Name="PART_VerticalScrollBar"
                       Grid.Column="1"
                       Cursor="Arrow"
                       Margin="0"
                       Minimum="0.0"
                       Maximum="{TemplateBinding ScrollableHeight}"
                       Orientation="Vertical"
                       Value="{Binding VerticalOffset, Mode=OneWay, RelativeSource={RelativeSource TemplatedParent}}"
                       ViewportSize="{TemplateBinding ViewportHeight}"
                       Visibility="{TemplateBinding ComputedVerticalScrollBarVisibility}"/>
            <DockPanel Grid.Column="1" Grid.Row="1"
                       Background="{Binding Background, ElementName=PART_VerticalScrollBar}"
                       LastChildFill="False"/>
          </Grid>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>

  <ControlTemplate x:Key="GridViewTemplate" TargetType="{x:Type ListView}">
    <Border Background="{TemplateBinding Background}"
            BorderBrush="{TemplateBinding BorderBrush}"
            BorderThickness="{TemplateBinding BorderThickness}"
            Padding="{TemplateBinding Padding}"
            SnapsToDevicePixels="True">
      <ScrollViewer Style="{DynamicResource {x:Static GridView.GridViewScrollViewerStyleKey}}">
        <ItemsPresenter SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"/>
      </ScrollViewer>
    </Border>
    <ControlTemplate.Triggers>
      <Trigger Property="IsGrouping" Value="True">
        <Setter Property="ScrollViewer.CanContentScroll" Value="False"/>
      </Trigger>
    </ControlTemplate.Triggers>
  </ControlTemplate>

  <!--<Style x:Key="{x:Type ListView}" TargetType="{x:Type ListView}">
    <Setter Property="Background" Value="{StaticResource ListBox.Background.Normal}"/>
    <Setter Property="BorderBrush" Value="{StaticResource ListBox.Border.Normal}"/>
    <Setter Property="BorderThickness" Value="1"/>
    <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}"/>
    <Setter Property="Padding" Value="1"/>
    <Setter Property="ScrollViewer.HorizontalScrollBarVisibility" Value="Auto"/>
    <Setter Property="ScrollViewer.VerticalScrollBarVisibility" Value="Auto"/>
    <Setter Property="ScrollViewer.CanContentScroll" Value="True"/>
    <Setter Property="ScrollViewer.PanningMode" Value="Both"/>
    <Setter Property="Stylus.IsFlicksEnabled" Value="False"/>
    <Setter Property="VerticalContentAlignment" Value="Center"/>
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type ListView}">
          <Border Background="{TemplateBinding Background}"
                  BorderBrush="{TemplateBinding BorderBrush}"
                  BorderThickness="{TemplateBinding BorderThickness}"
                  Padding="{TemplateBinding Padding}"
                  SnapsToDevicePixels="True">
            <ScrollViewer Focusable="False">
              <ItemsPresenter SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"/>
            </ScrollViewer>
          </Border>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
    <Style.Triggers>
      <DataTrigger Binding="{Binding View, RelativeSource={RelativeSource Self}, Converter={StaticResource TypeOfConverter}}"
                   Value="{x:Type GridView}">
        <Setter Property="Template" Value="{StaticResource GridViewTemplate}"/>
        <Setter Property="ItemContainerStyle" Value="{StaticResource GridViewItemStyle}"/>
      </DataTrigger>
      <Trigger Property="IsEnabled" Value="False">
        <Setter Property="Background" Value="{StaticResource ListBox.Background.Disabled}"/>
        <Setter Property="BorderBrush" Value="{StaticResource ListBox.Border.Disabled}"/>
      </Trigger>
      <MultiTrigger>
        <MultiTrigger.Conditions>
          <Condition Property="IsGrouping" Value="True"/>
          <Condition Property="VirtualizingPanel.IsVirtualizingWhenGrouping" Value="False"/>
        </MultiTrigger.Conditions>
        <Setter Property="ScrollViewer.CanContentScroll" Value="False"/>
      </MultiTrigger>
    </Style.Triggers>
  </Style>

  <Style x:Key="{x:Static GridView.GridViewItemContainerStyleKey}" TargetType="{x:Type ListViewItem}"
         BasedOn="{StaticResource GridViewItemStyle}"/>
  <Style x:Key="{x:Static GridView.GridViewStyleKey}" TargetType="{x:Type ListView}"
         BasedOn="{StaticResource GridViewStyle}"/>
  -->

  <Style x:Key="{x:Static GridView.GridViewItemContainerStyleKey}" TargetType="{x:Type ListViewItem}"
         BasedOn="{StaticResource GridViewItemStyle}"/>

  <Style x:Key="{x:Static GridView.GridViewStyleKey}" TargetType="{x:Type ListView}">
    <Setter Property="Background" Value="{StaticResource ListBox.Background.Normal}"/>
    <Setter Property="BorderBrush" Value="{StaticResource ListBox.Border.Normal}"/>
    <Setter Property="BorderThickness" Value="1"/>
    <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}"/>
    <Setter Property="Padding" Value="1"/>
    <Setter Property="ScrollViewer.HorizontalScrollBarVisibility" Value="Auto"/>
    <Setter Property="ScrollViewer.VerticalScrollBarVisibility" Value="Auto"/>
    <Setter Property="ScrollViewer.CanContentScroll" Value="True"/>
    <Setter Property="ScrollViewer.PanningMode" Value="Both"/>
    <Setter Property="Stylus.IsFlicksEnabled" Value="False"/>
    <Setter Property="VerticalContentAlignment" Value="Center"/>
    <Setter Property="Template" Value="{StaticResource GridViewTemplate}"/>
    <Style.Triggers>
      <Trigger Property="IsEnabled" Value="False">
        <Setter Property="Background" Value="{StaticResource ListBox.Background.Disabled}"/>
        <Setter Property="BorderBrush" Value="{StaticResource ListBox.Border.Disabled}"/>
      </Trigger>
      <MultiTrigger>
        <MultiTrigger.Conditions>
          <Condition Property="IsGrouping" Value="True"/>
          <Condition Property="VirtualizingPanel.IsVirtualizingWhenGrouping" Value="False"/>
        </MultiTrigger.Conditions>
        <Setter Property="ScrollViewer.CanContentScroll" Value="False"/>
      </MultiTrigger>
    </Style.Triggers>
  </Style>

  <SolidColorBrush x:Key="ExplorerListViewItem.Background.Normal">Transparent</SolidColorBrush>
  <SolidColorBrush x:Key="ExplorerListViewItem.Background.Hot">#1A0089FF</SolidColorBrush>
  <SolidColorBrush x:Key="ExplorerListViewItem.Border.Hot">#1A0089FF</SolidColorBrush>
  <SolidColorBrush x:Key="ExplorerListViewItem.Background.Selected">#32008AFF</SolidColorBrush>
  <SolidColorBrush x:Key="ExplorerListViewItem.Border.Selected">#32008AFF</SolidColorBrush>
  <SolidColorBrush x:Key="ExplorerListViewItem.Background.HotSelected">#33008CFF</SolidColorBrush>
  <SolidColorBrush x:Key="ExplorerListViewItem.Border.HotSelected">#66008CFF</SolidColorBrush>
  <SolidColorBrush x:Key="ExplorerListViewItem.Background.SelectedNotFocus">#26000000</SolidColorBrush>
  <SolidColorBrush x:Key="ExplorerListViewItem.Border.SelectedNotFocus">#26000000</SolidColorBrush>

  <Style x:Key="{x:Static aero10:ExplorerStyles.ListViewItemStyleKey}" TargetType="{x:Type ListViewItem}">
    <Setter Property="FocusVisualStyle" Value="{StaticResource ListBoxItem.FocusVisual}"/>
    <Setter Property="Background" Value="Transparent"/>
    <Setter Property="BorderBrush" Value="Transparent"/>
    <Setter Property="BorderThickness" Value="1"/>
    <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}"/>
    <Setter Property="Margin" Value="0"/>
    <Setter Property="Padding" Value="0,2"/>
    <Setter Property="VerticalContentAlignment" Value="Center"/>
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type ListViewItem}">
          <Border BorderBrush="{TemplateBinding BorderBrush}"
                  BorderThickness="{TemplateBinding BorderThickness}"
                  Background="{TemplateBinding Background}"
                  Padding="{TemplateBinding Padding}"
                  SnapsToDevicePixels="True"
                  HorizontalAlignment="Left">
            <GridViewRowPresenter
              Margin="-1"
              VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
              SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"/>
          </Border>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
    <Style.Triggers>
      <MultiTrigger>
        <MultiTrigger.Conditions>
          <Condition Property="IsMouseOver" Value="True"/>
          <Condition Property="IsSelected" Value="True"/>
        </MultiTrigger.Conditions>
        <Setter Property="Background" Value="{StaticResource ExplorerListViewItem.Background.HotSelected}"/>
        <Setter Property="BorderBrush" Value="{StaticResource ExplorerListViewItem.Border.HotSelected}"/>
      </MultiTrigger>
      <MultiTrigger>
        <MultiTrigger.Conditions>
          <Condition Property="IsMouseOver" Value="True"/>
          <Condition Property="IsSelected" Value="False"/>
        </MultiTrigger.Conditions>
        <Setter Property="Background" Value="{StaticResource ExplorerListViewItem.Background.Hot}"/>
        <Setter Property="BorderBrush" Value="{StaticResource ExplorerListViewItem.Border.Hot}"/>
      </MultiTrigger>
      <MultiTrigger>
        <MultiTrigger.Conditions>
          <Condition Property="IsMouseOver" Value="False"/>
          <Condition Property="IsSelected" Value="True"/>
        </MultiTrigger.Conditions>
        <Setter Property="Background" Value="{StaticResource ExplorerListViewItem.Background.Selected}"/>
        <Setter Property="BorderBrush" Value="{StaticResource ExplorerListViewItem.Border.Selected}"/>
      </MultiTrigger>
      <MultiTrigger>
        <MultiTrigger.Conditions>
          <Condition Property="IsSelected" Value="True"/>
          <Condition Property="Selector.IsSelectionActive" Value="False"/>
        </MultiTrigger.Conditions>
        <Setter Property="Background" Value="{StaticResource ExplorerListViewItem.Background.SelectedNotFocus}"/>
        <Setter Property="BorderBrush" Value="{StaticResource ExplorerListViewItem.Border.SelectedNotFocus}"/>
      </MultiTrigger>
      <Trigger Property="IsEnabled" Value="False">
        <Setter Property="Foreground"
                Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}"/>
      </Trigger>
    </Style.Triggers>
  </Style>

  <Style x:Key="{x:Static aero10:ExplorerStyles.ListViewStyleKey}" TargetType="{x:Type ListView}"
         BasedOn="{StaticResource {x:Static GridView.GridViewStyleKey}}">
    <Style.Resources>
      <Style TargetType="{x:Type ListViewItem}"
             BasedOn="{StaticResource {x:Static aero10:ExplorerStyles.ListViewItemStyleKey}}"/>
    </Style.Resources>
    <Style.Triggers>
      <!--<DataTrigger Binding="{Binding View, RelativeSource={RelativeSource Self}, Converter={StaticResource TypeOfConverter}}"
                   Value="{x:Type GridView}">
        <Setter Property="Template" Value="{StaticResource GridViewTemplate}"/>
        <Setter Property="ItemContainerStyle" Value="{StaticResource {x:Static aero10:ExplorerStyles.ListViewItemStyleKey}}"/>
      </DataTrigger>-->
    </Style.Triggers>
  </Style>

  <!-- Menu ================================================================ -->

  <SolidColorBrush x:Key="Menu.BarBackground.Background" Color="#FFFFFFFF" po:Freeze="True"/>
  <SolidColorBrush x:Key="Menu.BarBackground.Border" Color="#FFF2F2F2" po:Freeze="True"/>

  <SolidColorBrush x:Key="Menu.BarItem.Normal.Foreground" Color="#FF000000" po:Freeze="True"/>
  <SolidColorBrush x:Key="Menu.BarItem.Hot.Background" Color="#1A0089FF" po:Freeze="True"/>
  <SolidColorBrush x:Key="Menu.BarItem.Hot.Border" Color="#33008BFF" po:Freeze="True"/>
  <SolidColorBrush x:Key="Menu.BarItem.Pressed.Background" Color="#33008BFF" po:Freeze="True"/>
  <SolidColorBrush x:Key="Menu.BarItem.Pressed.Border" Color="#66008BFF" po:Freeze="True"/>
  <SolidColorBrush x:Key="Menu.BarItem.Disabled.Foreground" Color="#FF707070" po:Freeze="True"/>

  <SolidColorBrush x:Key="Menu.Popup.Background" Color="#FFF2F2F2" po:Freeze="True"/>
  <SolidColorBrush x:Key="Menu.Popup.Border" Color="#FFCCCCCC" po:Freeze="True"/>

  <SolidColorBrush x:Key="Menu.PopupItem.Normal.Foreground" Color="#FF000000" po:Freeze="True"/>
  <SolidColorBrush x:Key="Menu.PopupItem.Selected.Background" Color="#3D269FD9" po:Freeze="True"/>
  <SolidColorBrush x:Key="Menu.PopupItem.Selected.Border" Color="#FF26A0DA" po:Freeze="True"/>
  <SolidColorBrush x:Key="Menu.PopupItem.Hot.Background" Color="#66008BFF" po:Freeze="True"/>
  <SolidColorBrush x:Key="Menu.PopupItem.Hot.Border" Color="#66008BFF" po:Freeze="True"/>
  <SolidColorBrush x:Key="Menu.PopupItem.Disabled.Foreground" Color="#FF707070" po:Freeze="True"/>
  <SolidColorBrush x:Key="Menu.PopupItem.DisabledHot.Background" Color="#0D000000" po:Freeze="True"/>
  <SolidColorBrush x:Key="Menu.PopupItem.DisabledHot.Border" Color="#0D000000" po:Freeze="True"/>

  <SolidColorBrush x:Key="Menu.PopupSeparator" Color="#FFD7D7D7" po:Freeze="True"/>
  <SolidColorBrush x:Key="Menu.PopupGutter.Background" Color="#FFF0F0F0" po:Freeze="True"/>
  <SolidColorBrush x:Key="Menu.PopupGutter.Border" Color="#FFF0F0F0" po:Freeze="True"/>

  <SolidColorBrush x:Key="Menu.PopupCheckBackground.Normal.Background" Color="#66008BFF" po:Freeze="True"/>
  <SolidColorBrush x:Key="Menu.PopupCheckBackground.Normal.Border" Color="#66008BFF" po:Freeze="True"/>
  <SolidColorBrush x:Key="Menu.PopupCheckBackground.Disabled.Background" Color="#0D000000" po:Freeze="True"/>
  <SolidColorBrush x:Key="Menu.PopupCheckBackground.Disabled.Border" Color="#0D000000" po:Freeze="True"/>
  <SolidColorBrush x:Key="Menu.PopupCheck.Normal.Foreground" Color="#FF333333" po:Freeze="True"/>
  <SolidColorBrush x:Key="Menu.PopupCheck.Disabled.Foreground" Color="#FFA3A3A3" po:Freeze="True"/>

  <MenuScrollingVisibilityConverter x:Key="MenuScrollingVisibilityConverter"/>
  <Geometry x:Key="Menu.DownArrowGlyph">M 0,0 3.5,4 7,0 z</Geometry>
  <Geometry x:Key="Menu.UpArrowGlyph">M 0,4 3.5,0 7,4 z</Geometry>
  <Geometry x:Key="Menu.RightArrowGlyph">M 0,-0.5 3.5,3 0,6.5 -0.5,6 2.5,3 -0.5,0 z</Geometry>
  <Geometry x:Key="Menu.CheckmarkGlyph">F1 M 4.1875,6.6875 6.6875,9.1875 12.4375,3.4375 13.3125,4.3125 6.5625,11.0625 3.1875,7.6875 z</Geometry>

  <ControlTemplate x:Key="{ComponentResourceKey {x:Type FrameworkElement}, SubmenuContent}"
                   TargetType="{x:Type ContentControl}">
    <Border Background="{TemplateBinding Menu.Background}"
            BorderBrush="{TemplateBinding Menu.BorderBrush}"
            BorderThickness="1"
            Padding="2">
      <Border Background="{StaticResource Menu.Popup.Background}">
        <ContentPresenter/>
      </Border>
    </Border>
  </ControlTemplate>

  <Style x:Key="MenuScrollButton" TargetType="{x:Type RepeatButton}" BasedOn="{x:Null}">
    <Setter Property="ClickMode" Value="Hover"/>
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type RepeatButton}">
          <Border x:Name="TemplateRoot"
                  SnapsToDevicePixels="True"
                  Background="Transparent"
                  BorderBrush="Transparent"
                  BorderThickness="1">
            <ContentPresenter Margin="6"
                              HorizontalAlignment="Center"
                              VerticalAlignment="Center"/>
          </Border>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>

  <Style x:Key="{ComponentResourceKey {x:Type FrameworkElement}, MenuScrollViewer}"
         TargetType="{x:Type ScrollViewer}" BasedOn="{x:Null}">
    <Setter Property="HorizontalScrollBarVisibility" Value="Hidden"/>
    <Setter Property="VerticalScrollBarVisibility" Value="Auto"/>
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type ScrollViewer}">
          <Grid SnapsToDevicePixels="True">
            <Grid.ColumnDefinitions>
              <ColumnDefinition Width="*"/>
            </Grid.ColumnDefinitions>
            <Grid.RowDefinitions>
              <RowDefinition Height="Auto"/>
              <RowDefinition Height="*"/>
              <RowDefinition Height="Auto"/>
            </Grid.RowDefinitions>
            <Border Grid.Row="1">
              <ScrollContentPresenter
                Margin="{TemplateBinding Padding}"
                CanContentScroll="{TemplateBinding CanContentScroll}"/>
            </Border>
            <RepeatButton Style="{StaticResource MenuScrollButton}"
                          Command="{x:Static ScrollBar.LineUpCommand}"
                          CommandTarget="{Binding RelativeSource={RelativeSource TemplatedParent}}"
                          Focusable="False">
              <RepeatButton.Visibility>
                <MultiBinding ConverterParameter="0"
                              Converter="{StaticResource MenuScrollingVisibilityConverter}"
                              FallbackValue="Visibility.Collapsed">
                  <Binding Path="ComputedVerticalScrollBarVisibility"
                           RelativeSource="{RelativeSource TemplatedParent}"/>
                  <Binding Path="VerticalOffset" RelativeSource="{RelativeSource TemplatedParent}"/>
                  <Binding Path="ExtentHeight" RelativeSource="{RelativeSource TemplatedParent}"/>
                  <Binding Path="ViewportHeight" RelativeSource="{RelativeSource TemplatedParent}"/>
                </MultiBinding>
              </RepeatButton.Visibility>
              <Path Data="{StaticResource Menu.UpArrowGlyph}"
                    Fill="{StaticResource Menu.PopupItem.Normal.Foreground}"/>
            </RepeatButton>
            <RepeatButton Grid.Row="2"
                          Style="{StaticResource MenuScrollButton}"
                          Command="{x:Static ScrollBar.LineDownCommand}"
                          CommandTarget="{Binding RelativeSource={RelativeSource TemplatedParent}}"
                          Focusable="False">
              <RepeatButton.Visibility>
                <MultiBinding ConverterParameter="100"
                              Converter="{StaticResource MenuScrollingVisibilityConverter}"
                              FallbackValue="Visibility.Collapsed">
                  <Binding Path="ComputedVerticalScrollBarVisibility"
                           RelativeSource="{RelativeSource TemplatedParent}"/>
                  <Binding Path="VerticalOffset" RelativeSource="{RelativeSource TemplatedParent}"/>
                  <Binding Path="ExtentHeight" RelativeSource="{RelativeSource TemplatedParent}"/>
                  <Binding Path="ViewportHeight" RelativeSource="{RelativeSource TemplatedParent}"/>
                </MultiBinding>
              </RepeatButton.Visibility>
              <Path Data="{StaticResource Menu.DownArrowGlyph}"
                    Fill="{StaticResource Menu.PopupItem.Normal.Foreground}"/>
            </RepeatButton>
          </Grid>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>

  <Style x:Key="{x:Static MenuItem.SeparatorStyleKey}" TargetType="{x:Type Separator}">
    <Setter Property="Background" Value="{StaticResource Menu.PopupSeparator}"/>
    <Setter Property="BorderBrush" Value="{StaticResource Menu.PopupSeparator}"/>
    <Setter Property="MinHeight" Value="7"/>
    <Setter Property="SnapsToDevicePixels" Value="True"/>
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type Separator}">
          <Border Background="{TemplateBinding Background}"
                  BorderBrush="{TemplateBinding BorderBrush}"
                  BorderThickness="{TemplateBinding BorderThickness}"
                  Margin="28,3,0,3"/>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>

  <Style x:Key="{x:Type Separator}" TargetType="{x:Type Separator}">
    <Setter Property="Background" Value="{StaticResource Menu.PopupSeparator}"/>
    <Setter Property="BorderBrush" Value="{StaticResource Menu.PopupSeparator}"/>
    <Setter Property="MinHeight" Value="3"/>
    <Setter Property="SnapsToDevicePixels" Value="True"/>
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate>
          <Border Background="{TemplateBinding Background}"
                  BorderBrush="{TemplateBinding BorderBrush}"
                  BorderThickness="{TemplateBinding BorderThickness}"
                  Margin="28,1,0,1"/>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>

  <ControlTemplate x:Key="{ComponentResourceKey {x:Type MenuItem}, TopLevelItemTemplateKey}"
                   TargetType="{x:Type MenuItem}">
    <Border x:Name="TemplateRoot"
            SnapsToDevicePixels="True"
            BorderThickness="{TemplateBinding BorderThickness}"
            Background="{TemplateBinding Background}"
            BorderBrush="{TemplateBinding BorderBrush}">
      <Grid VerticalAlignment="Center">
        <Grid.ColumnDefinitions>
          <ColumnDefinition Width="Auto"/>
          <ColumnDefinition Width="Auto"/>
        </Grid.ColumnDefinitions>
        <ContentPresenter x:Name="Icon"
                          ContentSource="Icon"
                          SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
                          VerticalAlignment="Center"
                          HorizontalAlignment="Center"
                          Width="16"
                          Height="16"
                          Margin="2"/>
        <Path x:Name="GlyphBorder"
              Data="{StaticResource Menu.CheckmarkGlyph}"
              FlowDirection="LeftToRight"
              Margin="2,-2"
              Width="16"
              Height="16"
              Visibility="Collapsed"
              VerticalAlignment="Center"
              Fill="{StaticResource Menu.PopupCheck.Normal.Foreground}"/>
        <ContentPresenter Grid.Column="1"
                          ContentSource="Header"
                          RecognizesAccessKey="True"
                          Margin="{TemplateBinding Padding}"
                          SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"/>
      </Grid>
    </Border>
    <ControlTemplate.Triggers>
      <Trigger Property="Icon" Value="{x:Null}">
        <Setter TargetName="Icon" Property="Visibility" Value="Collapsed"/>
      </Trigger>
      <Trigger Property="IsChecked" Value="True">
        <Setter TargetName="GlyphBorder" Property="Visibility" Value="Visible"/>
        <Setter TargetName="Icon" Property="Visibility" Value="Collapsed"/>
      </Trigger>
      <MultiDataTrigger>
        <MultiDataTrigger.Conditions>
          <Condition Binding="{Binding IsActive, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type Window}}}"
                     Value="False"/>
          <Condition Binding="{Binding IsMouseOver, RelativeSource={RelativeSource Self}}"
                     Value="False"/>
        </MultiDataTrigger.Conditions>
        <MultiDataTrigger.Setters>
          <Setter TargetName="TemplateRoot" Property="TextElement.Foreground"
                  Value="{StaticResource Menu.BarItem.Disabled.Foreground}"/>
          <Setter TargetName="GlyphBorder" Property="Fill"
                  Value="{StaticResource Menu.BarItem.Disabled.Foreground}"/>
        </MultiDataTrigger.Setters>
      </MultiDataTrigger>
      <Trigger Property="IsMouseOver" Value="True">
        <Setter TargetName="TemplateRoot" Property="Background"
                Value="{StaticResource Menu.BarItem.Hot.Background}"/>
        <Setter TargetName="TemplateRoot" Property="BorderBrush"
                Value="{StaticResource Menu.BarItem.Hot.Border}"/>
      </Trigger>
      <Trigger Property="IsSubmenuOpen" Value="True">
        <Setter TargetName="TemplateRoot" Property="Background"
                Value="{StaticResource Menu.BarItem.Pressed.Background}"/>
        <Setter TargetName="TemplateRoot" Property="BorderBrush"
                Value="{StaticResource Menu.BarItem.Pressed.Border}"/>
      </Trigger>
      <Trigger Property="IsPressed" Value="True">
        <Setter TargetName="TemplateRoot" Property="Background"
                Value="{StaticResource Menu.BarItem.Pressed.Background}"/>
        <Setter TargetName="TemplateRoot" Property="BorderBrush"
                Value="{StaticResource Menu.BarItem.Pressed.Border}"/>
      </Trigger>
      <Trigger Property="IsEnabled" Value="False">
        <Setter TargetName="TemplateRoot" Property="TextElement.Foreground"
                Value="{StaticResource Menu.BarItem.Disabled.Foreground}"/>
        <Setter TargetName="GlyphBorder" Property="Fill"
                Value="{StaticResource Menu.BarItem.Disabled.Foreground}"/>
      </Trigger>
    </ControlTemplate.Triggers>
  </ControlTemplate>

  <ControlTemplate x:Key="{ComponentResourceKey {x:Type MenuItem}, TopLevelHeaderTemplateKey}"
                   TargetType="{x:Type MenuItem}">
    <Border x:Name="TemplateRoot"
            SnapsToDevicePixels="True"
            BorderThickness="{TemplateBinding BorderThickness}"
            Background="{TemplateBinding Background}"
            BorderBrush="{TemplateBinding BorderBrush}">
      <Grid VerticalAlignment="Center">
        <Grid.ColumnDefinitions>
          <ColumnDefinition Width="Auto"/>
          <ColumnDefinition Width="Auto"/>
        </Grid.ColumnDefinitions>
        <ContentPresenter x:Name="Icon"
                          ContentSource="Icon"
                          SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
                          VerticalAlignment="Center"
                          HorizontalAlignment="Center"
                          Width="16"
                          Height="16"
                          Margin="2"/>
        <Path x:Name="GlyphBorder"
              Data="{StaticResource Menu.CheckmarkGlyph}"
              FlowDirection="LeftToRight"
              Margin="2"
              Width="16"
              Height="16"
              Visibility="Collapsed"
              VerticalAlignment="Center"
              Fill="{TemplateBinding Menu.Foreground}"/>
        <ContentPresenter Grid.Column="1"
                          ContentSource="Header"
                          RecognizesAccessKey="True"
                          Margin="{TemplateBinding Padding}"
                          SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"/>
        <Popup x:Name="PART_Popup"
               AllowsTransparency="True"
               Focusable="False"
               IsOpen="{Binding IsSubmenuOpen, RelativeSource={RelativeSource TemplatedParent}}"
               PopupAnimation="{DynamicResource {x:Static SystemParameters.MenuPopupAnimationKey}}"
               Placement="Bottom"
               PlacementTarget="{Binding ElementName=TemplateRoot}">
          <aero10:SystemDropShadowChrome x:Name="Shdw" Color="Transparent">
            <Border x:Name="SubMenuBorder"
                    Background="{StaticResource Menu.Popup.Background}"
                    BorderBrush="{StaticResource Menu.Popup.Border}"
                    BorderThickness="1"
                    Padding="2">
              <ScrollViewer x:Name="SubMenuScrollViewer"
                            Style="{DynamicResource {ComponentResourceKey {x:Type FrameworkElement}, MenuScrollViewer}}">
                <Grid RenderOptions.ClearTypeHint="Enabled">
                  <Canvas Height="0" Width="0" HorizontalAlignment="Left" VerticalAlignment="Top">
                    <Rectangle
                      x:Name="OpaqueRect"
                      Height="{Binding ActualHeight, ElementName=SubMenuBorder}"
                      Width="{Binding ActualWidth, ElementName=SubMenuBorder}"
                      Fill="{Binding Background, ElementName=SubMenuBorder}"/>
                  </Canvas>
                  <Border x:Name="PopupGutter"
                          HorizontalAlignment="Left"
                          Width="28"
                          Background="{StaticResource Menu.PopupGutter.Background}"
                          BorderBrush="{StaticResource Menu.PopupGutter.Border}"
                          BorderThickness="0,0,1,0"/>
                  <ItemsPresenter x:Name="ItemsPresenter"
                                  KeyboardNavigation.DirectionalNavigation="Cycle"
                                  KeyboardNavigation.TabNavigation="Cycle"
                                  Grid.IsSharedSizeScope="True"
                                  SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"/>
                </Grid>
              </ScrollViewer>
            </Border>
          </aero10:SystemDropShadowChrome>
        </Popup>
      </Grid>
    </Border>
    <ControlTemplate.Triggers>
      <Trigger Property="IsSuspendingPopupAnimation" Value="True">
        <Setter TargetName="PART_Popup" Property="PopupAnimation" Value="None"/>
      </Trigger>
      <Trigger Property="Icon" Value="{x:Null}">
        <Setter TargetName="Icon" Property="Visibility" Value="Collapsed"/>
      </Trigger>
      <Trigger Property="IsChecked" Value="True">
        <Setter TargetName="GlyphBorder" Property="Visibility" Value="Visible"/>
        <Setter TargetName="Icon" Property="Visibility" Value="Collapsed"/>
      </Trigger>
      <MultiDataTrigger>
        <MultiDataTrigger.Conditions>
          <Condition Binding="{Binding IsActive, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type Window}}}"
                     Value="False"/>
          <Condition Binding="{Binding IsMouseOver, RelativeSource={RelativeSource Self}}"
                     Value="False"/>
        </MultiDataTrigger.Conditions>
        <MultiDataTrigger.Setters>
          <Setter TargetName="TemplateRoot" Property="TextElement.Foreground"
                  Value="{StaticResource Menu.BarItem.Disabled.Foreground}"/>
          <Setter TargetName="GlyphBorder" Property="Fill"
                  Value="{StaticResource Menu.BarItem.Disabled.Foreground}"/>
        </MultiDataTrigger.Setters>
      </MultiDataTrigger>
      <Trigger Property="IsMouseOver" Value="True">
        <Setter TargetName="TemplateRoot" Property="Background"
                Value="{StaticResource Menu.BarItem.Hot.Background}"/>
        <Setter TargetName="TemplateRoot" Property="BorderBrush"
                Value="{StaticResource Menu.BarItem.Hot.Border}"/>
      </Trigger>
      <Trigger Property="IsSubmenuOpen" Value="True">
        <Setter TargetName="TemplateRoot" Property="Background"
                Value="{StaticResource Menu.BarItem.Pressed.Background}"/>
        <Setter TargetName="TemplateRoot" Property="BorderBrush"
                Value="{StaticResource Menu.BarItem.Pressed.Border}"/>
      </Trigger>
      <Trigger Property="IsPressed" Value="True">
        <Setter TargetName="TemplateRoot" Property="Background"
                Value="{StaticResource Menu.BarItem.Pressed.Background}"/>
        <Setter TargetName="TemplateRoot" Property="BorderBrush"
                Value="{StaticResource Menu.BarItem.Pressed.Border}"/>
      </Trigger>
      <Trigger Property="IsEnabled" Value="False">
        <Setter TargetName="TemplateRoot" Property="TextElement.Foreground"
                Value="{StaticResource Menu.BarItem.Disabled.Foreground}"/>
        <Setter TargetName="GlyphBorder" Property="Fill"
                Value="{StaticResource Menu.BarItem.Disabled.Foreground}"/>
      </Trigger>
      <Trigger SourceName="PART_Popup" Property="Popup.HasDropShadow" Value="True">
        <Setter TargetName="Shdw" Property="Margin" Value="0,0,5,5"/>
        <Setter TargetName="Shdw" Property="Color" Value="#71000000"/>
      </Trigger>
      <Trigger SourceName="SubMenuScrollViewer" Property="ScrollViewer.CanContentScroll" Value="False">
        <Setter TargetName="OpaqueRect" Property="Canvas.Top"
                Value="{Binding VerticalOffset, ElementName=SubMenuScrollViewer}"/>
        <Setter TargetName="OpaqueRect" Property="Canvas.Left"
                Value="{Binding HorizontalOffset, ElementName=SubMenuScrollViewer}"/>
      </Trigger>
    </ControlTemplate.Triggers>
  </ControlTemplate>

  <ControlTemplate x:Key="{ComponentResourceKey {x:Type MenuItem}, SubmenuItemTemplateKey}"
                   TargetType="{x:Type MenuItem}">
    <Border x:Name="TemplateRoot"
            SnapsToDevicePixels="True"
            Height="22"
            BorderThickness="{TemplateBinding BorderThickness}"
            Background="{TemplateBinding Background}"
            BorderBrush="{TemplateBinding BorderBrush}">
      <Grid>
        <Grid.ColumnDefinitions>
          <ColumnDefinition Width="Auto" MinWidth="20" SharedSizeGroup="MenuItemIconColumnGroup"/>
          <ColumnDefinition Width="11"/>
          <ColumnDefinition Width="*" MinWidth="11"/>
          <ColumnDefinition Width="34"/>
          <ColumnDefinition Width="Auto" SharedSizeGroup="MenuItemIGTColumnGroup"/>
          <ColumnDefinition Width="17" SharedSizeGroup="MenuItemArrowColumnGroup"/>
        </Grid.ColumnDefinitions>
        <ContentPresenter x:Name="Icon"
                          ContentSource="Icon"
                          SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
                          VerticalAlignment="Center"
                          HorizontalAlignment="Left"
                          Width="16"
                          Height="16"
                          Margin="2"/>
        <Border x:Name="GlyphBorder"
                Visibility="Hidden"
                Height="22"
                Width="22"
                VerticalAlignment="Center"
                HorizontalAlignment="Center"
                Background="{StaticResource Menu.PopupCheckBackground.Normal.Background}"
                BorderBrush="{StaticResource Menu.PopupCheckBackground.Normal.Border}"
                BorderThickness="1"
                ClipToBounds="False"
                Margin="-1">
          <Path x:Name="Glyph"
                Data="{StaticResource Menu.CheckmarkGlyph}"
                FlowDirection="LeftToRight"
                Height="16"
                Width="16"
                Margin="2"
                HorizontalAlignment="Left"
                VerticalAlignment="Top"
                Fill="{StaticResource Menu.PopupCheck.Normal.Foreground}"/>
        </Border>
        <Border x:Name="MenuHeaderContainer"
                Grid.Column="2"
                Margin="0"
                SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}">
          <ContentPresenter HorizontalAlignment="Left"
                            VerticalAlignment="Center"
                            ContentSource="Header"
                            RecognizesAccessKey="True"
                            Margin="{TemplateBinding Padding}"
                            SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"/>
        </Border>
        <Border x:Name="MenuGestureContainer" Grid.Column="4" Margin="0">
          <TextBlock Text="{TemplateBinding InputGestureText}"
                     Margin="{TemplateBinding Padding}"
                     VerticalAlignment="Center"/>
        </Border>
      </Grid>
    </Border>
    <ControlTemplate.Triggers>
      <DataTrigger Binding="{Binding Header, RelativeSource={RelativeSource Self}, Converter={StaticResource TypeOfConverter}}"
                   Value="{x:Type system:String}">
        <Setter TargetName="MenuHeaderContainer" Property="Margin" Value="0,-1,0,0"/>
        <Setter TargetName="MenuGestureContainer" Property="Margin" Value="0,-1,0,0"/>
      </DataTrigger>
      <Trigger Property="Icon" Value="{x:Null}">
        <Setter TargetName="Icon" Property="Visibility" Value="Collapsed"/>
      </Trigger>
      <Trigger Property="IsChecked" Value="True">
        <Setter TargetName="GlyphBorder" Property="Visibility" Value="Visible"/>
        <Setter TargetName="Icon" Property="Visibility" Value="Collapsed"/>
      </Trigger>
      <Trigger Property="IsHighlighted" Value="True">
        <Setter TargetName="TemplateRoot" Property="Background"
                Value="{StaticResource Menu.PopupItem.Hot.Background}"/>
        <Setter TargetName="TemplateRoot" Property="BorderBrush"
                Value="{StaticResource Menu.PopupItem.Hot.Border}"/>
      </Trigger>
      <MultiTrigger>
        <MultiTrigger.Conditions>
          <Condition Property="IsEnabled" Value="False"/>
          <Condition Property="IsHighlighted" Value="True"/>
        </MultiTrigger.Conditions>
        <MultiTrigger.Setters>
          <Setter TargetName="TemplateRoot" Property="Background"
                Value="{StaticResource Menu.PopupItem.DisabledHot.Background}"/>
          <Setter TargetName="TemplateRoot" Property="BorderBrush"
                Value="{StaticResource Menu.PopupItem.DisabledHot.Border}"/>
        </MultiTrigger.Setters>
      </MultiTrigger>
      <Trigger Property="IsEnabled" Value="False">
        <Setter TargetName="TemplateRoot" Property="TextElement.Foreground"
                Value="{StaticResource Menu.PopupItem.Disabled.Foreground}"/>
        <Setter TargetName="Glyph" Property="Fill"
                Value="{StaticResource Menu.PopupCheck.Disabled.Foreground}"/>
        <Setter TargetName="GlyphBorder" Property="Background"
                Value="{StaticResource Menu.PopupCheckBackground.Disabled.Background}"/>
        <Setter TargetName="GlyphBorder" Property="BorderBrush"
                Value="{StaticResource Menu.PopupCheckBackground.Disabled.Border}"/>
      </Trigger>
    </ControlTemplate.Triggers>
  </ControlTemplate>

  <ControlTemplate x:Key="{ComponentResourceKey {x:Type MenuItem}, SubmenuHeaderTemplateKey}"
                   TargetType="{x:Type MenuItem}">
    <Border x:Name="TemplateRoot"
            SnapsToDevicePixels="True"
            Height="22"
            BorderThickness="{TemplateBinding BorderThickness}"
            Background="{TemplateBinding Background}"
            BorderBrush="{TemplateBinding BorderBrush}">
      <Grid>
        <Grid.ColumnDefinitions>
          <ColumnDefinition Width="Auto" MinWidth="20" SharedSizeGroup="MenuItemIconColumnGroup"/>
          <ColumnDefinition Width="11"/>
          <ColumnDefinition Width="*" MinWidth="11"/>
          <ColumnDefinition Width="34"/>
          <ColumnDefinition Width="Auto" SharedSizeGroup="MenuItemIGTColumnGroup"/>
          <ColumnDefinition Width="17" SharedSizeGroup="MenuItemArrowColumnGroup"/>
        </Grid.ColumnDefinitions>
        <ContentPresenter x:Name="Icon"
                          ContentSource="Icon"
                          SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
                          VerticalAlignment="Center"
                          HorizontalAlignment="Center"
                          Width="16"
                          Height="16"
                          Margin="2"/>
        <Border x:Name="GlyphBorder"
                BorderThickness="1"
                Height="22"
                Width="22"
                Visibility="Hidden"
                VerticalAlignment="Center"
                Margin="-1,-1,-1,-1"
                BorderBrush="{StaticResource Menu.PopupItem.Hot.Border}"
                Background="{StaticResource Menu.PopupItem.Hot.Background}">
          <Path x:Name="Glyph"
                Data="{StaticResource Menu.CheckmarkGlyph}"
                FlowDirection="LeftToRight"
                Height="16"
                Width="16"
                Fill="{StaticResource Menu.PopupCheck.Normal.Foreground}"/>
        </Border>
        <Border x:Name="MenuHeaderContainer"
                Grid.Column="2"
                Margin="0,-1,0,0"
                SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}">
          <ContentPresenter HorizontalAlignment="Left"
                            VerticalAlignment="Center"
                            ContentSource="Header"
                            RecognizesAccessKey="True"
                            Margin="{TemplateBinding Padding}"
                            SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"/>
        </Border>
        <Border x:Name="MenuGestureContainer" Grid.Column="4" Margin="0,-1,0,0">
          <TextBlock Text="{TemplateBinding InputGestureText}"
                     Margin="{TemplateBinding Padding}"
                     VerticalAlignment="Center"/>
        </Border>
        <Path x:Name="RightArrow"
              Grid.Column="5"
              Data="{StaticResource Menu.RightArrowGlyph}"
              Margin="5,0,0,1"
              VerticalAlignment="Center"
              HorizontalAlignment="Left"
              Fill="{StaticResource Menu.PopupItem.Normal.Foreground}"
              UseLayoutRounding="False"/>
        <Popup x:Name="PART_Popup"
               AllowsTransparency="True"
               Focusable="False"
               IsOpen="{Binding IsSubmenuOpen, RelativeSource={RelativeSource TemplatedParent}}"
               PopupAnimation="{DynamicResource {x:Static SystemParameters.MenuPopupAnimationKey}}"
               Placement="Right"
               HorizontalOffset="-2"
               VerticalOffset="-4">
          <aero10:SystemDropShadowChrome x:Name="Shdw" Color="Transparent">
            <Border x:Name="SubMenuBorder"
                    Background="{StaticResource Menu.Popup.Background}"
                    BorderBrush="{StaticResource Menu.Popup.Border}"
                    BorderThickness="1"
                    Padding="2">
              <ScrollViewer x:Name="SubMenuScrollViewer"
                          Style="{DynamicResource {ComponentResourceKey {x:Type FrameworkElement}, MenuScrollViewer}}">
                <Grid RenderOptions.ClearTypeHint="Enabled">
                  <Canvas Height="0" Width="0" HorizontalAlignment="Left" VerticalAlignment="Top">
                    <Rectangle
                      x:Name="OpaqueRect"
                      Height="{Binding ActualHeight, ElementName=SubMenuBorder}"
                      Width="{Binding ActualWidth, ElementName=SubMenuBorder}"
                      Fill="{Binding Background, ElementName=SubMenuBorder}"/>
                  </Canvas>
                  <Border x:Name="PopupGutter"
                          HorizontalAlignment="Left"
                          Width="28"
                          Background="{StaticResource Menu.PopupGutter.Background}"
                          BorderBrush="{StaticResource Menu.PopupGutter.Border}"
                          BorderThickness="0,0,1,0"/>
                  <ItemsPresenter x:Name="ItemsPresenter"
                                  KeyboardNavigation.DirectionalNavigation="Cycle"
                                  KeyboardNavigation.TabNavigation="Cycle"
                                  Grid.IsSharedSizeScope="True"
                                  SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"/>
                </Grid>
              </ScrollViewer>
            </Border>
          </aero10:SystemDropShadowChrome>
        </Popup>
      </Grid>
    </Border>
    <ControlTemplate.Triggers>
      <DataTrigger Binding="{Binding Header, RelativeSource={RelativeSource Self}, Converter={StaticResource TypeOfConverter}}"
                   Value="{x:Type system:String}">
        <Setter TargetName="MenuHeaderContainer" Property="Margin" Value="0,-1,0,0"/>
        <Setter TargetName="MenuGestureContainer" Property="Margin" Value="0,-1,0,0"/>
      </DataTrigger>
      <Trigger Property="IsSuspendingPopupAnimation" Value="True">
        <Setter TargetName="PART_Popup" Property="PopupAnimation" Value="None"/>
      </Trigger>
      <Trigger Property="Icon" Value="{x:Null}">
        <Setter TargetName="Icon" Property="Visibility" Value="Collapsed"/>
      </Trigger>
      <Trigger Property="IsChecked" Value="True">
        <Setter TargetName="GlyphBorder" Property="Visibility" Value="Visible"/>
        <Setter TargetName="Icon" Property="Visibility" Value="Collapsed"/>
      </Trigger>
      <Trigger Property="IsHighlighted" Value="True">
        <Setter TargetName="TemplateRoot" Property="Background"
                Value="{StaticResource Menu.PopupItem.Hot.Background}"/>
        <Setter TargetName="TemplateRoot" Property="BorderBrush"
                Value="{StaticResource Menu.PopupItem.Hot.Border}"/>
      </Trigger>
      <Trigger Property="IsEnabled" Value="False">
        <Setter TargetName="TemplateRoot" Property="TextElement.Foreground"
                Value="{StaticResource Menu.PopupItem.Disabled.Foreground}"/>
        <Setter TargetName="Glyph" Property="Fill"
                Value="{StaticResource Menu.PopupCheck.Disabled.Foreground}"/>
        <Setter TargetName="RightArrow" Property="Fill"
                Value="{StaticResource Menu.PopupItem.Disabled.Foreground}"/>
      </Trigger>
      <MultiTrigger>
        <MultiTrigger.Conditions>
          <Condition Property="IsHighlighted" Value="True"/>
          <Condition Property="IsEnabled" Value="False"/>
        </MultiTrigger.Conditions>
        <Setter TargetName="TemplateRoot" Property="Background"
                Value="{StaticResource Menu.PopupItem.DisabledHot.Background}"/>
        <Setter TargetName="TemplateRoot" Property="BorderBrush"
                Value="{StaticResource Menu.PopupItem.DisabledHot.Border}"/>
      </MultiTrigger>
      <Trigger SourceName="PART_Popup" Property="Popup.HasDropShadow" Value="True">
        <Setter TargetName="Shdw" Property="Margin" Value="0,0,5,5"/>
        <Setter TargetName="Shdw" Property="Color" Value="#71000000"/>
      </Trigger>
      <Trigger SourceName="SubMenuScrollViewer" Property="ScrollViewer.CanContentScroll" Value="False">
        <Setter TargetName="OpaqueRect" Property="Canvas.Top"
                Value="{Binding VerticalOffset, ElementName=SubMenuScrollViewer}"/>
        <Setter TargetName="OpaqueRect" Property="Canvas.Left"
                Value="{Binding HorizontalOffset, ElementName=SubMenuScrollViewer}"/>
      </Trigger>
    </ControlTemplate.Triggers>
  </ControlTemplate>

  <Style TargetType="{x:Type MenuItem}">
    <Setter Property="HorizontalContentAlignment"
            Value="{Binding HorizontalContentAlignment, RelativeSource={RelativeSource AncestorType={x:Type ItemsControl}}}"/>
    <Setter Property="VerticalContentAlignment"
            Value="{Binding VerticalContentAlignment, RelativeSource={RelativeSource AncestorType={x:Type ItemsControl}}}"/>
    <Setter Property="Background" Value="Transparent"/>
    <Setter Property="BorderBrush" Value="Transparent"/>
    <Setter Property="BorderThickness" Value="1"/>
    <Setter Property="ScrollViewer.PanningMode" Value="Both"/>
    <Setter Property="Stylus.IsFlicksEnabled" Value="False"/>
    <Setter Property="Template"
            Value="{DynamicResource {ComponentResourceKey {x:Type MenuItem}, SubmenuItemTemplateKey}}"/>
    <Style.Triggers>
      <Trigger Property="Role" Value="TopLevelHeader">
        <Setter Property="Background" Value="Transparent"/>
        <Setter Property="BorderBrush" Value="Transparent"/>
        <Setter Property="Foreground" Value="{StaticResource Menu.BarItem.Normal.Foreground}"/>
        <Setter Property="Template"
                Value="{DynamicResource {ComponentResourceKey {x:Type MenuItem}, TopLevelHeaderTemplateKey}}"/>
        <Setter Property="Padding" Value="6,1"/>
      </Trigger>
      <Trigger Property="Role" Value="TopLevelItem">
        <Setter Property="Background" Value="Transparent"/>
        <Setter Property="BorderBrush" Value="Transparent"/>
        <Setter Property="Foreground" Value="{StaticResource Menu.BarItem.Normal.Foreground}"/>
        <Setter Property="Template"
                Value="{DynamicResource {ComponentResourceKey {x:Type MenuItem}, TopLevelItemTemplateKey}}"/>
        <Setter Property="Padding" Value="6,1"/>
      </Trigger>
      <Trigger Property="Role" Value="SubmenuHeader">
        <Setter Property="Template"
                Value="{DynamicResource {ComponentResourceKey {x:Type MenuItem}, SubmenuHeaderTemplateKey}}"/>
      </Trigger>
    </Style.Triggers>
  </Style>

  <Style TargetType="{x:Type Menu}">
    <Setter Property="Background" Value="{StaticResource Menu.BarBackground.Background}"/>
    <Setter Property="BorderBrush" Value="{StaticResource Menu.BarBackground.Border}"/>
    <Setter Property="BorderThickness" Value="0,0,0,1"/>
    <Setter Property="FontFamily" Value="{DynamicResource {x:Static SystemFonts.MenuFontFamilyKey}}"/>
    <Setter Property="FontSize" Value="{DynamicResource {x:Static SystemFonts.MenuFontSizeKey}}"/>
    <Setter Property="FontStyle" Value="{DynamicResource {x:Static SystemFonts.MenuFontStyleKey}}"/>
    <Setter Property="FontWeight" Value="{DynamicResource {x:Static SystemFonts.MenuFontWeightKey}}"/>
    <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.MenuTextBrushKey}}"/>
    <Setter Property="VerticalContentAlignment" Value="Center"/>
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type Menu}">
          <Border
            Background="{TemplateBinding Background}"
            BorderBrush="{TemplateBinding BorderBrush}"
            BorderThickness="{TemplateBinding BorderThickness}"
            Padding="{TemplateBinding Padding}"
            SnapsToDevicePixels="True">
            <ItemsPresenter
              Margin="0,0,0,-1"
              SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"/>
          </Border>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>

  <Style x:Key="{x:Type ContextMenu}" TargetType="{x:Type ContextMenu}">
    <Setter Property="FontFamily" Value="{DynamicResource {x:Static SystemFonts.MenuFontFamilyKey}}"/>
    <Setter Property="FontSize" Value="{DynamicResource {x:Static SystemFonts.MenuFontSizeKey}}"/>
    <Setter Property="FontStyle" Value="{DynamicResource {x:Static SystemFonts.MenuFontStyleKey}}"/>
    <Setter Property="FontWeight" Value="{DynamicResource {x:Static SystemFonts.MenuFontWeightKey}}"/>
    <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.MenuTextBrushKey}}"/>
    <Setter Property="VerticalContentAlignment" Value="Center"/>
    <Setter Property="Background" Value="{StaticResource Menu.Popup.Background}"/>
    <Setter Property="BorderBrush" Value="{StaticResource Menu.Popup.Border}"/>
    <Setter Property="BorderThickness" Value="1"/>
    <Setter Property="Padding" Value="2"/>
    <Setter Property="Grid.IsSharedSizeScope" Value="True"/>
    <Setter Property="HasDropShadow" Value="{DynamicResource {x:Static SystemParameters.DropShadowKey}}"/>
    <Setter Property="ScrollViewer.PanningMode" Value="Both"/>
    <Setter Property="Stylus.IsFlicksEnabled" Value="False"/>
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type ContextMenu}">
          <aero10:SystemDropShadowChrome x:Name="Shdw"
                                        Color="Transparent"
                                        SnapsToDevicePixels="True">
            <Border x:Name="ContextMenuBorder"
                    Background="{TemplateBinding Background}"
                    BorderBrush="{TemplateBinding BorderBrush}"
                    BorderThickness="{TemplateBinding BorderThickness}">
              <ScrollViewer x:Name="ContextMenuScrollViewer"
                            Margin="0"
                            Style="{DynamicResource {ComponentResourceKey {x:Type FrameworkElement}, MenuScrollViewer}}">
                <Grid RenderOptions.ClearTypeHint="Enabled">
                  <Canvas Height="0" Width="0" HorizontalAlignment="Left" VerticalAlignment="Top">
                    <Rectangle
                      x:Name="OpaqueRect"
                      Height="{Binding ActualHeight, ElementName=ContextMenuBorder}"
                      Width="{Binding ActualWidth, ElementName=ContextMenuBorder}"
                      Fill="{Binding Background, ElementName=ContextMenuBorder}"/>
                  </Canvas>
                  <Border x:Name="PopupGutter"
                          HorizontalAlignment="Left"
                          Width="28"
                          Margin="2,2,0,2"
                          Background="{StaticResource Menu.PopupGutter.Background}"
                          BorderBrush="{StaticResource Menu.PopupGutter.Border}"
                          BorderThickness="0,0,1,0"/>
                  <ItemsPresenter x:Name="ItemsPresenter"
                                  Margin="{TemplateBinding Padding}"
                                  SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
                                  KeyboardNavigation.DirectionalNavigation="Cycle"/>
                </Grid>
              </ScrollViewer>
            </Border>
          </aero10:SystemDropShadowChrome>
          <ControlTemplate.Triggers>
            <Trigger Property="HasDropShadow" Value="True">
              <Setter TargetName="Shdw" Property="Margin" Value="0,0,5,5"/>
              <Setter TargetName="Shdw" Property="Color" Value="#71000000"/>
            </Trigger>
            <Trigger SourceName="ContextMenuScrollViewer"
                     Property="ScrollViewer.CanContentScroll"
                     Value="False">
              <Setter TargetName="OpaqueRect"
                      Property="Canvas.Top"
                      Value="{Binding VerticalOffset, ElementName=ContextMenuScrollViewer}"/>
              <Setter TargetName="OpaqueRect"
                      Property="Canvas.Left"
                      Value="{Binding HorizontalOffset, ElementName=ContextMenuScrollViewer}"/>
            </Trigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>


  <!-- ScrollBar =========================================================== -->

  <SolidColorBrush x:Key="ScrollBar.Background" Color="#FFF0F0F0" po:Freeze="True"/>
  <SolidColorBrush x:Key="ScrollBar.Border.Light" Color="#FFFFFFFF" po:Freeze="True"/>
  <SolidColorBrush x:Key="ScrollBar.Border.Dark" Color="#FFF0F0F0" po:Freeze="True"/>

  <SolidColorBrush x:Key="ScrollBar.Thumb.Normal" Color="#FFCDCDCD" po:Freeze="True"/>
  <Color x:Key="ScrollBar.Thumb.Hot.Color">#FFA6A6A6</Color>
  <Color x:Key="ScrollBar.Thumb.Pressed.Color">#FF606060</Color>
  <Color x:Key="ScrollBar.Thumb.Disabled.Color">#FFF0F0F0</Color>
  <Color x:Key="ScrollBar.Thumb.Hover.Color">#FFC0C0C0</Color>

  <SolidColorBrush x:Key="ScrollBar.Glyph.Normal" Color="#FF606060" po:Freeze="True"/>
  <Color x:Key="ScrollBar.Glyph.Hot.Color">#FF000000</Color>
  <Color x:Key="ScrollBar.Glyph.Pressed.Color">#FFFFFFFF</Color>
  <Color x:Key="ScrollBar.Glyph.Disabled.Color">#FFBFBFBF</Color>
  <Color x:Key="ScrollBar.Glyph.Hover.Color">#FF606060</Color>

  <SolidColorBrush x:Key="ScrollBar.ArrowButton.Normal" Color="#FFF0F0F0" po:Freeze="True"/>
  <Color x:Key="ScrollBar.ArrowButton.Hot.Color">#FFDADADA</Color>
  <Color x:Key="ScrollBar.ArrowButton.Pressed.Color">#FF606060</Color>
  <Color x:Key="ScrollBar.ArrowButton.Disabled.Color">#FFF0F0F0</Color>
  <Color x:Key="ScrollBar.ArrowButton.Hover.Color">#FFF0F0F0</Color>

  <Style x:Key="RepeatButtonTransparent" TargetType="{x:Type RepeatButton}">
    <Setter Property="OverridesDefaultStyle" Value="True"/>
    <Setter Property="Background" Value="Transparent"/>
    <Setter Property="Focusable" Value="False"/>
    <Setter Property="IsTabStop" Value="False"/>
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type RepeatButton}">
          <Rectangle Fill="{TemplateBinding Background}"
                     Width="{TemplateBinding Width}"
                     Height="{TemplateBinding Height}"/>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>

  <Style x:Key="ScrollBarButtonUp" TargetType="{x:Type RepeatButton}">
    <Setter Property="FocusVisualStyle" Value="{StaticResource FocusVisual}"/>
    <Setter Property="HorizontalContentAlignment" Value="Center"/>
    <Setter Property="VerticalContentAlignment" Value="Center"/>
    <Setter Property="Focusable" Value="False"/>
    <Setter Property="IsTabStop" Value="False"/>
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type RepeatButton}">
          <aero10:ScrollBarChrome x:Name="Border"
                                  SnapsToDevicePixels="True"
                                  Orientation="Vertical"
                                  Background="{StaticResource ScrollBar.ArrowButton.Normal}"
                                  LightBorderBrush="{StaticResource ScrollBar.Border.Light}"
                                  DarkBorderBrush="{StaticResource ScrollBar.Border.Dark}"
                                  ParentElement="{Binding RelativeSource={RelativeSource TemplatedParent}}"
                                  RenderHover="{Binding IsMouseOver, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type ScrollBar}}}"
                                  VisualStateManager.CustomVisualStateManager="{x:Static aero:SystemVisualStateManager.Instance}">
            <VisualStateManager.VisualStateGroups>
              <VisualStateGroup x:Name="CommonStates">
                <VisualStateGroup.Transitions>
                  <VisualTransition From="Normal" To="MouseOver" GeneratedDuration="0:00:00.225"/>
                  <VisualTransition From="Normal" To="Pressed" GeneratedDuration="0:00:00.15"/>
                  <VisualTransition From="Normal" To="Disabled" GeneratedDuration="0:00:00"/>
                  <VisualTransition From="Normal" To="Hover" GeneratedDuration="0:00:00.225"/>
                  <VisualTransition From="MouseOver" To="Normal" GeneratedDuration="0:00:01.275"/>
                  <VisualTransition From="MouseOver" To="Pressed" GeneratedDuration="0:00:00.15"/>
                  <VisualTransition From="MouseOver" To="Disabled" GeneratedDuration="0:00:00"/>
                  <VisualTransition From="MouseOver" To="Hover" GeneratedDuration="0:00:01.275"/>
                  <VisualTransition From="Pressed" To="Normal" GeneratedDuration="0:00:00.225"/>
                  <!-- aero.msstyles defines a duration for this transition but
                       it is not actually used when releasing the mouse button -->
                  <!--<VisualTransition From="Pressed" To="MouseOver" GeneratedDuration="0:00:00.225"/>-->
                  <VisualTransition From="Pressed" To="MouseOver" GeneratedDuration="0:00:00"/>
                  <VisualTransition From="Pressed" To="Disabled" GeneratedDuration="0:00:00"/>
                  <VisualTransition From="Pressed" To="Hover" GeneratedDuration="0:00:00.225"/>
                  <VisualTransition From="Disabled" To="Normal" GeneratedDuration="0:00:00.375"/>
                  <VisualTransition From="Disabled" To="MouseOver" GeneratedDuration="0:00:00"/>
                  <VisualTransition From="Disabled" To="Pressed" GeneratedDuration="0:00:00"/>
                  <VisualTransition From="Disabled" To="Hover" GeneratedDuration="0:00:00"/>
                  <VisualTransition From="Hover" To="Normal" GeneratedDuration="0:00:01.275"/>
                  <VisualTransition From="Hover" To="MouseOver" GeneratedDuration="0:00:00.225"/>
                  <VisualTransition From="Hover" To="Pressed" GeneratedDuration="0:00:00.15"/>
                  <VisualTransition From="Hover" To="Disabled" GeneratedDuration="0:00:00"/>
                </VisualStateGroup.Transitions>
                <VisualState x:Name="Normal"/>
                <VisualState x:Name="MouseOver">
                  <Storyboard>
                    <ColorAnimationUsingKeyFrames
                      Storyboard.TargetName="Border"
                      Storyboard.TargetProperty="Background.(SolidColorBrush.Color)">
                      <DiscreteColorKeyFrame KeyTime="0" Value="{StaticResource ScrollBar.ArrowButton.Hot.Color}"/>
                    </ColorAnimationUsingKeyFrames>
                    <ColorAnimationUsingKeyFrames
                      Storyboard.TargetName="Glyph"
                      Storyboard.TargetProperty="Fill.(SolidColorBrush.Color)">
                      <DiscreteColorKeyFrame KeyTime="0" Value="{StaticResource ScrollBar.Glyph.Hot.Color}"/>
                    </ColorAnimationUsingKeyFrames>
                  </Storyboard>
                </VisualState>
                <VisualState x:Name="Pressed">
                  <Storyboard>
                    <ColorAnimationUsingKeyFrames
                      Storyboard.TargetName="Border"
                      Storyboard.TargetProperty="Background.(SolidColorBrush.Color)">
                      <DiscreteColorKeyFrame KeyTime="0" Value="{StaticResource ScrollBar.ArrowButton.Pressed.Color}"/>
                    </ColorAnimationUsingKeyFrames>
                    <ColorAnimationUsingKeyFrames
                      Storyboard.TargetName="Glyph"
                      Storyboard.TargetProperty="Fill.(SolidColorBrush.Color)">
                      <DiscreteColorKeyFrame KeyTime="0" Value="{StaticResource ScrollBar.Glyph.Pressed.Color}"/>
                    </ColorAnimationUsingKeyFrames>
                  </Storyboard>
                </VisualState>
                <VisualState x:Name="Disabled">
                  <Storyboard>
                    <ColorAnimationUsingKeyFrames
                      Storyboard.TargetName="Border"
                      Storyboard.TargetProperty="Background.(SolidColorBrush.Color)">
                      <DiscreteColorKeyFrame KeyTime="0" Value="{StaticResource ScrollBar.ArrowButton.Disabled.Color}"/>
                    </ColorAnimationUsingKeyFrames>
                    <ColorAnimationUsingKeyFrames
                      Storyboard.TargetName="Glyph"
                      Storyboard.TargetProperty="Fill.(SolidColorBrush.Color)">
                      <DiscreteColorKeyFrame KeyTime="0" Value="{StaticResource ScrollBar.Glyph.Disabled.Color}"/>
                    </ColorAnimationUsingKeyFrames>
                  </Storyboard>
                </VisualState>
                <VisualState x:Name="Hover">
                  <Storyboard>
                    <ColorAnimationUsingKeyFrames
                      Storyboard.TargetName="Border"
                      Storyboard.TargetProperty="Background.(SolidColorBrush.Color)">
                      <DiscreteColorKeyFrame KeyTime="0" Value="{StaticResource ScrollBar.ArrowButton.Hover.Color}"/>
                    </ColorAnimationUsingKeyFrames>
                    <ColorAnimationUsingKeyFrames
                      Storyboard.TargetName="Glyph"
                      Storyboard.TargetProperty="Fill.(SolidColorBrush.Color)">
                      <DiscreteColorKeyFrame KeyTime="0" Value="{StaticResource ScrollBar.Glyph.Hover.Color}"/>
                    </ColorAnimationUsingKeyFrames>
                  </Storyboard>
                </VisualState>
              </VisualStateGroup>
            </VisualStateManager.VisualStateGroups>
            <!-- Up glyph is moved 1px down. -->
            <Path x:Name="Glyph"
                  Data="M0,3.5 0,6.5 3.5,3 7,6.5 7,3.5 3.5,0 z"
                  Stretch="Uniform"
                  Margin="3,4,3,2"
                  Fill="{StaticResource ScrollBar.Glyph.Normal}"
                  HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                  VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                  SnapsToDevicePixels="True"
                  RenderOptions.EdgeMode="Aliased"
                  UseLayoutRounding="False"
                  Width="7"
                  Height="7"
                  Focusable="False"/>
          </aero10:ScrollBarChrome>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>

  <Style x:Key="ScrollBarButtonDown" TargetType="{x:Type RepeatButton}">
    <Setter Property="FocusVisualStyle" Value="{StaticResource FocusVisual}"/>
    <Setter Property="HorizontalContentAlignment" Value="Center"/>
    <Setter Property="VerticalContentAlignment" Value="Center"/>
    <Setter Property="Focusable" Value="False"/>
    <Setter Property="IsTabStop" Value="False"/>
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type RepeatButton}">
          <aero10:ScrollBarChrome x:Name="Border"
                                  SnapsToDevicePixels="True"
                                  Orientation="Vertical"
                                  Background="{StaticResource ScrollBar.ArrowButton.Normal}"
                                  LightBorderBrush="{StaticResource ScrollBar.Border.Light}"
                                  DarkBorderBrush="{StaticResource ScrollBar.Border.Dark}"
                                  ParentElement="{Binding RelativeSource={RelativeSource TemplatedParent}}"
                                  RenderHover="{Binding IsMouseOver, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type ScrollBar}}}"
                                  VisualStateManager.CustomVisualStateManager="{x:Static aero:SystemVisualStateManager.Instance}">
            <VisualStateManager.VisualStateGroups>
              <VisualStateGroup x:Name="CommonStates">
                <VisualStateGroup.Transitions>
                  <VisualTransition From="Normal" To="MouseOver" GeneratedDuration="0:00:00.225"/>
                  <VisualTransition From="Normal" To="Pressed" GeneratedDuration="0:00:00.15"/>
                  <VisualTransition From="Normal" To="Disabled" GeneratedDuration="0:00:00"/>
                  <VisualTransition From="Normal" To="Hover" GeneratedDuration="0:00:00.225"/>
                  <VisualTransition From="MouseOver" To="Normal" GeneratedDuration="0:00:01.275"/>
                  <VisualTransition From="MouseOver" To="Pressed" GeneratedDuration="0:00:00.15"/>
                  <VisualTransition From="MouseOver" To="Disabled" GeneratedDuration="0:00:00"/>
                  <VisualTransition From="MouseOver" To="Hover" GeneratedDuration="0:00:01.275"/>
                  <VisualTransition From="Pressed" To="Normal" GeneratedDuration="0:00:00.225"/>
                  <!-- aero.msstyles defines a duration for this transition but
                       it is not actually used when releasing the mouse button -->
                  <!--<VisualTransition From="Pressed" To="MouseOver" GeneratedDuration="0:00:00.225"/>-->
                  <VisualTransition From="Pressed" To="MouseOver" GeneratedDuration="0:00:00"/>
                  <VisualTransition From="Pressed" To="Disabled" GeneratedDuration="0:00:00"/>
                  <VisualTransition From="Pressed" To="Hover" GeneratedDuration="0:00:00.225"/>
                  <VisualTransition From="Disabled" To="Normal" GeneratedDuration="0:00:00.375"/>
                  <VisualTransition From="Disabled" To="MouseOver" GeneratedDuration="0:00:00"/>
                  <VisualTransition From="Disabled" To="Pressed" GeneratedDuration="0:00:00"/>
                  <VisualTransition From="Disabled" To="Hover" GeneratedDuration="0:00:00"/>
                  <VisualTransition From="Hover" To="Normal" GeneratedDuration="0:00:01.275"/>
                  <VisualTransition From="Hover" To="MouseOver" GeneratedDuration="0:00:00.225"/>
                  <VisualTransition From="Hover" To="Pressed" GeneratedDuration="0:00:00.15"/>
                  <VisualTransition From="Hover" To="Disabled" GeneratedDuration="0:00:00"/>
                </VisualStateGroup.Transitions>
                <VisualState x:Name="Normal"/>
                <VisualState x:Name="MouseOver">
                  <Storyboard>
                    <ColorAnimationUsingKeyFrames
                      Storyboard.TargetName="Border"
                      Storyboard.TargetProperty="Background.(SolidColorBrush.Color)">
                      <DiscreteColorKeyFrame KeyTime="0" Value="{StaticResource ScrollBar.ArrowButton.Hot.Color}"/>
                    </ColorAnimationUsingKeyFrames>
                    <ColorAnimationUsingKeyFrames
                      Storyboard.TargetName="Glyph"
                      Storyboard.TargetProperty="Fill.(SolidColorBrush.Color)">
                      <DiscreteColorKeyFrame KeyTime="0" Value="{StaticResource ScrollBar.Glyph.Hot.Color}"/>
                    </ColorAnimationUsingKeyFrames>
                  </Storyboard>
                </VisualState>
                <VisualState x:Name="Pressed">
                  <Storyboard>
                    <ColorAnimationUsingKeyFrames
                      Storyboard.TargetName="Border"
                      Storyboard.TargetProperty="Background.(SolidColorBrush.Color)">
                      <DiscreteColorKeyFrame KeyTime="0" Value="{StaticResource ScrollBar.ArrowButton.Pressed.Color}"/>
                    </ColorAnimationUsingKeyFrames>
                    <ColorAnimationUsingKeyFrames
                      Storyboard.TargetName="Glyph"
                      Storyboard.TargetProperty="Fill.(SolidColorBrush.Color)">
                      <DiscreteColorKeyFrame KeyTime="0" Value="{StaticResource ScrollBar.Glyph.Pressed.Color}"/>
                    </ColorAnimationUsingKeyFrames>
                  </Storyboard>
                </VisualState>
                <VisualState x:Name="Disabled">
                  <Storyboard>
                    <ColorAnimationUsingKeyFrames
                      Storyboard.TargetName="Border"
                      Storyboard.TargetProperty="Background.(SolidColorBrush.Color)">
                      <DiscreteColorKeyFrame KeyTime="0" Value="{StaticResource ScrollBar.ArrowButton.Disabled.Color}"/>
                    </ColorAnimationUsingKeyFrames>
                    <ColorAnimationUsingKeyFrames
                      Storyboard.TargetName="Glyph"
                      Storyboard.TargetProperty="Fill.(SolidColorBrush.Color)">
                      <DiscreteColorKeyFrame KeyTime="0" Value="{StaticResource ScrollBar.Glyph.Disabled.Color}"/>
                    </ColorAnimationUsingKeyFrames>
                  </Storyboard>
                </VisualState>
                <VisualState x:Name="Hover">
                  <Storyboard>
                    <ColorAnimationUsingKeyFrames
                      Storyboard.TargetName="Border"
                      Storyboard.TargetProperty="Background.(SolidColorBrush.Color)">
                      <DiscreteColorKeyFrame KeyTime="0" Value="{StaticResource ScrollBar.ArrowButton.Hover.Color}"/>
                    </ColorAnimationUsingKeyFrames>
                    <ColorAnimationUsingKeyFrames
                      Storyboard.TargetName="Glyph"
                      Storyboard.TargetProperty="Fill.(SolidColorBrush.Color)">
                      <DiscreteColorKeyFrame KeyTime="0" Value="{StaticResource ScrollBar.Glyph.Hover.Color}"/>
                    </ColorAnimationUsingKeyFrames>
                  </Storyboard>
                </VisualState>
              </VisualStateGroup>
            </VisualStateManager.VisualStateGroups>
            <Path x:Name="Glyph"
                  Data="M0,3 0,0 3.5,3.5 7,0 7,3 3.5,6.5 z"
                  Stretch="Uniform"
                  Margin="3,3,3,3"
                  Fill="{StaticResource ScrollBar.Glyph.Normal}"
                  HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                  VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                  SnapsToDevicePixels="True"
                  RenderOptions.EdgeMode="Aliased"
                  UseLayoutRounding="False"
                  Width="7"
                  Height="7"
                  Focusable="False"/>
          </aero10:ScrollBarChrome>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>

  <Style x:Key="ScrollBarButtonLeft" TargetType="{x:Type RepeatButton}">
    <Setter Property="FocusVisualStyle" Value="{StaticResource FocusVisual}"/>
    <Setter Property="HorizontalContentAlignment" Value="Center"/>
    <Setter Property="VerticalContentAlignment" Value="Center"/>
    <Setter Property="Focusable" Value="False"/>
    <Setter Property="IsTabStop" Value="False"/>
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type RepeatButton}">
          <aero10:ScrollBarChrome x:Name="Border"
                                  SnapsToDevicePixels="True"
                                  Orientation="Horizontal"
                                  Background="{StaticResource ScrollBar.ArrowButton.Normal}"
                                  LightBorderBrush="{StaticResource ScrollBar.Border.Light}"
                                  DarkBorderBrush="{StaticResource ScrollBar.Border.Dark}"
                                  ParentElement="{Binding RelativeSource={RelativeSource TemplatedParent}}"
                                  RenderHover="{Binding IsMouseOver, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type ScrollBar}}}"
                                  VisualStateManager.CustomVisualStateManager="{x:Static aero:SystemVisualStateManager.Instance}">
            <VisualStateManager.VisualStateGroups>
              <VisualStateGroup x:Name="CommonStates">
                <VisualStateGroup.Transitions>
                  <VisualTransition From="Normal" To="MouseOver" GeneratedDuration="0:00:00.225"/>
                  <VisualTransition From="Normal" To="Pressed" GeneratedDuration="0:00:00.15"/>
                  <VisualTransition From="Normal" To="Disabled" GeneratedDuration="0:00:00"/>
                  <VisualTransition From="Normal" To="Hover" GeneratedDuration="0:00:00.225"/>
                  <VisualTransition From="MouseOver" To="Normal" GeneratedDuration="0:00:01.275"/>
                  <VisualTransition From="MouseOver" To="Pressed" GeneratedDuration="0:00:00.15"/>
                  <VisualTransition From="MouseOver" To="Disabled" GeneratedDuration="0:00:00"/>
                  <VisualTransition From="MouseOver" To="Hover" GeneratedDuration="0:00:01.275"/>
                  <VisualTransition From="Pressed" To="Normal" GeneratedDuration="0:00:00.225"/>
                  <!-- aero.msstyles defines a duration for this transition but
                       it is not actually used when releasing the mouse button -->
                  <!--<VisualTransition From="Pressed" To="MouseOver" GeneratedDuration="0:00:00.225"/>-->
                  <VisualTransition From="Pressed" To="MouseOver" GeneratedDuration="0:00:00"/>
                  <VisualTransition From="Pressed" To="Disabled" GeneratedDuration="0:00:00"/>
                  <VisualTransition From="Pressed" To="Hover" GeneratedDuration="0:00:00.225"/>
                  <VisualTransition From="Disabled" To="Normal" GeneratedDuration="0:00:00.375"/>
                  <VisualTransition From="Disabled" To="MouseOver" GeneratedDuration="0:00:00"/>
                  <VisualTransition From="Disabled" To="Pressed" GeneratedDuration="0:00:00"/>
                  <VisualTransition From="Disabled" To="Hover" GeneratedDuration="0:00:00"/>
                  <VisualTransition From="Hover" To="Normal" GeneratedDuration="0:00:01.275"/>
                  <VisualTransition From="Hover" To="MouseOver" GeneratedDuration="0:00:00.225"/>
                  <VisualTransition From="Hover" To="Pressed" GeneratedDuration="0:00:00.15"/>
                  <VisualTransition From="Hover" To="Disabled" GeneratedDuration="0:00:00"/>
                </VisualStateGroup.Transitions>
                <VisualState x:Name="Normal"/>
                <VisualState x:Name="MouseOver">
                  <Storyboard>
                    <ColorAnimationUsingKeyFrames
                      Storyboard.TargetName="Border"
                      Storyboard.TargetProperty="Background.(SolidColorBrush.Color)">
                      <DiscreteColorKeyFrame KeyTime="0" Value="{StaticResource ScrollBar.ArrowButton.Hot.Color}"/>
                    </ColorAnimationUsingKeyFrames>
                    <ColorAnimationUsingKeyFrames
                      Storyboard.TargetName="Glyph"
                      Storyboard.TargetProperty="Fill.(SolidColorBrush.Color)">
                      <DiscreteColorKeyFrame KeyTime="0" Value="{StaticResource ScrollBar.Glyph.Hot.Color}"/>
                    </ColorAnimationUsingKeyFrames>
                  </Storyboard>
                </VisualState>
                <VisualState x:Name="Pressed">
                  <Storyboard>
                    <ColorAnimationUsingKeyFrames
                      Storyboard.TargetName="Border"
                      Storyboard.TargetProperty="Background.(SolidColorBrush.Color)">
                      <DiscreteColorKeyFrame KeyTime="0" Value="{StaticResource ScrollBar.ArrowButton.Pressed.Color}"/>
                    </ColorAnimationUsingKeyFrames>
                    <ColorAnimationUsingKeyFrames
                      Storyboard.TargetName="Glyph"
                      Storyboard.TargetProperty="Fill.(SolidColorBrush.Color)">
                      <DiscreteColorKeyFrame KeyTime="0" Value="{StaticResource ScrollBar.Glyph.Pressed.Color}"/>
                    </ColorAnimationUsingKeyFrames>
                  </Storyboard>
                </VisualState>
                <VisualState x:Name="Disabled">
                  <Storyboard>
                    <ColorAnimationUsingKeyFrames
                      Storyboard.TargetName="Border"
                      Storyboard.TargetProperty="Background.(SolidColorBrush.Color)">
                      <DiscreteColorKeyFrame KeyTime="0" Value="{StaticResource ScrollBar.ArrowButton.Disabled.Color}"/>
                    </ColorAnimationUsingKeyFrames>
                    <ColorAnimationUsingKeyFrames
                      Storyboard.TargetName="Glyph"
                      Storyboard.TargetProperty="Fill.(SolidColorBrush.Color)">
                      <DiscreteColorKeyFrame KeyTime="0" Value="{StaticResource ScrollBar.Glyph.Disabled.Color}"/>
                    </ColorAnimationUsingKeyFrames>
                  </Storyboard>
                </VisualState>
                <VisualState x:Name="Hover">
                  <Storyboard>
                    <ColorAnimationUsingKeyFrames
                      Storyboard.TargetName="Border"
                      Storyboard.TargetProperty="Background.(SolidColorBrush.Color)">
                      <DiscreteColorKeyFrame KeyTime="0" Value="{StaticResource ScrollBar.ArrowButton.Hover.Color}"/>
                    </ColorAnimationUsingKeyFrames>
                    <ColorAnimationUsingKeyFrames
                      Storyboard.TargetName="Glyph"
                      Storyboard.TargetProperty="Fill.(SolidColorBrush.Color)">
                      <DiscreteColorKeyFrame KeyTime="0" Value="{StaticResource ScrollBar.Glyph.Hover.Color}"/>
                    </ColorAnimationUsingKeyFrames>
                  </Storyboard>
                </VisualState>
              </VisualStateGroup>
            </VisualStateManager.VisualStateGroups>
            <Path x:Name="Glyph"
                  Data="M0,3.5 3.5,0 6.5,0 3,3.5 6.5,7 3.5,7 z"
                  Stretch="Uniform"
                  Margin="3,3,3,3"
                  Fill="{StaticResource ScrollBar.Glyph.Normal}"
                  HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                  VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                  SnapsToDevicePixels="True"
                  RenderOptions.EdgeMode="Aliased"
                  UseLayoutRounding="False"
                  Width="7"
                  Height="7"/>
          </aero10:ScrollBarChrome>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>

  <Style x:Key="ScrollBarButtonRight" TargetType="{x:Type RepeatButton}">
    <Setter Property="FocusVisualStyle" Value="{StaticResource FocusVisual}"/>
    <Setter Property="HorizontalContentAlignment" Value="Center"/>
    <Setter Property="VerticalContentAlignment" Value="Center"/>
    <Setter Property="Focusable" Value="False"/>
    <Setter Property="IsTabStop" Value="False"/>
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type RepeatButton}">
          <aero10:ScrollBarChrome x:Name="Border"
                                  SnapsToDevicePixels="True"
                                  Orientation="Horizontal"
                                  Background="{StaticResource ScrollBar.ArrowButton.Normal}"
                                  LightBorderBrush="{StaticResource ScrollBar.Border.Light}"
                                  DarkBorderBrush="{StaticResource ScrollBar.Border.Dark}"
                                  ParentElement="{Binding RelativeSource={RelativeSource TemplatedParent}}"
                                  RenderHover="{Binding IsMouseOver, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type ScrollBar}}}"
                                  VisualStateManager.CustomVisualStateManager="{x:Static aero:SystemVisualStateManager.Instance}">
            <VisualStateManager.VisualStateGroups>
              <VisualStateGroup x:Name="CommonStates">
                <VisualStateGroup.Transitions>
                  <VisualTransition From="Normal" To="MouseOver" GeneratedDuration="0:00:00.225"/>
                  <VisualTransition From="Normal" To="Pressed" GeneratedDuration="0:00:00.15"/>
                  <VisualTransition From="Normal" To="Disabled" GeneratedDuration="0:00:00"/>
                  <VisualTransition From="Normal" To="Hover" GeneratedDuration="0:00:00.225"/>
                  <VisualTransition From="MouseOver" To="Normal" GeneratedDuration="0:00:01.275"/>
                  <VisualTransition From="MouseOver" To="Pressed" GeneratedDuration="0:00:00.15"/>
                  <VisualTransition From="MouseOver" To="Disabled" GeneratedDuration="0:00:00"/>
                  <VisualTransition From="MouseOver" To="Hover" GeneratedDuration="0:00:01.275"/>
                  <VisualTransition From="Pressed" To="Normal" GeneratedDuration="0:00:00.225"/>
                  <!-- aero.msstyles defines a duration for this transition but
                       it is not actually used when releasing the mouse button -->
                  <!--<VisualTransition From="Pressed" To="MouseOver" GeneratedDuration="0:00:00.225"/>-->
                  <VisualTransition From="Pressed" To="MouseOver" GeneratedDuration="0:00:00"/>
                  <VisualTransition From="Pressed" To="Disabled" GeneratedDuration="0:00:00"/>
                  <VisualTransition From="Pressed" To="Hover" GeneratedDuration="0:00:00.225"/>
                  <VisualTransition From="Disabled" To="Normal" GeneratedDuration="0:00:00.375"/>
                  <VisualTransition From="Disabled" To="MouseOver" GeneratedDuration="0:00:00"/>
                  <VisualTransition From="Disabled" To="Pressed" GeneratedDuration="0:00:00"/>
                  <VisualTransition From="Disabled" To="Hover" GeneratedDuration="0:00:00"/>
                  <VisualTransition From="Hover" To="Normal" GeneratedDuration="0:00:01.275"/>
                  <VisualTransition From="Hover" To="MouseOver" GeneratedDuration="0:00:00.225"/>
                  <VisualTransition From="Hover" To="Pressed" GeneratedDuration="0:00:00.15"/>
                  <VisualTransition From="Hover" To="Disabled" GeneratedDuration="0:00:00"/>
                </VisualStateGroup.Transitions>
                <VisualState x:Name="Normal"/>
                <VisualState x:Name="MouseOver">
                  <Storyboard>
                    <ColorAnimationUsingKeyFrames
                      Storyboard.TargetName="Border"
                      Storyboard.TargetProperty="Background.(SolidColorBrush.Color)">
                      <DiscreteColorKeyFrame KeyTime="0" Value="{StaticResource ScrollBar.ArrowButton.Hot.Color}"/>
                    </ColorAnimationUsingKeyFrames>
                    <ColorAnimationUsingKeyFrames
                      Storyboard.TargetName="Glyph"
                      Storyboard.TargetProperty="Fill.(SolidColorBrush.Color)">
                      <DiscreteColorKeyFrame KeyTime="0" Value="{StaticResource ScrollBar.Glyph.Hot.Color}"/>
                    </ColorAnimationUsingKeyFrames>
                  </Storyboard>
                </VisualState>
                <VisualState x:Name="Pressed">
                  <Storyboard>
                    <ColorAnimationUsingKeyFrames
                      Storyboard.TargetName="Border"
                      Storyboard.TargetProperty="Background.(SolidColorBrush.Color)">
                      <DiscreteColorKeyFrame KeyTime="0" Value="{StaticResource ScrollBar.ArrowButton.Pressed.Color}"/>
                    </ColorAnimationUsingKeyFrames>
                    <ColorAnimationUsingKeyFrames
                      Storyboard.TargetName="Glyph"
                      Storyboard.TargetProperty="Fill.(SolidColorBrush.Color)">
                      <DiscreteColorKeyFrame KeyTime="0" Value="{StaticResource ScrollBar.Glyph.Pressed.Color}"/>
                    </ColorAnimationUsingKeyFrames>
                  </Storyboard>
                </VisualState>
                <VisualState x:Name="Disabled">
                  <Storyboard>
                    <ColorAnimationUsingKeyFrames
                      Storyboard.TargetName="Border"
                      Storyboard.TargetProperty="Background.(SolidColorBrush.Color)">
                      <DiscreteColorKeyFrame KeyTime="0" Value="{StaticResource ScrollBar.ArrowButton.Disabled.Color}"/>
                    </ColorAnimationUsingKeyFrames>
                    <ColorAnimationUsingKeyFrames
                      Storyboard.TargetName="Glyph"
                      Storyboard.TargetProperty="Fill.(SolidColorBrush.Color)">
                      <DiscreteColorKeyFrame KeyTime="0" Value="{StaticResource ScrollBar.Glyph.Disabled.Color}"/>
                    </ColorAnimationUsingKeyFrames>
                  </Storyboard>
                </VisualState>
                <VisualState x:Name="Hover">
                  <Storyboard>
                    <ColorAnimationUsingKeyFrames
                      Storyboard.TargetName="Border"
                      Storyboard.TargetProperty="Background.(SolidColorBrush.Color)">
                      <DiscreteColorKeyFrame KeyTime="0" Value="{StaticResource ScrollBar.ArrowButton.Hover.Color}"/>
                    </ColorAnimationUsingKeyFrames>
                    <ColorAnimationUsingKeyFrames
                      Storyboard.TargetName="Glyph"
                      Storyboard.TargetProperty="Fill.(SolidColorBrush.Color)">
                      <DiscreteColorKeyFrame KeyTime="0" Value="{StaticResource ScrollBar.Glyph.Hover.Color}"/>
                    </ColorAnimationUsingKeyFrames>
                  </Storyboard>
                </VisualState>
              </VisualStateGroup>
            </VisualStateManager.VisualStateGroups>
            <Path x:Name="Glyph"
                  Data="M3,7 0,7 3.5,3.5 0,0 3,0 6.5,3.5 z"
                  Stretch="Uniform"
                  Margin="3,3,3,3"
                  Fill="{StaticResource ScrollBar.Glyph.Normal}"
                  HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                  VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                  SnapsToDevicePixels="True"
                  RenderOptions.EdgeMode="Aliased"
                  UseLayoutRounding="False"
                  Width="7"
                  Height="7"/>
          </aero10:ScrollBarChrome>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>

  <Style x:Key="ScrollBarThumbVertical" TargetType="{x:Type Thumb}">
    <Setter Property="OverridesDefaultStyle" Value="True"/>
    <Setter Property="IsTabStop" Value="False"/>
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type Thumb}">
          <aero10:ScrollBarChrome x:Name="Border"
                                  Orientation="Vertical"
                                  Background="{StaticResource ScrollBar.Thumb.Normal}"
                                  LightBorderBrush="{StaticResource ScrollBar.Border.Light}"
                                  DarkBorderBrush="{StaticResource ScrollBar.Border.Dark}"
                                  SnapsToDevicePixels="True"
                                  Width="{TemplateBinding Width}"
                                  Height="{TemplateBinding Height}"
                                  ParentElement="{Binding RelativeSource={RelativeSource TemplatedParent}}"
                                  RenderHover="{Binding IsMouseOver, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type ScrollBar}}}"
                                  VisualStateManager.CustomVisualStateManager="{x:Static aero:SystemVisualStateManager.Instance}">
            <VisualStateManager.VisualStateGroups>
              <VisualStateGroup x:Name="CommonStates">
                <VisualStateGroup.Transitions>
                  <VisualTransition From="Normal" To="MouseOver" GeneratedDuration="0:00:00.225"/>
                  <VisualTransition From="Normal" To="Pressed" GeneratedDuration="0:00:00.15"/>
                  <VisualTransition From="Normal" To="Disabled" GeneratedDuration="0:00:00"/>
                  <VisualTransition From="Normal" To="Hover" GeneratedDuration="0:00:00.225"/>
                  <VisualTransition From="MouseOver" To="Normal" GeneratedDuration="0:00:01.275"/>
                  <VisualTransition From="MouseOver" To="Pressed" GeneratedDuration="0:00:00.15"/>
                  <VisualTransition From="MouseOver" To="Disabled" GeneratedDuration="0:00:00"/>
                  <VisualTransition From="MouseOver" To="Hover" GeneratedDuration="0:00:01.275"/>
                  <VisualTransition From="Pressed" To="Normal" GeneratedDuration="0:00:00.225"/>
                  <VisualTransition From="Pressed" To="MouseOver" GeneratedDuration="0:00:00.225"/>
                  <VisualTransition From="Pressed" To="Disabled" GeneratedDuration="0:00:00"/>
                  <VisualTransition From="Pressed" To="Hover" GeneratedDuration="0:00:00.225"/>
                  <VisualTransition From="Disabled" To="Normal" GeneratedDuration="0:00:00.375"/>
                  <VisualTransition From="Disabled" To="MouseOver" GeneratedDuration="0:00:00"/>
                  <VisualTransition From="Disabled" To="Pressed" GeneratedDuration="0:00:00"/>
                  <VisualTransition From="Disabled" To="Hover" GeneratedDuration="0:00:00"/>
                  <VisualTransition From="Hover" To="Normal" GeneratedDuration="0:00:01.275"/>
                  <VisualTransition From="Hover" To="MouseOver" GeneratedDuration="0:00:00.225"/>
                  <VisualTransition From="Hover" To="Pressed" GeneratedDuration="0:00:00.15"/>
                  <VisualTransition From="Hover" To="Disabled" GeneratedDuration="0:00:00"/>
                </VisualStateGroup.Transitions>
                <VisualState x:Name="Normal"/>
                <VisualState x:Name="MouseOver">
                  <Storyboard>
                    <ColorAnimationUsingKeyFrames
                      Storyboard.TargetName="Border"
                      Storyboard.TargetProperty="Background.(SolidColorBrush.Color)">
                      <DiscreteColorKeyFrame KeyTime="0" Value="{StaticResource ScrollBar.Thumb.Hot.Color}"/>
                    </ColorAnimationUsingKeyFrames>
                  </Storyboard>
                </VisualState>
                <VisualState x:Name="Pressed">
                  <Storyboard>
                    <ColorAnimationUsingKeyFrames
                      Storyboard.TargetName="Border"
                      Storyboard.TargetProperty="Background.(SolidColorBrush.Color)">
                      <DiscreteColorKeyFrame KeyTime="0" Value="{StaticResource ScrollBar.Thumb.Pressed.Color}"/>
                    </ColorAnimationUsingKeyFrames>
                  </Storyboard>
                </VisualState>
                <VisualState x:Name="Disabled">
                  <Storyboard>
                    <ColorAnimationUsingKeyFrames
                      Storyboard.TargetName="Border"
                      Storyboard.TargetProperty="Background.(SolidColorBrush.Color)">
                      <DiscreteColorKeyFrame KeyTime="0" Value="{StaticResource ScrollBar.Thumb.Disabled.Color}"/>
                    </ColorAnimationUsingKeyFrames>
                    <ObjectAnimationUsingKeyFrames
                      Storyboard.TargetName="Border"
                      Storyboard.TargetProperty="Visibility">
                      <DiscreteObjectKeyFrame KeyTime="0" Value="{x:Static Visibility.Collapsed}"/>
                    </ObjectAnimationUsingKeyFrames>
                  </Storyboard>
                </VisualState>
                <VisualState x:Name="Hover">
                  <Storyboard>
                    <ColorAnimationUsingKeyFrames
                      Storyboard.TargetName="Border"
                      Storyboard.TargetProperty="Background.(SolidColorBrush.Color)">
                      <DiscreteColorKeyFrame KeyTime="0" Value="{StaticResource ScrollBar.Thumb.Hover.Color}"/>
                    </ColorAnimationUsingKeyFrames>
                  </Storyboard>
                </VisualState>
              </VisualStateGroup>
            </VisualStateManager.VisualStateGroups>
          </aero10:ScrollBarChrome>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>

  <Style x:Key="ScrollBarThumbHorizontal" TargetType="{x:Type Thumb}">
    <Setter Property="OverridesDefaultStyle" Value="True"/>
    <Setter Property="IsTabStop" Value="False"/>
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type Thumb}">
          <aero10:ScrollBarChrome x:Name="Border"
                                  Orientation="Horizontal"
                                  Background="{StaticResource ScrollBar.Thumb.Normal}"
                                  LightBorderBrush="{StaticResource ScrollBar.Border.Light}"
                                  DarkBorderBrush="{StaticResource ScrollBar.Border.Dark}"
                                  SnapsToDevicePixels="True"
                                  Width="{TemplateBinding Width}"
                                  Height="{TemplateBinding Height}"
                                  ParentElement="{Binding RelativeSource={RelativeSource TemplatedParent}}"
                                  RenderHover="{Binding IsMouseOver, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type ScrollBar}}}"
                                  VisualStateManager.CustomVisualStateManager="{x:Static aero:SystemVisualStateManager.Instance}">
            <VisualStateManager.VisualStateGroups>
              <VisualStateGroup x:Name="CommonStates">
                <VisualStateGroup.Transitions>
                  <VisualTransition From="Normal" To="MouseOver" GeneratedDuration="0:00:00.225"/>
                  <VisualTransition From="Normal" To="Pressed" GeneratedDuration="0:00:00.15"/>
                  <VisualTransition From="Normal" To="Disabled" GeneratedDuration="0:00:00"/>
                  <VisualTransition From="Normal" To="Hover" GeneratedDuration="0:00:00.225"/>
                  <VisualTransition From="MouseOver" To="Normal" GeneratedDuration="0:00:01.275"/>
                  <VisualTransition From="MouseOver" To="Pressed" GeneratedDuration="0:00:00.15"/>
                  <VisualTransition From="MouseOver" To="Disabled" GeneratedDuration="0:00:00"/>
                  <VisualTransition From="MouseOver" To="Hover" GeneratedDuration="0:00:01.275"/>
                  <VisualTransition From="Pressed" To="Normal" GeneratedDuration="0:00:00.225"/>
                  <VisualTransition From="Pressed" To="MouseOver" GeneratedDuration="0:00:00.225"/>
                  <VisualTransition From="Pressed" To="Disabled" GeneratedDuration="0:00:00"/>
                  <VisualTransition From="Pressed" To="Hover" GeneratedDuration="0:00:00.225"/>
                  <VisualTransition From="Disabled" To="Normal" GeneratedDuration="0:00:00.375"/>
                  <VisualTransition From="Disabled" To="MouseOver" GeneratedDuration="0:00:00"/>
                  <VisualTransition From="Disabled" To="Pressed" GeneratedDuration="0:00:00"/>
                  <VisualTransition From="Disabled" To="Hover" GeneratedDuration="0:00:00"/>
                  <VisualTransition From="Hover" To="Normal" GeneratedDuration="0:00:01.275"/>
                  <VisualTransition From="Hover" To="MouseOver" GeneratedDuration="0:00:00.225"/>
                  <VisualTransition From="Hover" To="Pressed" GeneratedDuration="0:00:00.15"/>
                  <VisualTransition From="Hover" To="Disabled" GeneratedDuration="0:00:00"/>
                </VisualStateGroup.Transitions>
                <VisualState x:Name="Normal"/>
                <VisualState x:Name="MouseOver">
                  <Storyboard>
                    <ColorAnimationUsingKeyFrames
                      Storyboard.TargetName="Border"
                      Storyboard.TargetProperty="Background.(SolidColorBrush.Color)">
                      <DiscreteColorKeyFrame KeyTime="0" Value="{StaticResource ScrollBar.Thumb.Hot.Color}"/>
                    </ColorAnimationUsingKeyFrames>
                  </Storyboard>
                </VisualState>
                <VisualState x:Name="Pressed">
                  <Storyboard>
                    <ColorAnimationUsingKeyFrames
                      Storyboard.TargetName="Border"
                      Storyboard.TargetProperty="Background.(SolidColorBrush.Color)">
                      <DiscreteColorKeyFrame KeyTime="0" Value="{StaticResource ScrollBar.Thumb.Pressed.Color}"/>
                    </ColorAnimationUsingKeyFrames>
                  </Storyboard>
                </VisualState>
                <VisualState x:Name="Disabled">
                  <Storyboard>
                    <ColorAnimationUsingKeyFrames
                      Storyboard.TargetName="Border"
                      Storyboard.TargetProperty="Background.(SolidColorBrush.Color)">
                      <DiscreteColorKeyFrame KeyTime="0" Value="{StaticResource ScrollBar.Thumb.Disabled.Color}"/>
                    </ColorAnimationUsingKeyFrames>
                    <ObjectAnimationUsingKeyFrames
                      Storyboard.TargetName="Border"
                      Storyboard.TargetProperty="Visibility">
                      <DiscreteObjectKeyFrame KeyTime="0" Value="{x:Static Visibility.Collapsed}"/>
                    </ObjectAnimationUsingKeyFrames>
                  </Storyboard>
                </VisualState>
                <VisualState x:Name="Hover">
                  <Storyboard>
                    <ColorAnimationUsingKeyFrames
                      Storyboard.TargetName="Border"
                      Storyboard.TargetProperty="Background.(SolidColorBrush.Color)">
                      <DiscreteColorKeyFrame KeyTime="0" Value="{StaticResource ScrollBar.Thumb.Hover.Color}"/>
                    </ColorAnimationUsingKeyFrames>
                  </Storyboard>
                </VisualState>
              </VisualStateGroup>
            </VisualStateManager.VisualStateGroups>
          </aero10:ScrollBarChrome>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>

  <Style x:Key="{x:Type ScrollBar}" TargetType="{x:Type ScrollBar}">
    <Setter Property="Stylus.IsPressAndHoldEnabled" Value="False"/>
    <Setter Property="Stylus.IsFlicksEnabled" Value="False"/>
    <Setter Property="Background" Value="{StaticResource ScrollBar.Background}"/>
    <Setter Property="BorderBrush" Value="{StaticResource ScrollBar.Border.Dark}"/>
    <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}"/>
    <Setter Property="BorderThickness" Value="1,0"/>
    <Setter Property="Width" Value="{DynamicResource {x:Static SystemParameters.VerticalScrollBarWidthKey}}"/>
    <Setter Property="MinWidth"
            Value="{DynamicResource {x:Static SystemParameters.VerticalScrollBarWidthKey}}"/>
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type ScrollBar}">
          <Grid SnapsToDevicePixels="True">
            <Grid.RowDefinitions>
              <RowDefinition
                MaxHeight="{DynamicResource {x:Static SystemParameters.VerticalScrollBarButtonHeightKey}}"/>
              <RowDefinition Height="0.00001*"/>
              <RowDefinition
                MaxHeight="{DynamicResource {x:Static SystemParameters.VerticalScrollBarButtonHeightKey}}"/>
            </Grid.RowDefinitions>
            <aero10:ScrollBarChrome Grid.Row="1"
                                    SnapsToDevicePixels="True"
                                    Background="{StaticResource ScrollBar.Background}"
                                    LightBorderBrush="{StaticResource ScrollBar.Border.Light}"
                                    DarkBorderBrush="{StaticResource ScrollBar.Border.Dark}"/>
            <RepeatButton x:Name="PART_LineUpButton"
                          Command="{x:Static ScrollBar.LineUpCommand}"
                          Style="{StaticResource ScrollBarButtonUp}"/>
            <Track x:Name="PART_Track"
                   Grid.Row="1"
                   IsDirectionReversed="True">
              <Track.DecreaseRepeatButton>
                <RepeatButton Command="{x:Static ScrollBar.PageUpCommand}"
                              Style="{StaticResource RepeatButtonTransparent}"/>
              </Track.DecreaseRepeatButton>
              <Track.IncreaseRepeatButton>
                <RepeatButton Command="{x:Static ScrollBar.PageDownCommand}"
                              Style="{StaticResource RepeatButtonTransparent}"/>
              </Track.IncreaseRepeatButton>
              <Track.Thumb>
                <Thumb Style="{StaticResource ScrollBarThumbVertical}"/>
              </Track.Thumb>
            </Track>
            <RepeatButton x:Name="PART_LineDownButton"
                          Grid.Row="2"
                          Command="{x:Static ScrollBar.LineDownCommand}"
                          Style="{StaticResource ScrollBarButtonDown}"/>
          </Grid>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
    <Style.Triggers>
      <Trigger Property="Orientation" Value="Horizontal">
        <Setter Property="Width" Value="Auto"/>
        <Setter Property="MinWidth" Value="0"/>
        <Setter Property="Height"
                Value="{DynamicResource {x:Static SystemParameters.HorizontalScrollBarHeightKey}}"/>
        <Setter Property="MinHeight"
                Value="{DynamicResource {x:Static SystemParameters.HorizontalScrollBarHeightKey}}"/>
        <Setter Property="BorderThickness" Value="0,1"/>
        <Setter Property="Template">
          <Setter.Value>
            <ControlTemplate TargetType="{x:Type ScrollBar}">
              <Grid SnapsToDevicePixels="True">
                <Grid.ColumnDefinitions>
                  <ColumnDefinition
                    MaxWidth="{DynamicResource {x:Static SystemParameters.HorizontalScrollBarButtonWidthKey}}"/>
                  <ColumnDefinition Width="0.00001*"/>
                  <ColumnDefinition
                    MaxWidth="{DynamicResource {x:Static SystemParameters.HorizontalScrollBarButtonWidthKey}}"/>
                </Grid.ColumnDefinitions>
                <aero10:ScrollBarChrome Grid.Column="1"
                                        Orientation="Horizontal"
                                        SnapsToDevicePixels="True"
                                        Background="{StaticResource ScrollBar.Background}"
                                        LightBorderBrush="{StaticResource ScrollBar.Border.Light}"
                                        DarkBorderBrush="{StaticResource ScrollBar.Border.Dark}"/>
                <RepeatButton x:Name="PART_LineLeftButton"
                              Command="{x:Static ScrollBar.LineLeftCommand}"
                              Style="{StaticResource ScrollBarButtonLeft}"/>
                <Track x:Name="PART_Track" Grid.Column="1">
                  <Track.DecreaseRepeatButton>
                    <RepeatButton Command="{x:Static ScrollBar.PageLeftCommand}"
                                  Style="{StaticResource RepeatButtonTransparent}"/>
                  </Track.DecreaseRepeatButton>
                  <Track.IncreaseRepeatButton>
                    <RepeatButton Command="{x:Static ScrollBar.PageRightCommand}"
                                  Style="{StaticResource RepeatButtonTransparent}"/>
                  </Track.IncreaseRepeatButton>
                  <Track.Thumb>
                    <Thumb Style="{StaticResource ScrollBarThumbHorizontal}"/>
                  </Track.Thumb>
                </Track>
                <RepeatButton x:Name="PART_LineRightButton"
                              Grid.Column="2"
                              Command="{x:Static ScrollBar.LineRightCommand}"
                              Style="{StaticResource ScrollBarButtonRight}"/>
              </Grid>
            </ControlTemplate>
          </Setter.Value>
        </Setter>
      </Trigger>
    </Style.Triggers>
  </Style>

  <!-- TreeView ============================================================ -->

  <PathGeometry x:Key="TreeArrow">
    <PathGeometry.Figures>
      <PathFigureCollection>
        <PathFigure IsFilled="True" StartPoint="0 0" IsClosed="True">
          <PathFigure.Segments>
            <PathSegmentCollection>
              <LineSegment Point="0 6"/>
              <LineSegment Point="6 0"/>
            </PathSegmentCollection>
          </PathFigure.Segments>
        </PathFigure>
      </PathFigureCollection>
    </PathGeometry.Figures>
  </PathGeometry>

  <DrawingImage x:Key="TreeViewGlyphMinus">
    <DrawingImage.Drawing>
      <DrawingGroup>
        <GeometryDrawing Brush="#FFBABBBC" Geometry="M0,0 1,0 1,1 0,1 z  M8,0 9,0 9,1 8,1 z  M8,8 9,8 9,9 8,9 z  M0,8 1,8 1,9 0,9 z"/>
        <GeometryDrawing Brush="#FF919191" Geometry="M1,0 8,0 8,1 1,1 z  M9,1 9,8 8,8 8,1 z  M8,9 1,9 1,8 8,8 z  M0,8 0,1 1,1 1,8 z"/>
        <GeometryDrawing Brush="#FFFAFBFB" Geometry="M1,1 8,1 8,4 1,4 z"/>
        <GeometryDrawing Brush="#FFEDEDEC" Geometry="M1,4 8,4 8,6 1,6 z"/>
        <GeometryDrawing Brush="#FFE3E3E3" Geometry="M1,6 8,6 8,8 1,8 z"/>
        <GeometryDrawing Brush="#FF4B63A7" Geometry="M2,4 7,4 7,5 2,5 z"/>
      </DrawingGroup>
    </DrawingImage.Drawing>
  </DrawingImage>

  <DrawingImage x:Key="TreeViewGlyphPlus">
    <DrawingImage.Drawing>
      <DrawingGroup>
        <GeometryDrawing Brush="#FFBABBBC" Geometry="M0,0 1,0 1,1 0,1 z  M8,0 9,0 9,1 8,1 z  M8,8 9,8 9,9 8,9 z  M0,8 1,8 1,9 0,9 z"/>
        <GeometryDrawing Brush="#FF919191" Geometry="M1,0 8,0 8,1 1,1 z  M9,1 9,8 8,8 8,1 z  M8,9 1,9 1,8 8,8 z  M0,8 0,1 1,1 1,8 z"/>
        <GeometryDrawing Brush="#FFFAFBFB" Geometry="M1,1 8,1 8,5 1,5 z"/>
        <GeometryDrawing Brush="#FFEDEDEC" Geometry="M1,5 8,5 8,6 1,6 z"/>
        <GeometryDrawing Brush="#FFE3E3E3" Geometry="M1,6 8,6 8,8 1,8 z"/>
        <GeometryDrawing Brush="#FF294272" Geometry="M4,2 5,2 5,7 4,7 z"/>
        <GeometryDrawing Brush="#FF4B63A7" Geometry="M2,4 7,4 7,5 2,5 z"/>
      </DrawingGroup>
    </DrawingImage.Drawing>
  </DrawingImage>

  <Style x:Key="TreeViewExpanderStyle" TargetType="{x:Type ToggleButton}">
    <Setter Property="Focusable" Value="False"/>
    <Setter Property="Width" Value="19"/>
    <Setter Property="VerticalAlignment" Value="Stretch"/>
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type ToggleButton}">
          <Border Background="Transparent">
            <Image x:Name="Glyph" Source="{StaticResource TreeViewGlyphPlus}"
                   Width="9" Height="9" Margin="0,3,0,0"/>
          </Border>
          <ControlTemplate.Triggers>
            <Trigger Property="IsChecked" Value="True">
              <Setter TargetName="Glyph" Property="Source" Value="{StaticResource TreeViewGlyphMinus}"/>
            </Trigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>

  <ControlTemplate x:Key="TreeViewItem.Template.Default" TargetType="{x:Type TreeViewItem}">
    <Grid>
      <Grid.ColumnDefinitions>
        <ColumnDefinition Width="Auto" MinWidth="19"/>
        <ColumnDefinition Width="*"/>
      </Grid.ColumnDefinitions>
      <Grid.RowDefinitions>
        <RowDefinition Height="Auto"/>
        <RowDefinition/>
      </Grid.RowDefinitions>
      <ToggleButton x:Name="Expander"
                    Style="{StaticResource TreeViewExpanderStyle}"
                    Margin="3,0,0,0"
                    IsChecked="{Binding IsExpanded, RelativeSource={RelativeSource TemplatedParent}}"
                    ClickMode="Press"/>
      <Border x:Name="Bd"
              Grid.Column="1"
              Background="{TemplateBinding Background}"
              BorderBrush="{TemplateBinding BorderBrush}"
              BorderThickness="{TemplateBinding BorderThickness}"
              Padding="{TemplateBinding Padding}"
              HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
              SnapsToDevicePixels="True">
        <ContentPresenter x:Name="PART_Header"
                          ContentSource="Header"
                          SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"/>
      </Border>
      <ItemsPresenter x:Name="ItemsHost"
                      Margin="19,0,0,0"
                      Grid.Row="1"
                      Grid.ColumnSpan="2"/>
    </Grid>
    <ControlTemplate.Triggers>
      <Trigger Property="IsExpanded" Value="False">
        <Setter TargetName="ItemsHost" Property="Visibility" Value="Collapsed"/>
      </Trigger>
      <Trigger Property="HasItems" Value="False">
        <Setter TargetName="Expander" Property="Visibility" Value="Hidden"/>
      </Trigger>
      <Trigger Property="IsSelected" Value="True">
        <Setter TargetName="Bd" Property="Background"
                Value="{DynamicResource {x:Static SystemColors.HighlightBrushKey}}"/>
        <Setter Property="Foreground"
                Value="{DynamicResource {x:Static SystemColors.HighlightTextBrushKey}}"/>
      </Trigger>
      <MultiTrigger>
        <MultiTrigger.Conditions>
          <Condition Property="IsSelected" Value="True"/>
          <Condition Property="IsSelectionActive" Value="False"/>
        </MultiTrigger.Conditions>
        <Setter TargetName="Bd" Property="Background"
                Value="{DynamicResource {x:Static SystemColors.InactiveSelectionHighlightBrushKey}}"/>
        <Setter Property="Foreground"
                Value="{DynamicResource {x:Static SystemColors.InactiveSelectionHighlightTextBrushKey}}"/>
      </MultiTrigger>
      <Trigger Property="IsEnabled" Value="False">
        <Setter Property="Foreground"
                Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}"/>
      </Trigger>
    </ControlTemplate.Triggers>
  </ControlTemplate>

  <ControlTemplate x:Key="TreeViewItem.Template.FullRowSelect" TargetType="{x:Type TreeViewItem}">
    <Grid>
      <Grid.RowDefinitions>
        <RowDefinition Height="Auto"/>
        <RowDefinition/>
      </Grid.RowDefinitions>
      <Border x:Name="Bd"
              Background="{TemplateBinding Background}"
              BorderBrush="{TemplateBinding BorderBrush}"
              BorderThickness="{TemplateBinding BorderThickness}"
              SnapsToDevicePixels="True">
        <Grid>
          <Grid.ColumnDefinitions>
            <ColumnDefinition Width="1e300">
              <ColumnDefinition.MaxWidth>
                <Binding RelativeSource="{RelativeSource TemplatedParent}"
                         Converter="{x:Static aero:TreeViewItemLevelConverter.Instance}">
                  <Binding.ConverterParameter>
                    <system:Int32>19</system:Int32>
                  </Binding.ConverterParameter>
                </Binding>
              </ColumnDefinition.MaxWidth>
            </ColumnDefinition>
            <ColumnDefinition Width="Auto" MinWidth="19"/>
            <ColumnDefinition Width="*"/>
          </Grid.ColumnDefinitions>
          <ToggleButton x:Name="Expander" Grid.Column="1"
                        Style="{StaticResource TreeViewExpanderStyle}"
                        Margin="3,0,0,0"
                        IsChecked="{Binding IsExpanded, RelativeSource={RelativeSource TemplatedParent}}"
                        ClickMode="Press"/>
          <ContentPresenter x:Name="PART_Header" Grid.Column="2"
                            ContentSource="Header"
                            Margin="{TemplateBinding Padding}"
                            HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                            SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"/>
        </Grid>
      </Border>
      <ItemsPresenter x:Name="ItemsHost" Grid.Row="1"/>
    </Grid>
    <ControlTemplate.Triggers>
      <Trigger Property="IsExpanded" Value="False">
        <Setter TargetName="ItemsHost" Property="Visibility" Value="Collapsed"/>
      </Trigger>
      <Trigger Property="HasItems" Value="False">
        <Setter TargetName="Expander" Property="Visibility" Value="Hidden"/>
      </Trigger>
      <Trigger Property="IsSelected" Value="True">
        <Setter TargetName="Bd" Property="Background"
                Value="{DynamicResource {x:Static SystemColors.HighlightBrushKey}}"/>
        <Setter Property="Foreground"
                Value="{DynamicResource {x:Static SystemColors.HighlightTextBrushKey}}"/>
      </Trigger>
      <MultiTrigger>
        <MultiTrigger.Conditions>
          <Condition Property="IsSelected" Value="True"/>
          <Condition Property="IsSelectionActive" Value="False"/>
        </MultiTrigger.Conditions>
        <Setter TargetName="Bd" Property="Background"
                Value="{DynamicResource {x:Static SystemColors.InactiveSelectionHighlightBrushKey}}"/>
        <Setter Property="Foreground"
                Value="{DynamicResource {x:Static SystemColors.InactiveSelectionHighlightTextBrushKey}}"/>
      </MultiTrigger>
      <Trigger Property="IsEnabled" Value="False">
        <Setter Property="Foreground"
                Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}"/>
      </Trigger>
    </ControlTemplate.Triggers>
  </ControlTemplate>

  <Geometry x:Key="ExplorerTreeViewGlyphPlus">
    F1 M4.88,5.12 6.119,3.881 10.119,7.881 10.737,8.5 6.119,13.119 4.881,11.881 8.881,7.881 9.5,8.5 8.881,9.119 4.881,5.119 z
  </Geometry>

  <Geometry x:Key="ExplorerTreeViewGlyphMinus">
    F1 M2.88,6.12 4.119,4.881 8.119,8.881 7.5,9.5 6.881,8.881 10.881,4.881 12.119,6.119 7.5,10.737 6.881,10.119 2.881,6.119 z
  </Geometry>

  <Style x:Key="ExplorerTreeViewExpanderStyle" TargetType="{x:Type ToggleButton}">
    <Setter Property="Focusable" Value="False"/>
    <Setter Property="Width" Value="19"/>
    <Setter Property="VerticalAlignment" Value="Stretch"/>
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type ToggleButton}">
          <Border Background="Transparent">
            <Path x:Name="Glyph" Data="{StaticResource ExplorerTreeViewGlyphPlus}"
                  Stretch="None" Fill="#59000000" Margin="0,1,0,0"/>
          </Border>
          <ControlTemplate.Triggers>
            <Trigger Property="IsChecked" Value="True">
              <Setter TargetName="Glyph" Property="Data" Value="{StaticResource ExplorerTreeViewGlyphMinus}"/>
              <Setter TargetName="Glyph" Property="Fill" Value="#BF000000"/>
            </Trigger>
            <Trigger Property="IsMouseOver" Value="True">
              <Setter TargetName="Glyph" Property="Fill" Value="#BF1CC4F7"/>
            </Trigger>
            <MultiTrigger>
              <MultiTrigger.Conditions>
                <Condition Property="IsChecked" Value="True"/>
                <Condition Property="IsMouseOver" Value="True"/>
              </MultiTrigger.Conditions>
              <Setter TargetName="Glyph" Property="Fill" Value="#FF1CC4F7"/>
            </MultiTrigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>

  <ControlTemplate x:Key="ExplorerTreeViewItem.Template.Default" TargetType="{x:Type TreeViewItem}">
    <Grid>
      <Grid.ColumnDefinitions>
        <ColumnDefinition Width="Auto" MinWidth="19"/>
        <ColumnDefinition Width="*"/>
      </Grid.ColumnDefinitions>
      <Grid.RowDefinitions>
        <RowDefinition Height="Auto"/>
        <RowDefinition/>
      </Grid.RowDefinitions>
      <ToggleButton x:Name="Expander"
                    Style="{StaticResource ExplorerTreeViewExpanderStyle}"
                    Margin="3,0,0,0"
                    IsChecked="{Binding IsExpanded, RelativeSource={RelativeSource TemplatedParent}}"
                    ClickMode="Press"/>
      <Border x:Name="Bd"
              Grid.Column="1"
              Background="{TemplateBinding Background}"
              BorderBrush="{TemplateBinding BorderBrush}"
              BorderThickness="{TemplateBinding BorderThickness}"
              Padding="{TemplateBinding Padding}"
              HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
              SnapsToDevicePixels="True">
        <ContentPresenter x:Name="PART_Header"
                          ContentSource="Header"
                          SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"/>
      </Border>
      <ItemsPresenter x:Name="ItemsHost"
                      Margin="19,0,0,0"
                      Grid.Row="1"
                      Grid.ColumnSpan="2"/>
    </Grid>
    <ControlTemplate.Triggers>
      <Trigger Property="IsExpanded" Value="False">
        <Setter TargetName="ItemsHost" Property="Visibility" Value="Collapsed"/>
      </Trigger>
      <Trigger Property="HasItems" Value="False">
        <Setter TargetName="Expander" Property="Visibility" Value="Hidden"/>
      </Trigger>
      <MultiTrigger>
        <MultiTrigger.Conditions>
          <Condition SourceName="Bd" Property="IsMouseOver" Value="True"/>
          <Condition Property="IsSelected" Value="True"/>
        </MultiTrigger.Conditions>
        <Setter TargetName="Bd" Property="Background" Value="{StaticResource ExplorerListViewItem.Background.HotSelected}"/>
        <Setter TargetName="Bd" Property="BorderBrush" Value="{StaticResource ExplorerListViewItem.Border.HotSelected}"/>
      </MultiTrigger>
      <MultiTrigger>
        <MultiTrigger.Conditions>
          <Condition SourceName="Bd" Property="IsMouseOver" Value="True"/>
          <Condition Property="IsSelected" Value="False"/>
        </MultiTrigger.Conditions>
        <Setter TargetName="Bd" Property="Background" Value="{StaticResource ExplorerListViewItem.Background.Hot}"/>
        <Setter TargetName="Bd" Property="BorderBrush" Value="{StaticResource ExplorerListViewItem.Border.Hot}"/>
      </MultiTrigger>
      <MultiTrigger>
        <MultiTrigger.Conditions>
          <Condition SourceName="Bd" Property="IsMouseOver" Value="False"/>
          <Condition Property="IsSelected" Value="True"/>
        </MultiTrigger.Conditions>
        <Setter TargetName="Bd" Property="Background" Value="{StaticResource ExplorerListViewItem.Background.Selected}"/>
        <Setter TargetName="Bd" Property="BorderBrush" Value="{StaticResource ExplorerListViewItem.Border.Selected}"/>
      </MultiTrigger>
      <MultiTrigger>
        <MultiTrigger.Conditions>
          <Condition Property="IsSelected" Value="True"/>
          <Condition Property="IsSelectionActive" Value="False"/>
        </MultiTrigger.Conditions>
        <Setter TargetName="Bd" Property="Background" Value="{StaticResource ExplorerListViewItem.Background.SelectedNotFocus}"/>
        <Setter TargetName="Bd" Property="BorderBrush" Value="{StaticResource ExplorerListViewItem.Border.SelectedNotFocus}"/>
      </MultiTrigger>
      <Trigger Property="IsEnabled" Value="False">
        <Setter Property="Foreground"
                Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}"/>
      </Trigger>
    </ControlTemplate.Triggers>
  </ControlTemplate>

  <aero10:InvertThicknessConverter x:Key="InvertMarginConverter"/>

  <ControlTemplate x:Key="ExplorerTreeViewItem.Template.FullRowSelect" TargetType="{x:Type TreeViewItem}">
    <Grid>
      <Grid.RowDefinitions>
        <RowDefinition Height="Auto"/>
        <RowDefinition/>
      </Grid.RowDefinitions>
      <Border x:Name="Bd"
              Background="{TemplateBinding Background}"
              BorderBrush="{TemplateBinding BorderBrush}"
              BorderThickness="{TemplateBinding BorderThickness}"
              SnapsToDevicePixels="True">
        <Grid Margin="{Binding BorderThickness, RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource InvertMarginConverter}}">
          <Grid.ColumnDefinitions>
            <ColumnDefinition Width="1e300">
              <ColumnDefinition.MaxWidth>
                <Binding RelativeSource="{RelativeSource TemplatedParent}"
                         Converter="{x:Static aero:TreeViewItemLevelConverter.Instance}">
                  <Binding.ConverterParameter>
                    <system:Int32>19</system:Int32>
                  </Binding.ConverterParameter>
                </Binding>
              </ColumnDefinition.MaxWidth>
            </ColumnDefinition>
            <ColumnDefinition Width="Auto" MinWidth="19"/>
            <ColumnDefinition Width="*"/>
          </Grid.ColumnDefinitions>
          <ToggleButton x:Name="Expander" Grid.Column="1"
                        Style="{StaticResource ExplorerTreeViewExpanderStyle}"
                        Margin="3,0,0,0"
                        IsChecked="{Binding IsExpanded, RelativeSource={RelativeSource TemplatedParent}}"
                        ClickMode="Press"/>
          <ContentPresenter x:Name="PART_Header" Grid.Column="2"
                            ContentSource="Header"
                            Margin="{TemplateBinding Padding}"
                            HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                            SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"/>
        </Grid>
      </Border>
      <ItemsPresenter x:Name="ItemsHost" Grid.Row="1"/>
    </Grid>
    <ControlTemplate.Triggers>
      <Trigger Property="IsExpanded" Value="False">
        <Setter TargetName="ItemsHost" Property="Visibility" Value="Collapsed"/>
      </Trigger>
      <Trigger Property="HasItems" Value="False">
        <Setter TargetName="Expander" Property="Visibility" Value="Hidden"/>
      </Trigger>
      <MultiTrigger>
        <MultiTrigger.Conditions>
          <Condition SourceName="Bd" Property="IsMouseOver" Value="True"/>
          <Condition Property="IsSelected" Value="True"/>
        </MultiTrigger.Conditions>
        <Setter TargetName="Bd" Property="Background" Value="{StaticResource ExplorerListViewItem.Background.HotSelected}"/>
        <Setter TargetName="Bd" Property="BorderBrush" Value="{StaticResource ExplorerListViewItem.Border.HotSelected}"/>
      </MultiTrigger>
      <MultiTrigger>
        <MultiTrigger.Conditions>
          <Condition SourceName="Bd" Property="IsMouseOver" Value="True"/>
          <Condition Property="IsSelected" Value="False"/>
        </MultiTrigger.Conditions>
        <Setter TargetName="Bd" Property="Background" Value="{StaticResource ExplorerListViewItem.Background.Hot}"/>
        <Setter TargetName="Bd" Property="BorderBrush" Value="{StaticResource ExplorerListViewItem.Border.Hot}"/>
      </MultiTrigger>
      <MultiTrigger>
        <MultiTrigger.Conditions>
          <Condition SourceName="Bd" Property="IsMouseOver" Value="False"/>
          <Condition Property="IsSelected" Value="True"/>
        </MultiTrigger.Conditions>
        <Setter TargetName="Bd" Property="Background" Value="{StaticResource ExplorerListViewItem.Background.Selected}"/>
        <Setter TargetName="Bd" Property="BorderBrush" Value="{StaticResource ExplorerListViewItem.Border.Selected}"/>
      </MultiTrigger>
      <MultiTrigger>
        <MultiTrigger.Conditions>
          <Condition Property="IsSelected" Value="True"/>
          <Condition Property="IsSelectionActive" Value="False"/>
        </MultiTrigger.Conditions>
        <Setter TargetName="Bd" Property="Background" Value="{StaticResource ExplorerListViewItem.Background.SelectedNotFocus}"/>
        <Setter TargetName="Bd" Property="BorderBrush" Value="{StaticResource ExplorerListViewItem.Border.SelectedNotFocus}"/>
      </MultiTrigger>
      <Trigger Property="IsEnabled" Value="False">
        <Setter Property="Foreground"
                Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}"/>
      </Trigger>
    </ControlTemplate.Triggers>
  </ControlTemplate>

  <ControlTemplate x:Key="ExplorerTreeView.Template" TargetType="{x:Type TreeView}">
    <Border x:Name="Border"
            BorderBrush="{TemplateBinding BorderBrush}"
            BorderThickness="{TemplateBinding BorderThickness}"
            SnapsToDevicePixels="True">
      <Grid>
        <Grid.RowDefinitions>
          <RowDefinition Height="Auto"/>
          <RowDefinition/>
        </Grid.RowDefinitions>
        <ScrollViewer x:Name="ScrollViewer" Grid.Row="1"
                      Background="{TemplateBinding Background}"
                      Focusable="False"
                      CanContentScroll="False"
                      HorizontalScrollBarVisibility="{TemplateBinding ScrollViewer.HorizontalScrollBarVisibility}"
                      VerticalScrollBarVisibility="{TemplateBinding ScrollViewer.VerticalScrollBarVisibility}"
                      Padding="{TemplateBinding Padding}"
                      SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}">
          <ItemsPresenter/>
        </ScrollViewer>
      </Grid>
    </Border>
    <ControlTemplate.Triggers>
      <Trigger Property="IsEnabled" Value="False">
        <Setter TargetName="Border" Property="Background"
                Value="{DynamicResource {x:Static SystemColors.ControlBrushKey}}"/>
      </Trigger>
      <Trigger Property="VirtualizingPanel.IsVirtualizing" Value="True">
        <Setter TargetName="ScrollViewer" Property="CanContentScroll"
                Value="True"/>
      </Trigger>
    </ControlTemplate.Triggers>
  </ControlTemplate>

  <Style TargetType="{x:Type TreeView}">
    <Setter Property="Background" Value="{StaticResource ListBox.Background.Normal}"/>
    <Setter Property="BorderBrush" Value="{StaticResource ListBox.Border.Normal}"/>
    <Setter Property="BorderThickness" Value="1"/>
    <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}"/>
    <Setter Property="Padding" Value="1"/>
    <Setter Property="ScrollViewer.HorizontalScrollBarVisibility" Value="Auto"/>
    <Setter Property="ScrollViewer.VerticalScrollBarVisibility" Value="Auto"/>
    <Setter Property="ScrollViewer.PanningMode" Value="Both"/>
    <Setter Property="Stylus.IsFlicksEnabled" Value="False"/>
    <Setter Property="KeyboardNavigation.TabNavigation" Value="Once"/>
    <Setter Property="HorizontalContentAlignment" Value="Left"/>
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type TreeView}">
          <Border x:Name="Border"
                  BorderBrush="{TemplateBinding BorderBrush}"
                  BorderThickness="{TemplateBinding BorderThickness}"
                  Padding="{TemplateBinding Padding}"
                  SnapsToDevicePixels="True">
            <ScrollViewer x:Name="ScrollViewer"
                          Background="{TemplateBinding Background}"
                          CanContentScroll="False"
                          HorizontalScrollBarVisibility="{TemplateBinding ScrollViewer.HorizontalScrollBarVisibility}"
                          VerticalScrollBarVisibility="{TemplateBinding ScrollViewer.VerticalScrollBarVisibility}"
                          SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}">
              <ItemsPresenter/>
            </ScrollViewer>
          </Border>
          <ControlTemplate.Triggers>
            <Trigger Property="IsEnabled" Value="False">
              <Setter TargetName="Border" Property="Background"
                      Value="{DynamicResource {x:Static SystemColors.ControlBrushKey}}"/>
            </Trigger>
            <Trigger Property="VirtualizingPanel.IsVirtualizing" Value="True">
              <Setter TargetName="ScrollViewer" Property="CanContentScroll"
                      Value="True"/>
            </Trigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
    <Style.Triggers>
      <Trigger Property="VirtualizingPanel.IsVirtualizing" Value="True">
        <Setter Property="ItemsPanel">
          <Setter.Value>
            <ItemsPanelTemplate>
              <VirtualizingStackPanel/>
            </ItemsPanelTemplate>
          </Setter.Value>
        </Setter>
      </Trigger>
      <Trigger Property="aero:TreeViewService.UseExplorerStyle" Value="True">
        <Setter Property="Template" Value="{StaticResource ExplorerTreeView.Template}"/>
      </Trigger>
    </Style.Triggers>
  </Style>

  <Style TargetType="{x:Type TreeViewItem}">
    <Setter Property="FocusVisualStyle" Value="{x:Null}"/>
    <Setter Property="Background" Value="Transparent"/>
    <Setter Property="HorizontalContentAlignment"
            Value="{Binding HorizontalContentAlignment, RelativeSource={RelativeSource AncestorType={x:Type ItemsControl}}}"/>
    <Setter Property="VerticalContentAlignment"
            Value="{Binding VerticalContentAlignment, RelativeSource={RelativeSource AncestorType={x:Type ItemsControl}}}"/>
    <Setter Property="Padding" Value="2,1,2,2"/>
    <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}"/>
    <Setter Property="Template" Value="{StaticResource TreeViewItem.Template.Default}"/>
    <Style.Triggers>
      <Trigger Property="VirtualizingPanel.IsVirtualizing" Value="True">
        <Setter Property="ItemsPanel">
          <Setter.Value>
            <ItemsPanelTemplate>
              <VirtualizingStackPanel/>
            </ItemsPanelTemplate>
          </Setter.Value>
        </Setter>
      </Trigger>
      <Trigger Property="aero:TreeViewService.FullRowSelect" Value="True">
        <Setter Property="Template" Value="{StaticResource TreeViewItem.Template.FullRowSelect}"/>
      </Trigger>
      <Trigger Property="aero:TreeViewService.UseExplorerStyle" Value="True">
        <Setter Property="Background" Value="Transparent"/>
        <Setter Property="BorderBrush" Value="Transparent"/>
        <Setter Property="BorderThickness" Value="1"/>
        <!--<Setter Property="Padding" Value="3,0,3,1"/>-->
        <Setter Property="Padding" Value="1,0,1,1"/>
        <Setter Property="Template" Value="{StaticResource ExplorerTreeViewItem.Template.Default}"/>
      </Trigger>
      <MultiTrigger>
        <MultiTrigger.Conditions>
          <Condition Property="aero:TreeViewService.FullRowSelect" Value="True"/>
          <Condition Property="aero:TreeViewService.UseExplorerStyle" Value="True"/>
        </MultiTrigger.Conditions>
        <Setter Property="Padding" Value="2,1,2,2"/>
        <Setter Property="Template" Value="{StaticResource ExplorerTreeViewItem.Template.FullRowSelect}"/>
      </MultiTrigger>
    </Style.Triggers>
  </Style>

  <Style x:Key="{x:Static aero10:ExplorerStyles.TreeViewItemStyleKey}" TargetType="{x:Type TreeViewItem}">
    <Setter Property="Background" Value="Transparent"/>
    <Setter Property="BorderBrush" Value="Transparent"/>
    <Setter Property="BorderThickness" Value="1"/>
    <Setter Property="HorizontalContentAlignment"
            Value="{Binding HorizontalContentAlignment, RelativeSource={RelativeSource AncestorType={x:Type ItemsControl}}}"/>
    <Setter Property="VerticalContentAlignment"
            Value="{Binding VerticalContentAlignment,RelativeSource={RelativeSource AncestorType={x:Type ItemsControl}}}"/>
    <Setter Property="Padding" Value="3,0,3,1"/>
    <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}"/>
    <Setter Property="Template" Value="{StaticResource ExplorerTreeViewItem.Template.Default}"/>
    <Style.Triggers>
      <Trigger Property="VirtualizingPanel.IsVirtualizing" Value="True">
        <Setter Property="ItemsPanel">
          <Setter.Value>
            <ItemsPanelTemplate>
              <VirtualizingStackPanel/>
            </ItemsPanelTemplate>
          </Setter.Value>
        </Setter>
      </Trigger>
      <Trigger Property="aero:TreeViewService.FullRowSelect" Value="True">
        <Setter Property="Padding" Value="1,0,0,1"/>
        <Setter Property="Template" Value="{StaticResource ExplorerTreeViewItem.Template.FullRowSelect}"/>
      </Trigger>
    </Style.Triggers>
  </Style>

  <Style x:Key="{x:Static aero10:ExplorerStyles.TreeViewStyleKey}" TargetType="{x:Type TreeView}">
    <Style.Resources>
      <Style x:Key="{x:Type TreeViewItem}" TargetType="{x:Type TreeViewItem}"
             BasedOn="{StaticResource {x:Static aero10:ExplorerStyles.TreeViewItemStyleKey}}"/>
    </Style.Resources>
    <Setter Property="Background" Value="{StaticResource ListBox.Background.Normal}"/>
    <Setter Property="BorderBrush" Value="{StaticResource ListBox.Border.Normal}"/>
    <Setter Property="BorderThickness" Value="1"/>
    <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}"/>
    <Setter Property="Padding" Value="1"/>
    <Setter Property="ScrollViewer.HorizontalScrollBarVisibility" Value="Auto"/>
    <Setter Property="ScrollViewer.VerticalScrollBarVisibility" Value="Auto"/>
    <Setter Property="ScrollViewer.PanningMode" Value="Both"/>
    <Setter Property="Stylus.IsFlicksEnabled" Value="False"/>
    <Setter Property="KeyboardNavigation.TabNavigation" Value="Once"/>
    <Setter Property="Template" Value="{StaticResource ExplorerTreeView.Template}"/>
    <Style.Triggers>
      <Trigger Property="VirtualizingPanel.IsVirtualizing" Value="True">
        <Setter Property="ItemsPanel">
          <Setter.Value>
            <ItemsPanelTemplate>
              <VirtualizingStackPanel/>
            </ItemsPanelTemplate>
          </Setter.Value>
        </Setter>
      </Trigger>
    </Style.Triggers>
  </Style>


  <!-- TabControl ========================================================== -->

  <SolidColorBrush x:Key="TabItem.Background.Normal" Color="#FFF0F0F0" po:Freeze="True"/>
  <SolidColorBrush x:Key="TabItem.Border.Normal" Color="#FFD9D9D9" po:Freeze="True"/>

  <SolidColorBrush x:Key="TabItem.Background.Hot" Color="#FFD8EAF9" po:Freeze="True"/>
  <SolidColorBrush x:Key="TabItem.Border.Hot" Color="#FFD9D9D9" po:Freeze="True"/>

  <SolidColorBrush x:Key="TabItem.Background.Selected" Color="#FFFFFFFF" po:Freeze="True"/>
  <SolidColorBrush x:Key="TabItem.Border.Selected" Color="#FFD9D9D9" po:Freeze="True"/>

  <SolidColorBrush x:Key="TabItem.Background.Disabled" Color="#FFECECEC" po:Freeze="True"/>
  <SolidColorBrush x:Key="TabItem.Border.Disabled" Color="#FFD9D9D9" po:Freeze="True"/>

  <Style TargetType="{x:Type TabControl}">
    <Setter Property="Padding" Value="6,4,6,6"/>
    <Setter Property="HorizontalContentAlignment" Value="Center"/>
    <Setter Property="VerticalContentAlignment" Value="Center"/>
    <Setter Property="Background" Value="{StaticResource TabItem.Background.Selected}"/>
    <Setter Property="BorderBrush" Value="{StaticResource TabItem.Border.Selected}"/>
    <Setter Property="BorderThickness" Value="1"/>
    <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}"/>
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type TabControl}">
          <Grid x:Name="TemplateRoot"
                        ClipToBounds="True"
                        SnapsToDevicePixels="True"
                        KeyboardNavigation.TabNavigation="Local">
            <Grid.ColumnDefinitions>
              <ColumnDefinition x:Name="ColumnDefinition0"/>
              <ColumnDefinition x:Name="ColumnDefinition1" Width="0"/>
            </Grid.ColumnDefinitions>
            <Grid.RowDefinitions>
              <RowDefinition x:Name="RowDefinition0" Height="Auto"/>
              <RowDefinition x:Name="RowDefinition1" Height="*"/>
            </Grid.RowDefinitions>
            <aero10:TabPanelEx
                      x:Name="HeaderPanel"
                      SelectedTab="{TemplateBinding SelectedItem}"
                      Background="Transparent"
                      IsItemsHost="True"
                      Margin="2,2,2,0"
                      KeyboardNavigation.TabIndex="1"
                      Panel.ZIndex="1"/>
            <Border x:Name="ContentPanel"
                    Grid.Row="1"
                    KeyboardNavigation.DirectionalNavigation="Contained"
                    KeyboardNavigation.TabNavigation="Local"
                    KeyboardNavigation.TabIndex="2"
                    BorderThickness="{TemplateBinding BorderThickness}"
                    Background="{TemplateBinding Background}"
                    BorderBrush="{TemplateBinding BorderBrush}">
              <ContentPresenter x:Name="PART_SelectedContentHost"
                                SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
                                Margin="{TemplateBinding Padding}"
                                ContentSource="SelectedContent"/>
            </Border>
          </Grid>
          <ControlTemplate.Triggers>
            <Trigger Property="TabStripPlacement" Value="Bottom">
              <Setter TargetName="HeaderPanel" Property="Grid.Row" Value="1"/>
              <Setter TargetName="ContentPanel" Property="Grid.Row" Value="0"/>
              <Setter TargetName="RowDefinition0" Property="Height" Value="*"/>
              <Setter TargetName="RowDefinition1" Property="Height" Value="Auto"/>
              <Setter TargetName="HeaderPanel" Property="Margin" Value="2,0,2,2"/>
            </Trigger>
            <Trigger Property="TabStripPlacement" Value="Left">
              <Setter TargetName="HeaderPanel" Property="Grid.Row" Value="0"/>
              <Setter TargetName="ContentPanel" Property="Grid.Row" Value="0"/>
              <Setter TargetName="HeaderPanel" Property="Grid.Column" Value="0"/>
              <Setter TargetName="ContentPanel" Property="Grid.Column" Value="1"/>
              <Setter TargetName="ColumnDefinition0" Property="Width" Value="Auto"/>
              <Setter TargetName="ColumnDefinition1" Property="Width" Value="*"/>
              <Setter TargetName="RowDefinition0" Property="Height" Value="*"/>
              <Setter TargetName="RowDefinition1" Property="Height" Value="0"/>
              <Setter TargetName="HeaderPanel" Property="Margin" Value="2,2,0,2"/>
            </Trigger>
            <Trigger Property="TabStripPlacement" Value="Right">
              <Setter TargetName="HeaderPanel" Property="Grid.Row" Value="0"/>
              <Setter TargetName="ContentPanel" Property="Grid.Row" Value="0"/>
              <Setter TargetName="HeaderPanel" Property="Grid.Column" Value="1"/>
              <Setter TargetName="ContentPanel" Property="Grid.Column" Value="0"/>
              <Setter TargetName="ColumnDefinition0" Property="Width" Value="*"/>
              <Setter TargetName="ColumnDefinition1" Property="Width" Value="Auto"/>
              <Setter TargetName="RowDefinition0" Property="Height" Value="*"/>
              <Setter TargetName="RowDefinition1" Property="Height" Value="0"/>
              <Setter TargetName="HeaderPanel" Property="Margin" Value="0,2,2,2"/>
            </Trigger>
            <Trigger Property="IsEnabled" Value="False">
              <Setter TargetName="TemplateRoot" Property="TextElement.Foreground"
                      Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}"/>
            </Trigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>

  <Style x:Key="TabItem.FocusVisual">
    <Setter Property="Control.Template">
      <Setter.Value>
        <ControlTemplate>
          <Rectangle Margin="3,3,3,2"
                     SnapsToDevicePixels="True"
                     Stroke="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}"
                     StrokeThickness="1"
                     StrokeDashArray="1 1"
                     StrokeDashOffset="1.5"/>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>

  <Style TargetType="{x:Type TabItem}">
    <Setter Property="FocusVisualStyle" Value="{StaticResource TabItem.FocusVisual}"/>
    <Setter Property="Foreground" Value="Black"/>
    <Setter Property="Background" Value="{StaticResource TabItem.Background.Normal}"/>
    <Setter Property="BorderBrush" Value="{StaticResource TabItem.Border.Normal}"/>
    <Setter Property="Margin" Value="0"/>
    <Setter Property="Padding" Value="5,0"/>
    <Setter Property="HorizontalContentAlignment" Value="Stretch"/>
    <Setter Property="VerticalContentAlignment" Value="Stretch"/>
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type TabItem}">
          <Grid x:Name="TemplateRoot" SnapsToDevicePixels="True">
            <Border x:Name="Border"
                    BorderThickness="1,1,1,0"
                    Background="{TemplateBinding Background}"
                    BorderBrush="{TemplateBinding BorderBrush}"
                    Padding="{TemplateBinding Padding}">
              <Border>
                <ContentPresenter x:Name="Content"
                                  ContentSource="Header"
                                  HorizontalAlignment="{Binding HorizontalContentAlignment, RelativeSource={RelativeSource AncestorType={x:Type ItemsControl}}}"
                                  VerticalAlignment="{Binding VerticalContentAlignment, RelativeSource={RelativeSource AncestorType={x:Type ItemsControl}}}"
                                  SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
                                  Focusable="False"
                                  RecognizesAccessKey="True"/>
              </Border>
            </Border>
          </Grid>
          <ControlTemplate.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
              <Setter TargetName="Border" Property="Background" Value="{StaticResource TabItem.Background.Hot}"/>
              <Setter TargetName="Border" Property="BorderBrush" Value="{StaticResource TabItem.Border.Hot}"/>
            </Trigger>
            <Trigger Property="IsEnabled" Value="False">
              <Setter TargetName="Content" Property="Opacity" Value="0.56"/>
              <Setter TargetName="Border" Property="Background" Value="{StaticResource TabItem.Background.Disabled}"/>
              <Setter TargetName="Border" Property="BorderBrush" Value="{StaticResource TabItem.Border.Disabled}"/>
            </Trigger>
            <Trigger Property="IsSelected" Value="True">
              <Setter Property="Panel.ZIndex" Value="1"/>
              <Setter Property="Margin" Value="-2,-2,-2,-1"/>
              <Setter Property="Padding" Value="5,0,5,4"/>
              <Setter TargetName="Border" Property="Background" Value="{StaticResource TabItem.Background.Selected}"/>
              <Setter TargetName="Border" Property="BorderBrush" Value="{StaticResource TabItem.Border.Selected}"/>
            </Trigger>
            <Trigger Property="aero10:TabPanelEx.TabItemKind" Value="Left">
              <Setter TargetName="Border" Property="BorderThickness" Value="1,1,0,0"/>
              <Setter Property="Padding" Value="5,0,6,0"/>
            </Trigger>
            <Trigger Property="aero10:TabPanelEx.TabItemKind" Value="Right">
              <Setter TargetName="Border" Property="BorderThickness" Value="0,1,1,0"/>
              <Setter Property="Padding" Value="6,0,5,0"/>
            </Trigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
    <Style.Triggers>
      <Trigger Property="TabStripPlacement" Value="Bottom">
        <Setter Property="Template">
          <Setter.Value>
            <ControlTemplate TargetType="{x:Type TabItem}">
              <Grid x:Name="TemplateRoot" SnapsToDevicePixels="True">
                <Border x:Name="Border"
                    BorderThickness="1,1,1,0"
                    Background="{TemplateBinding Background}"
                    BorderBrush="{TemplateBinding BorderBrush}">
                  <ContentPresenter x:Name="Content"
                                ContentSource="Header"
                                HorizontalAlignment="{Binding HorizontalContentAlignment, RelativeSource={RelativeSource AncestorType={x:Type ItemsControl}}}"
                                VerticalAlignment="{Binding VerticalContentAlignment, RelativeSource={RelativeSource AncestorType={x:Type ItemsControl}}}"
                                SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
                                Focusable="False"
                                Margin="{TemplateBinding Padding}"
                                RecognizesAccessKey="True"/>
                </Border>
              </Grid>
              <ControlTemplate.Triggers>
                <MultiDataTrigger>
                  <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding IsMouseOver, RelativeSource={RelativeSource Self}}" Value="True"/>
                    <Condition Binding="{Binding TabStripPlacement, RelativeSource={RelativeSource AncestorType={x:Type TabControl}}}" Value="Left"/>
                  </MultiDataTrigger.Conditions>
                  <Setter TargetName="Border" Property="Background" Value="{StaticResource TabItem.Background.Hot}"/>
                  <Setter TargetName="Border" Property="BorderBrush" Value="{StaticResource TabItem.Border.Hot}"/>
                  <Setter TargetName="Border" Property="BorderThickness" Value="1,1,0,1"/>
                </MultiDataTrigger>
                <MultiDataTrigger>
                  <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding IsMouseOver, RelativeSource={RelativeSource Self}}" Value="True"/>
                    <Condition Binding="{Binding TabStripPlacement, RelativeSource={RelativeSource AncestorType={x:Type TabControl}}}" Value="Bottom"/>
                  </MultiDataTrigger.Conditions>
                  <Setter TargetName="Border" Property="Background" Value="{StaticResource TabItem.Background.Hot}"/>
                  <Setter TargetName="Border" Property="BorderBrush" Value="{StaticResource TabItem.Border.Hot}"/>
                  <Setter TargetName="Border" Property="BorderThickness" Value="1,0,1,1"/>
                </MultiDataTrigger>
                <MultiDataTrigger>
                  <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding IsMouseOver, RelativeSource={RelativeSource Self}}" Value="True"/>
                    <Condition Binding="{Binding TabStripPlacement, RelativeSource={RelativeSource AncestorType={x:Type TabControl}}}" Value="Right"/>
                  </MultiDataTrigger.Conditions>
                  <Setter TargetName="Border" Property="Background" Value="{StaticResource TabItem.Background.Hot}"/>
                  <Setter TargetName="Border" Property="BorderBrush" Value="{StaticResource TabItem.Border.Hot}"/>
                  <Setter TargetName="Border" Property="BorderThickness" Value="0,1,1,1"/>
                </MultiDataTrigger>
                <MultiDataTrigger>
                  <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding IsMouseOver, RelativeSource={RelativeSource Self}}" Value="True"/>
                    <Condition Binding="{Binding TabStripPlacement, RelativeSource={RelativeSource AncestorType={x:Type TabControl}}}" Value="Top"/>
                  </MultiDataTrigger.Conditions>
                  <Setter TargetName="Border" Property="Background" Value="{StaticResource TabItem.Background.Hot}"/>
                  <Setter TargetName="Border" Property="BorderBrush" Value="{StaticResource TabItem.Border.Hot}"/>
                  <Setter TargetName="Border" Property="BorderThickness" Value="1,1,1,0"/>
                </MultiDataTrigger>
                <MultiDataTrigger>
                  <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding IsEnabled, RelativeSource={RelativeSource Self}}" Value="False"/>
                    <Condition Binding="{Binding TabStripPlacement, RelativeSource={RelativeSource AncestorType={x:Type TabControl}}}" Value="Left"/>
                  </MultiDataTrigger.Conditions>
                  <Setter TargetName="Content" Property="Opacity" Value="0.56"/>
                  <Setter TargetName="Border" Property="Background" Value="{StaticResource TabItem.Background.Disabled}"/>
                  <Setter TargetName="Border" Property="BorderBrush" Value="{StaticResource TabItem.Border.Disabled}"/>
                  <Setter TargetName="Border" Property="BorderThickness" Value="1,1,0,1"/>
                </MultiDataTrigger>
                <MultiDataTrigger>
                  <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding IsEnabled, RelativeSource={RelativeSource Self}}" Value="False"/>
                    <Condition Binding="{Binding TabStripPlacement, RelativeSource={RelativeSource AncestorType={x:Type TabControl}}}" Value="Bottom"/>
                  </MultiDataTrigger.Conditions>
                  <Setter TargetName="Content" Property="Opacity" Value="0.56"/>
                  <Setter TargetName="Border" Property="Background" Value="{StaticResource TabItem.Background.Disabled}"/>
                  <Setter TargetName="Border" Property="BorderBrush" Value="{StaticResource TabItem.Border.Disabled}"/>
                  <Setter TargetName="Border" Property="BorderThickness" Value="1,0,1,1"/>
                </MultiDataTrigger>
                <MultiDataTrigger>
                  <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding IsEnabled, RelativeSource={RelativeSource Self}}" Value="False"/>
                    <Condition Binding="{Binding TabStripPlacement, RelativeSource={RelativeSource AncestorType={x:Type TabControl}}}" Value="Right"/>
                  </MultiDataTrigger.Conditions>
                  <Setter TargetName="Content" Property="Opacity" Value="0.56"/>
                  <Setter TargetName="Border" Property="Background" Value="{StaticResource TabItem.Background.Disabled}"/>
                  <Setter TargetName="Border" Property="BorderBrush" Value="{StaticResource TabItem.Border.Disabled}"/>
                  <Setter TargetName="Border" Property="BorderThickness" Value="0,1,1,1"/>
                </MultiDataTrigger>
                <MultiDataTrigger>
                  <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding IsEnabled, RelativeSource={RelativeSource Self}}" Value="False"/>
                    <Condition Binding="{Binding TabStripPlacement, RelativeSource={RelativeSource AncestorType={x:Type TabControl}}}" Value="Top"/>
                  </MultiDataTrigger.Conditions>
                  <Setter TargetName="Content" Property="Opacity" Value="0.56"/>
                  <Setter TargetName="Border" Property="Background" Value="{StaticResource TabItem.Background.Disabled}"/>
                  <Setter TargetName="Border" Property="BorderBrush" Value="{StaticResource TabItem.Border.Disabled}"/>
                  <Setter TargetName="Border" Property="BorderThickness" Value="1,1,1,0"/>
                </MultiDataTrigger>
                <MultiDataTrigger>
                  <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding IsSelected, RelativeSource={RelativeSource Self}}" Value="False"/>
                    <Condition Binding="{Binding TabStripPlacement, RelativeSource={RelativeSource AncestorType={x:Type TabControl}}}" Value="Left"/>
                  </MultiDataTrigger.Conditions>
                  <Setter TargetName="Border" Property="BorderThickness" Value="1,1,0,1"/>
                </MultiDataTrigger>
                <MultiDataTrigger>
                  <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding IsSelected, RelativeSource={RelativeSource Self}}" Value="True"/>
                    <Condition Binding="{Binding TabStripPlacement, RelativeSource={RelativeSource AncestorType={x:Type TabControl}}}" Value="Left"/>
                  </MultiDataTrigger.Conditions>
                  <Setter Property="Panel.ZIndex" Value="1"/>
                  <Setter Property="Margin" Value="-2,-2,0,-2"/>
                  <Setter TargetName="Border" Property="BorderThickness" Value="1,1,0,1"/>
                </MultiDataTrigger>
                <MultiDataTrigger>
                  <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding IsSelected, RelativeSource={RelativeSource Self}}" Value="False"/>
                    <Condition Binding="{Binding TabStripPlacement, RelativeSource={RelativeSource AncestorType={x:Type TabControl}}}" Value="Bottom"/>
                  </MultiDataTrigger.Conditions>
                  <Setter TargetName="Border" Property="BorderThickness" Value="1,0,1,1"/>
                </MultiDataTrigger>
                <MultiDataTrigger>
                  <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding IsSelected, RelativeSource={RelativeSource Self}}" Value="True"/>
                    <Condition Binding="{Binding TabStripPlacement, RelativeSource={RelativeSource AncestorType={x:Type TabControl}}}" Value="Bottom"/>
                  </MultiDataTrigger.Conditions>
                  <Setter Property="Panel.ZIndex" Value="1"/>
                  <Setter Property="Margin" Value="-2,0,-2,-2"/>
                  <Setter TargetName="Border" Property="BorderThickness" Value="1,0,1,1"/>
                </MultiDataTrigger>
                <MultiDataTrigger>
                  <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding IsSelected, RelativeSource={RelativeSource Self}}" Value="False"/>
                    <Condition Binding="{Binding TabStripPlacement, RelativeSource={RelativeSource AncestorType={x:Type TabControl}}}" Value="Right"/>
                  </MultiDataTrigger.Conditions>
                  <Setter TargetName="Border" Property="BorderThickness" Value="0,1,1,1"/>
                </MultiDataTrigger>
                <MultiDataTrigger>
                  <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding IsSelected, RelativeSource={RelativeSource Self}}" Value="True"/>
                    <Condition Binding="{Binding TabStripPlacement, RelativeSource={RelativeSource AncestorType={x:Type TabControl}}}" Value="Right"/>
                  </MultiDataTrigger.Conditions>
                  <Setter Property="Panel.ZIndex" Value="1"/>
                  <Setter Property="Margin" Value="0,-2,-2,-2"/>
                  <Setter TargetName="Border" Property="BorderThickness" Value="0,1,1,1"/>
                </MultiDataTrigger>
                <MultiDataTrigger>
                  <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding IsSelected, RelativeSource={RelativeSource Self}}" Value="False"/>
                    <Condition Binding="{Binding TabStripPlacement, RelativeSource={RelativeSource AncestorType={x:Type TabControl}}}" Value="Top"/>
                  </MultiDataTrigger.Conditions>
                  <Setter TargetName="Border" Property="BorderThickness" Value="1,1,1,0"/>
                </MultiDataTrigger>
                <MultiDataTrigger>
                  <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding IsSelected, RelativeSource={RelativeSource Self}}" Value="True"/>
                    <Condition Binding="{Binding TabStripPlacement, RelativeSource={RelativeSource AncestorType={x:Type TabControl}}}" Value="Top"/>
                  </MultiDataTrigger.Conditions>
                  <Setter Property="Panel.ZIndex" Value="1"/>
                  <Setter Property="Margin" Value="-2,-2,-2,0"/>
                  <Setter TargetName="Border" Property="BorderThickness" Value="1,1,1,0"/>
                </MultiDataTrigger>
              </ControlTemplate.Triggers>
            </ControlTemplate>
          </Setter.Value>
        </Setter>
      </Trigger>
    </Style.Triggers>
  </Style>


  <!-- ProgressBar ========================================================= -->

  <SolidColorBrush x:Key="ProgressBar.Fill.Normal" Color="#FF06B025" po:Freeze="True"/>
  <SolidColorBrush x:Key="ProgressBar.Background" Color="#FFE6E6E6" po:Freeze="True"/>
  <SolidColorBrush x:Key="ProgressBar.Border" Color="#FFBCBCBC" po:Freeze="True"/>
  <aero10:EqualsConverter x:Key="EqualsConverter"/>

  <Style TargetType="{x:Type aero10:ProgressBarChrome}">
    <Setter Property="Foreground" Value="{x:Null}"/>
    <Setter Property="Background" Value="{StaticResource ProgressBar.Background}"/>
    <Setter Property="BorderBrush" Value="{StaticResource ProgressBar.Border}"/>
    <Setter Property="BorderThickness" Value="1"/>
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type aero10:ProgressBarChrome}">
          <Grid x:Name="TemplateRoot">
            <Border Background="{TemplateBinding Background}"
                    BorderBrush="{TemplateBinding BorderBrush}"
                    BorderThickness="{TemplateBinding BorderThickness}"/>

            <Rectangle x:Name="PART_Track"/>

            <Grid x:Name="PART_Indicator"
                  HorizontalAlignment="Left"
                  ClipToBounds="True"
                  Width="0">
              <Rectangle x:Name="Indicator"
                         Margin="{TemplateBinding BorderThickness}"
                         Fill="{TemplateBinding Foreground}"/>

              <Grid x:Name="PART_MoveOverlay"
                      Width="127"
                      Margin="-127,0,0,0"
                      HorizontalAlignment="Left"
                      VerticalAlignment="Stretch"
                      Visibility="Collapsed">
                <Image x:Name="DeterminateOverlay"
                       Source="/PresentationTheme.Aero.Win10;component/Resources/Progress.MoveOverlay.png"
                       Stretch="Fill"/>
                <Rectangle x:Name="IndeterminateOverlay"
                       Fill="{TemplateBinding Foreground}"
                       Visibility="Collapsed"/>
              </Grid>

              <Grid x:Name="PART_PulseOverlay"
                    Opacity="0"
                    HorizontalAlignment="Stretch"
                    VerticalAlignment="Bottom"
                    Height="18"
                    Visibility="Collapsed">
                <Grid.ColumnDefinitions>
                  <ColumnDefinition Width="Auto"/>
                  <ColumnDefinition Width="*"/>
                  <ColumnDefinition Width="Auto"/>
                </Grid.ColumnDefinitions>
                <Image Stretch="Fill">
                  <Image.Source>
                    <CroppedBitmap Source="/PresentationTheme.Aero.Win10;component/Resources/Progress.PulseOverlay.png"
                                   SourceRect="0,0,21,18"/>
                  </Image.Source>
                </Image>
                <Image Stretch="Fill" Grid.Column="1">
                  <Image.Source>
                    <CroppedBitmap Source="/PresentationTheme.Aero.Win10;component/Resources/Progress.PulseOverlay.png"
                                   SourceRect="21,0,1,18"/>
                  </Image.Source>
                </Image>
                <Image Stretch="Fill" Grid.Column="2">
                  <Image.Source>
                    <CroppedBitmap Source="/PresentationTheme.Aero.Win10;component/Resources/Progress.PulseOverlay.png"
                                   SourceRect="22,0,20,18"/>
                  </Image.Source>
                </Image>
              </Grid>
            </Grid>
          </Grid>
          <ControlTemplate.Triggers>
            <Trigger Property="Orientation" Value="Vertical">
              <Setter TargetName="TemplateRoot" Property="LayoutTransform">
                <Setter.Value>
                  <RotateTransform Angle="-90"/>
                </Setter.Value>
              </Setter>
            </Trigger>
            <Trigger Property="Foreground" Value="{x:Null}">
              <Setter TargetName="Indicator" Property="Fill" Value="{StaticResource ProgressBar.Fill.Normal}"/>
              <Setter TargetName="IndeterminateOverlay" Property="Fill" Value="{StaticResource ProgressBar.Fill.Normal}"/>
              <Setter TargetName="PART_MoveOverlay" Property="Visibility" Value="Visible"/>
              <Setter TargetName="PART_PulseOverlay" Property="Visibility" Value="Visible"/>
            </Trigger>
            <DataTrigger Value="True">
              <DataTrigger.Binding>
                <MultiBinding Converter="{StaticResource EqualsConverter}">
                  <Binding Path="Value" RelativeSource="{RelativeSource Self}"/>
                  <Binding Path="Maximum" RelativeSource="{RelativeSource Self}"/>
                </MultiBinding>
              </DataTrigger.Binding>
              <Setter TargetName="PART_MoveOverlay" Property="Visibility" Value="Collapsed"/>
              <Setter TargetName="PART_PulseOverlay" Property="Visibility" Value="Collapsed"/>
            </DataTrigger>
            <Trigger Property="IsIndeterminate" Value="True">
              <Setter TargetName="Indicator" Property="Visibility" Value="Collapsed"/>
              <Setter TargetName="DeterminateOverlay" Property="Visibility" Value="Collapsed"/>
              <Setter TargetName="IndeterminateOverlay" Property="Visibility" Value="Visible"/>
              <Setter TargetName="PART_MoveOverlay" Property="Visibility" Value="Visible"/>
              <Setter TargetName="PART_PulseOverlay" Property="Visibility" Value="Visible"/>
            </Trigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>

  <Style TargetType="{x:Type ProgressBar}">
    <Setter Property="Foreground" Value="{x:Null}"/>
    <Setter Property="Background" Value="{StaticResource ProgressBar.Background}"/>
    <Setter Property="BorderBrush" Value="{StaticResource ProgressBar.Border}"/>
    <Setter Property="BorderThickness" Value="1"/>
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type ProgressBar}">
          <aero10:ProgressBarChrome
            Style="{StaticResource {x:Type aero10:ProgressBarChrome}}"
            Bar="{Binding RelativeSource={RelativeSource TemplatedParent}}"
            Background="{TemplateBinding Background}"
            BorderBrush="{TemplateBinding BorderBrush}"
            BorderThickness="{TemplateBinding BorderThickness}"/>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>


  <!-- Slider ============================================================== -->

  <SolidColorBrush x:Key="Slider.Thumb.Foreground.Normal" Color="#FFC4C4C4"/>
  <SolidColorBrush x:Key="Slider.Thumb.Background.Normal" Color="#FF0078D7"/>
  <SolidColorBrush x:Key="Slider.Thumb.Background.Hot" Color="#FF171717"/>
  <SolidColorBrush x:Key="Slider.Thumb.Background.Pressed" Color="#FFCCCCCC"/>
  <SolidColorBrush x:Key="Slider.Thumb.Background.Disabled" Color="#FFCCCCCC"/>
  <SolidColorBrush x:Key="Slider.Track.Background" Color="#FFE7EAEA"/>
  <SolidColorBrush x:Key="Slider.Track.Border" Color="#FFD6D6D6"/>

  <ControlTemplate x:Key="SliderThumbHorizontal" TargetType="{x:Type Thumb}">
    <Grid HorizontalAlignment="Center"
          VerticalAlignment="Center"
          UseLayoutRounding="True">
      <Path x:Name="Grip"
            Data="M0,0 10,0 10,21 0,21 z"
            Margin="0,0,1,1"
            SnapsToDevicePixels="True"
            VerticalAlignment="Center"
            UseLayoutRounding="True"
            Stretch="Fill"
            Fill="{StaticResource Slider.Thumb.Background.Normal}"/>
    </Grid>
    <ControlTemplate.Triggers>
      <Trigger Property="IsMouseOver" Value="True">
        <Setter TargetName="Grip" Property="Fill" Value="{StaticResource Slider.Thumb.Background.Hot}"/>
      </Trigger>
      <Trigger Property="IsDragging" Value="True">
        <Setter TargetName="Grip" Property="Fill" Value="{StaticResource Slider.Thumb.Background.Pressed}"/>
      </Trigger>
      <Trigger Property="IsEnabled" Value="False">
        <Setter TargetName="Grip" Property="Fill" Value="{StaticResource Slider.Thumb.Background.Disabled}"/>
      </Trigger>
    </ControlTemplate.Triggers>
  </ControlTemplate>

  <ControlTemplate x:Key="SliderThumbHorizontalTop" TargetType="{x:Type Thumb}">
    <Grid HorizontalAlignment="Center"
          VerticalAlignment="Center"
          UseLayoutRounding="True">
      <Path x:Name="Grip"
            Data="M0,19 11,19 11,5 5.5,-0.5 0,5 z"
            SnapsToDevicePixels="True"
            VerticalAlignment="Center"
            UseLayoutRounding="True"
            Stretch="Fill"
            Fill="{StaticResource Slider.Thumb.Background.Normal}"/>
    </Grid>
    <ControlTemplate.Triggers>
      <Trigger Property="IsMouseOver" Value="True">
        <Setter TargetName="Grip" Property="Fill" Value="{StaticResource Slider.Thumb.Background.Hot}"/>
      </Trigger>
      <Trigger Property="IsDragging" Value="True">
        <Setter TargetName="Grip" Property="Fill" Value="{StaticResource Slider.Thumb.Background.Pressed}"/>
      </Trigger>
      <Trigger Property="IsEnabled" Value="False">
        <Setter TargetName="Grip" Property="Fill" Value="{StaticResource Slider.Thumb.Background.Disabled}"/>
      </Trigger>
    </ControlTemplate.Triggers>
  </ControlTemplate>

  <ControlTemplate x:Key="SliderThumbHorizontalBottom" TargetType="{x:Type Thumb}">
    <Grid HorizontalAlignment="Center" VerticalAlignment="Center" UseLayoutRounding="True">
      <Path x:Name="Grip"
            Data="M0,0 11,0 11,14 5.5,19.5 0,14 z"
            SnapsToDevicePixels="True"
            VerticalAlignment="Center"
            UseLayoutRounding="True"
            Stretch="Fill"
            Fill="{StaticResource Slider.Thumb.Background.Normal}"/>
    </Grid>
    <ControlTemplate.Triggers>
      <Trigger Property="IsMouseOver" Value="True">
        <Setter TargetName="Grip" Property="Fill" Value="{StaticResource Slider.Thumb.Background.Hot}"/>
      </Trigger>
      <Trigger Property="IsDragging" Value="True">
        <Setter TargetName="Grip" Property="Fill" Value="{StaticResource Slider.Thumb.Background.Pressed}"/>
      </Trigger>
      <Trigger Property="IsEnabled" Value="False">
        <Setter TargetName="Grip" Property="Fill" Value="{StaticResource Slider.Thumb.Background.Disabled}"/>
      </Trigger>
    </ControlTemplate.Triggers>
  </ControlTemplate>

  <ControlTemplate x:Key="SliderHorizontal" TargetType="{x:Type Slider}">
    <Border x:Name="Border"
            SnapsToDevicePixels="True"
            Background="{TemplateBinding Background}"
            BorderBrush="{TemplateBinding BorderBrush}"
            BorderThickness="{TemplateBinding BorderThickness}"
            VerticalAlignment="Top">
      <Grid Margin="8,0">
        <Grid.RowDefinitions>
          <RowDefinition Height="Auto"/>
          <RowDefinition Height="Auto" MinHeight="{TemplateBinding MinHeight}"/>
          <RowDefinition Height="Auto"/>
        </Grid.RowDefinitions>
        <aero10:TickBarEx x:Name="TopTick"
                          Height="4"
                          Placement="Top"
                          Visibility="Collapsed"
                          Margin="0,5,0,0"
                          Fill="{TemplateBinding Foreground}"/>
        <aero10:TickBarEx x:Name="BottomTick"
                          Grid.Row="2"
                          Height="4"
                          Placement="Bottom"
                          Visibility="Collapsed"
                          Margin="0,0,0,5"
                          Fill="{TemplateBinding Foreground}"/>
        <Border x:Name="TrackBackground"
                Grid.Row="1"
                BorderThickness="1"
                Height="4"
                Margin="0,0,0,2"
                VerticalAlignment="center"
                BorderBrush="{StaticResource Slider.Track.Border}"
                Background="{StaticResource Slider.Track.Background}">
          <Canvas Margin="-1,0">
            <Rectangle x:Name="PART_SelectionRange"
                       Height="6"
                       Margin="0,2"
                       Visibility="Hidden"
                       Fill="{DynamicResource {x:Static SystemColors.HighlightBrushKey}}"/>
          </Canvas>
        </Border>
        <Track x:Name="PART_Track" Grid.Row="1" Margin="0,2">
          <Track.DecreaseRepeatButton>
            <RepeatButton Command="{x:Static Slider.DecreaseLarge}"
                          Style="{StaticResource RepeatButtonTransparent}"/>
          </Track.DecreaseRepeatButton>
          <Track.IncreaseRepeatButton>
            <RepeatButton Command="{x:Static Slider.IncreaseLarge}"
                          Style="{StaticResource RepeatButtonTransparent}"/>
          </Track.IncreaseRepeatButton>
          <Track.Thumb>
            <Thumb x:Name="Thumb"
                   OverridesDefaultStyle="True"
                   Focusable="False"
                   VerticalAlignment="Center"
                   Template="{StaticResource SliderThumbHorizontalBottom}"
                   Width="11"
                   Height="19"/>
          </Track.Thumb>
        </Track>
      </Grid>
    </Border>
    <ControlTemplate.Triggers>
      <Trigger Property="TickPlacement" Value="TopLeft">
        <Setter TargetName="TopTick" Property="Visibility" Value="Visible"/>
        <Setter TargetName="Thumb" Property="Template" Value="{StaticResource SliderThumbHorizontalTop}"/>
        <Setter TargetName="TrackBackground" Property="Margin" Value="0,1,0,0"/>
        <Setter TargetName="PART_Track" Property="Margin" Value="0,1,0,2"/>
      </Trigger>
      <Trigger Property="TickPlacement" Value="BottomRight">
        <Setter TargetName="BottomTick" Property="Visibility" Value="Visible"/>
        <Setter TargetName="Thumb" Property="Template" Value="{StaticResource SliderThumbHorizontalBottom}"/>
        <Setter TargetName="TrackBackground" Property="Margin" Value="0,0,0,2"/>
        <Setter TargetName="PART_Track" Property="Margin" Value="0,2,0,1"/>
      </Trigger>
      <Trigger Property="TickPlacement" Value="Both">
        <Setter TargetName="TopTick" Property="Visibility" Value="Visible"/>
        <Setter TargetName="BottomTick" Property="Visibility" Value="Visible"/>
        <Setter TargetName="Thumb" Property="Template" Value="{StaticResource SliderThumbHorizontal}"/>
        <Setter TargetName="Thumb" Property="Width" Value="11"/>
        <Setter TargetName="Thumb" Property="Height" Value="22"/>
        <Setter TargetName="TrackBackground" Property="Margin" Value="0,0,0,0"/>
        <Setter TargetName="PART_Track" Property="Margin" Value="0,1"/>
      </Trigger>
      <Trigger Property="IsSelectionRangeEnabled" Value="True">
        <Setter TargetName="TrackBackground" Property="Height" Value="12"/>
        <Setter TargetName="PART_SelectionRange" Property="Visibility" Value="Visible"/>
      </Trigger>
      <MultiTrigger>
        <MultiTrigger.Conditions>
          <Condition Property="IsSelectionRangeEnabled" Value="True"/>
          <Condition Property="TickPlacement" Value="Both"/>
        </MultiTrigger.Conditions>
        <Setter TargetName="Thumb" Property="Width" Value="11"/>
        <Setter TargetName="Thumb" Property="Height" Value="24"/>
        <Setter TargetName="PART_SelectionRange" Property="Height" Value="12"/>
        <Setter TargetName="TrackBackground" Property="Height" Value="18"/>
      </MultiTrigger>
    </ControlTemplate.Triggers>
  </ControlTemplate>

  <ControlTemplate x:Key="SliderThumbVertical" TargetType="{x:Type Thumb}">
    <Grid HorizontalAlignment="Center"
          VerticalAlignment="Center"
          UseLayoutRounding="True">
      <Path x:Name="Grip"
            Data="M0,0 0,10 21,10 21,0 z"
            Margin="0,0,1,1"
            SnapsToDevicePixels="True"
            VerticalAlignment="Center"
            UseLayoutRounding="True"
            Stretch="Fill"
            Fill="{StaticResource Slider.Thumb.Background.Normal}"/>
    </Grid>
    <ControlTemplate.Triggers>
      <Trigger Property="IsMouseOver" Value="True">
        <Setter TargetName="Grip" Property="Fill" Value="{StaticResource Slider.Thumb.Background.Hot}"/>
      </Trigger>
      <Trigger Property="IsDragging" Value="True">
        <Setter TargetName="Grip" Property="Fill" Value="{StaticResource Slider.Thumb.Background.Pressed}"/>
      </Trigger>
      <Trigger Property="IsEnabled" Value="False">
        <Setter TargetName="Grip" Property="Fill" Value="{StaticResource Slider.Thumb.Background.Disabled}"/>
      </Trigger>
    </ControlTemplate.Triggers>
  </ControlTemplate>

  <ControlTemplate x:Key="SliderThumbVerticalLeft" TargetType="{x:Type Thumb}">
    <Grid HorizontalAlignment="Center"
          VerticalAlignment="Center"
          UseLayoutRounding="True">
      <Path x:Name="Grip"
            Data="M19,0 19,11 5,11 -0.5,5.5 5,0 z"
            Stretch="Fill"
            Fill="{StaticResource Slider.Thumb.Background.Normal}"/>
    </Grid>
    <ControlTemplate.Triggers>
      <Trigger Property="IsMouseOver" Value="True">
        <Setter TargetName="Grip" Property="Fill" Value="{StaticResource Slider.Thumb.Background.Hot}"/>
      </Trigger>
      <Trigger Property="IsDragging" Value="True">
        <Setter TargetName="Grip" Property="Fill" Value="{StaticResource Slider.Thumb.Background.Pressed}"/>
      </Trigger>
      <Trigger Property="IsEnabled" Value="False">
        <Setter TargetName="Grip" Property="Fill" Value="{StaticResource Slider.Thumb.Background.Disabled}"/>
      </Trigger>
    </ControlTemplate.Triggers>
  </ControlTemplate>

  <ControlTemplate x:Key="SliderThumbVerticalRight" TargetType="{x:Type Thumb}">
    <Grid HorizontalAlignment="Center"
          VerticalAlignment="Center"
          UseLayoutRounding="True">
      <Path x:Name="Grip"
            Data="M0,0 0,11 14,11 19.5,5.5 14,0 z"
            Stretch="Fill"
            Fill="{StaticResource Slider.Thumb.Background.Normal}"/>
    </Grid>
    <ControlTemplate.Triggers>
      <Trigger Property="IsMouseOver" Value="True">
        <Setter TargetName="Grip" Property="Fill" Value="{StaticResource Slider.Thumb.Background.Hot}"/>
      </Trigger>
      <Trigger Property="IsDragging" Value="True">
        <Setter TargetName="Grip" Property="Fill" Value="{StaticResource Slider.Thumb.Background.Pressed}"/>
      </Trigger>
      <Trigger Property="IsEnabled" Value="False">
        <Setter TargetName="Grip" Property="Fill" Value="{StaticResource Slider.Thumb.Background.Disabled}"/>
      </Trigger>
    </ControlTemplate.Triggers>
  </ControlTemplate>

  <ControlTemplate x:Key="SliderVertical" TargetType="{x:Type Slider}">
    <Border x:Name="Border"
            SnapsToDevicePixels="True"
            Background="{TemplateBinding Background}"
            BorderBrush="{TemplateBinding BorderBrush}"
            BorderThickness="{TemplateBinding BorderThickness}"
            HorizontalAlignment="Left">
      <Grid Margin="0,8">
        <Grid.ColumnDefinitions>
          <ColumnDefinition Width="Auto"/>
          <ColumnDefinition Width="Auto" MinWidth="{TemplateBinding MinWidth}"/>
          <ColumnDefinition Width="Auto"/>
        </Grid.ColumnDefinitions>
        <aero10:TickBarEx x:Name="TopTick"
                          Width="4"
                          Placement="Left"
                          Visibility="Collapsed"
                          Margin="5,0,0,0"
                          Fill="{TemplateBinding Foreground}"/>
        <aero10:TickBarEx x:Name="BottomTick"
                          Grid.Column="2"
                          Width="4"
                          Placement="Right"
                          Visibility="Collapsed"
                          Margin="0,0,5,0"
                          Fill="{TemplateBinding Foreground}"/>
        <Border x:Name="TrackBackground"
                Grid.Column="1"
                BorderThickness="1"
                Width="4"
                Margin="0,0,2,0"
                HorizontalAlignment="Center"
                BorderBrush="{StaticResource Slider.Track.Border}"
                Background="{StaticResource Slider.Track.Background}">
          <Canvas Margin="0,-1">
            <Rectangle x:Name="PART_SelectionRange"
                       Width="6"
                       Margin="2,0"
                       Visibility="Hidden"
                       Fill="{DynamicResource {x:Static SystemColors.HighlightBrushKey}}"/>
          </Canvas>
        </Border>
        <Track x:Name="PART_Track" Grid.Column="1" Margin="2,0">
          <Track.DecreaseRepeatButton>
            <RepeatButton Command="{x:Static Slider.DecreaseLarge}"
                          Style="{StaticResource RepeatButtonTransparent}"/>
          </Track.DecreaseRepeatButton>
          <Track.IncreaseRepeatButton>
            <RepeatButton Command="{x:Static Slider.IncreaseLarge}"
                          Style="{StaticResource RepeatButtonTransparent}"/>
          </Track.IncreaseRepeatButton>
          <Track.Thumb>
            <Thumb x:Name="Thumb"
                   OverridesDefaultStyle="True"
                   Focusable="False"
                   HorizontalAlignment="Center"
                   Width="19"
                   Height="11"
                   Template="{StaticResource SliderThumbVerticalRight}"/>
          </Track.Thumb>
        </Track>
      </Grid>
    </Border>
    <ControlTemplate.Triggers>
      <Trigger Property="TickPlacement" Value="TopLeft">
        <Setter TargetName="TopTick" Property="Visibility" Value="Visible"/>
        <Setter TargetName="Thumb" Property="Template" Value="{StaticResource SliderThumbVerticalLeft}"/>
        <Setter TargetName="TrackBackground" Property="Margin" Value="1,0,0,0"/>
        <Setter TargetName="PART_Track" Property="Margin" Value="1,0,2,0"/>
      </Trigger>
      <Trigger Property="TickPlacement" Value="BottomRight">
        <Setter TargetName="BottomTick" Property="Visibility" Value="Visible"/>
        <Setter TargetName="Thumb" Property="Template" Value="{StaticResource SliderThumbVerticalRight}"/>
        <Setter TargetName="TrackBackground" Property="Margin" Value="0,0,2,0"/>
        <Setter TargetName="PART_Track" Property="Margin" Value="2,0,1,0"/>
      </Trigger>
      <Trigger Property="TickPlacement" Value="Both">
        <Setter TargetName="TopTick" Property="Visibility" Value="Visible"/>
        <Setter TargetName="BottomTick" Property="Visibility" Value="Visible"/>
        <Setter TargetName="Thumb" Property="Template" Value="{StaticResource SliderThumbVertical}"/>
        <Setter TargetName="Thumb" Property="Width" Value="22"/>
        <Setter TargetName="Thumb" Property="Height" Value="11"/>
        <Setter TargetName="TrackBackground" Property="Margin" Value="0"/>
        <Setter TargetName="PART_Track" Property="Margin" Value="1,0"/>
      </Trigger>
      <Trigger Property="IsSelectionRangeEnabled" Value="True">
        <Setter TargetName="TrackBackground" Property="Width" Value="12"/>
        <Setter TargetName="PART_SelectionRange" Property="Visibility" Value="Visible"/>
      </Trigger>
      <MultiTrigger>
        <MultiTrigger.Conditions>
          <Condition Property="IsSelectionRangeEnabled" Value="True"/>
          <Condition Property="TickPlacement" Value="Both"/>
        </MultiTrigger.Conditions>
        <Setter TargetName="Thumb" Property="Width" Value="24"/>
        <Setter TargetName="Thumb" Property="Height" Value="11"/>
        <Setter TargetName="PART_SelectionRange" Property="Width" Value="12"/>
        <Setter TargetName="TrackBackground" Property="Width" Value="18"/>
      </MultiTrigger>
    </ControlTemplate.Triggers>
  </ControlTemplate>

  <Style TargetType="{x:Type Slider}">
    <Setter Property="Stylus.IsPressAndHoldEnabled" Value="False"/>
    <Setter Property="Background" Value="Transparent"/>
    <Setter Property="BorderBrush" Value="Transparent"/>
    <Setter Property="Foreground" Value="{StaticResource Slider.Thumb.Foreground.Normal}"/>
    <Setter Property="Template" Value="{StaticResource SliderHorizontal}"/>
    <Style.Triggers>
      <Trigger Property="Orientation" Value="Vertical">
        <Setter Property="Template" Value="{StaticResource SliderVertical}"/>
      </Trigger>
    </Style.Triggers>
  </Style>
</ResourceDictionary>
